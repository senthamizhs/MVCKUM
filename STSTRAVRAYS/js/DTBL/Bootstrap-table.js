!function (t) { "use strict"; var e = function (t) { var e = arguments, i = !0, s = 1; return t = t.replace(/%s/g, function () { var t = e[s++]; return void 0 === t ? (i = !1, "") : t }), i ? t : "" }, i = function (e, i, s, o) { var n = ""; return t.each(e, function (t, e) { return e[i] !== o || (n = e[s], !1) }), n }, s = function (e, i) { var s = -1; return t.each(e, function (t, e) { return e.field !== i || (s = t, !1) }), s }, o = function () { var e, i, s = t("<p/>").addClass("fixed-table-scroll-inner"), o = t("<div/>").addClass("fixed-table-scroll-outer"); return o.append(s), t("body").append(o), e = s[0].offsetWidth, o.css("overflow", "scroll"), i = s[0].offsetWidth, e == i && (i = o[0].clientWidth), o.remove(), e - i }, n = function (e, i, s, o) { if ("string" == typeof i) { var n = i.split("."); n.length > 1 ? (i = window, t.each(n, function (t, e) { i = i[e] })) : i = window[i] } return "object" == typeof i ? i : "function" == typeof i ? i.apply(e, s) : o }, a = function (e, i) { this.options = i, this.$el = t(e), this.$el_ = this.$el.clone(), this.timeoutId_ = 0, this.searchCallback = !1, this.init() }; a.DEFAULTS = { classes: "table table-hover", height: void 0, undefinedText: "-", sortName: void 0, sortOrder: "asc", striped: !1, columns: [], data: [], method: "get", url: void 0, cache: !0, contentType: "application/json", queryParams: function (t) { return t }, queryParamsType: "limit", responseHandler: function (t) { return t }, pagination: !1, sidePagination: "client", totalRows: 0, pageNumber: 1, pageSize: 10, pageList: [5, 10, 25, 50, 100], search: !1, selectItemName: "btSelectItem", showHeader: !0, showColumns: !1, showRefresh: !1, showToggle: !1, minimumCountColumns: 1, idField: void 0, cardView: !1, clickToSelect: !1, singleSelect: !1, toolbar: void 0, checkboxHeader: !1, sortable: !0, maintainSelected: !1, rowStyle: function (t, e) { return {} }, formatLoadingMessage: function () { return "Loading, please wait…" }, formatRecordsPerPage: function (t) { return e("%s records per page", t) }, formatShowingRows: function (t, i, s) { return e("Showing %s to %s of %s rows", t, i, s) }, formatSearch: function () { return "Search" }, formatNoMatches: function () { return "No matching records found" }, onAll: function (t, e) { return !1 }, onClickRow: function (t, e) { return !1 }, onDblClickRow: function (t, e) { return !1 }, onSort: function (t, e) { return !1 }, onCheck: function (t) { return !1 }, onUncheck: function (t) { return !1 }, onCheckAll: function () { return !1 }, onUncheckAll: function () { return !1 }, onLoadSuccess: function (t) { return !1 }, onLoadError: function (t) { return !1 }, onColumnSwitch: function (t, e) { return !1 } }, a.COLUMN_DEFAULTS = { radio: !1, checkbox: !1, checkboxEnabled: !0, field: void 0, title: void 0, class: void 0, align: void 0, halign: void 0, valign: void 0, width: void 0, sortable: !1, order: "asc", visible: !0, switchable: !0, clickToSelect: !0, formatter: void 0, events: void 0, sorter: void 0, cellStyle: void 0 }, a.EVENTS = { "all.bs.table": "onAll", "click-row.bs.table": "onClickRow", "dbl-click-row.bs.table": "onDblClickRow", "sort.bs.table": "onSort", "check.bs.table": "onCheck", "uncheck.bs.table": "onUncheck", "check-all.bs.table": "onCheckAll", "uncheck-all.bs.table": "onUncheckAll", "load-success.bs.table": "onLoadSuccess", "load-error.bs.table": "onLoadError", "column-switch.bs.table": "onColumnSwitch" }, a.prototype.init = function () { this.initContainer(), this.initTable(), this.initHeader(), this.initData(), this.initToolbar(), this.initPagination(), this.initBody(), this.initServer() }, a.prototype.initContainer = function () { this.$container = t(['<div class="bootstrap-table">', '<div class="fixed-table-toolbar"></div>', '<div class="fixed-table-container">', '<div class="fixed-table-header"><table></table></div>', '<div class="fixed-table-body">', '<div class="fixed-table-loading">', this.options.formatLoadingMessage(), "</div>", "</div>", '<div class="fixed-table-pagination"></div>', "</div>", "</div>"].join("")), this.$container.insertAfter(this.$el), this.$container.find(".fixed-table-body").append(this.$el), this.$container.after('<div class="clearfix"></div>'), this.$loading = this.$container.find(".fixed-table-loading"), this.$el.addClass(this.options.classes), this.options.striped && this.$el.addClass("table-striped") }, a.prototype.initTable = function () { var e = this, i = [], s = []; this.$header = this.$el.find("thead"), this.$header.length || (this.$header = t("<thead></thead>").appendTo(this.$el)), this.$header.find("tr").length || this.$header.append("<tr></tr>"), this.$header.find("th").each(function () { var e = t.extend({}, { title: t(this).html(), class: t(this).attr("class") }, t(this).data()); i.push(e) }), this.options.columns = t.extend([], i, this.options.columns), t.each(this.options.columns, function (i, s) { e.options.columns[i] = t.extend({}, a.COLUMN_DEFAULTS, { field: i }, s) }), this.options.data.length || (this.$el.find("tbody tr").each(function () { var i = {}; t(this).find("td").each(function (s) { i[e.options.columns[s].field] = t(this).html() }), s.push(i) }), this.options.data = s) }, a.prototype.initHeader = function () { var i = this, s = [], o = []; this.header = { fields: [], styles: [], classes: [], formatters: [], events: [], sorters: [], cellStyles: [], clickToSelects: [] }, t.each(this.options.columns, function (t, n) { var a = "", r = "", h = e(' class="%s"', n.class); i.options.sortOrder || n.order; n.visible && (r = e("text-align: %s; ", n.halign ? n.halign : n.align), r += e("vertical-align: %s; ", n.valign), r += e("width: %spx; ", n.checkbox || n.radio ? 36 : n.width), s.push(n), i.header.fields.push(n.field), i.header.styles.push(r), i.header.classes.push(h), i.header.formatters.push(n.formatter), i.header.events.push(n.events), i.header.sorters.push(n.sorter), i.header.cellStyles.push(n.cellStyle), i.header.clickToSelects.push(n.clickToSelect), o.push("<th", n.checkbox || n.radio ? e(' class="bs-checkbox %s"', n.class || "") : h, e(' style="%s"', r), ">"), o.push(e('<div class="th-inner %s">', i.options.sortable && n.sortable ? "sortable" : "")), a = n.title, i.options.sortName === n.field && i.options.sortable && n.sortable && (a += i.getCaretHtml()), n.checkbox && (!i.options.singleSelect && i.options.checkboxHeader && (a = '<input name="btSelectAll" type="checkbox" />'), i.header.stateField = n.field), n.radio && (a = "", i.header.stateField = n.field, i.options.singleSelect = !0), o.push(a), o.push("</div>"), o.push('<div class="fht-cell"></div>'), o.push("</th>")) }), this.$header.find("tr").html(o.join("")), this.$header.find("th").each(function (e) { t(this).data(s[e]) }), this.$container.off("click", "th").on("click", "th", function (e) { i.options.sortable && t(this).data().sortable && i.onSort(e) }), !this.options.showHeader || this.options.cardView ? (this.$header.hide(), this.$container.find(".fixed-table-header").hide(), this.$loading.css("top", 0)) : (this.$header.show(), this.$container.find(".fixed-table-header").show(), this.$loading.css("top", "37px")), this.$selectAll = this.$header.find('[name="btSelectAll"]'), this.$container.off("click", '[name="btSelectAll"]').on("click", '[name="btSelectAll"]', function () { var e = t(this).prop("checked"); i[e ? "checkAll" : "uncheckAll"]() }) }, a.prototype.initData = function (t, e) { this.data = e ? this.data.concat(t) : t || this.options.data, this.options.data = this.data, "server" !== this.options.sidePagination && this.initSort() }, a.prototype.initSort = function () { var e = this, i = this.options.sortName, s = "desc" === this.options.sortOrder ? -1 : 1, o = t.inArray(this.options.sortName, this.header.fields); -1 !== o && this.data.sort(function (t, a) { var r = n(e.header, e.header.sorters[o], [t[i], a[i]]); return void 0 !== r ? s * r : t[i] === a[i] ? 0 : t[i] < a[i] ? -1 * s : s }) }, a.prototype.onSort = function (e) { var i = t(e.currentTarget), s = this.$header.find("th").eq(i.index()); this.$header.add(this.$header_).find("span.order").remove(), this.options.sortName === i.data("field") ? this.options.sortOrder = "asc" === this.options.sortOrder ? "desc" : "asc" : (this.options.sortName = i.data("field"), this.options.sortOrder = "asc" === i.data("order") ? "desc" : "asc"), this.trigger("sort", this.options.sortName, this.options.sortOrder), i.add(s).data("order", this.options.sortOrder).find(".th-inner").append(this.getCaretHtml()), "server" !== this.options.sidePagination ? (this.initSort(), this.initBody()) : this.initServer() }, a.prototype.initToolbar = function () { var i, s = this, o = [], n = 0; this.$toolbar = this.$container.find(".fixed-table-toolbar").html(""), "string" == typeof this.options.toolbar && t('<div class="bars pull-left"></div>').appendTo(this.$toolbar).append(t(this.options.toolbar)), o = ['<div class="columns btn-group pull-right">'], this.options.showRefresh && o.push('<button class="btn btn-default" type="button" name="refresh">', '<i class="glyphicon glyphicon-refresh icon-refresh"></i>', "</button>"), this.options.showToggle && o.push('<button class="btn btn-default" type="button" name="toggle">', '<i class="fa fa fa-list-alt icon-list-alt"></i>', "</button>"), this.options.showColumns && (o.push(e('<div class="keep-open %s">', this.options.showRefresh || this.options.showToggle ? "btn-group" : ""), '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">', '<i class="glyphicon glyphicon-th icon-th"></i>', ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'), t.each(this.options.columns, function (t, i) { if (!i.radio && !i.checkbox) { var s = i.visible ? ' checked="checked"' : ""; i.switchable && o.push(e('<li><label><input type="checkbox" data-field="%s" value="%s"%s> %s</label></li>', i.field, t, s, i.title)) } }), o.push("</ul>", "</div>")), o.push("</div>"), o.length > 2 && this.$toolbar.append(o.join("")), this.options.showRefresh && this.$toolbar.find('button[name="refresh"]').off("click").on("click", t.proxy(this.refresh, this)), this.options.showToggle && this.$toolbar.find('button[name="toggle"]').off("click").on("click", function () { s.options.cardView = !s.options.cardView, s.initHeader(), s.initBody() }), this.options.showColumns && ((i = this.$toolbar.find(".keep-open")).find("li").off("click").on("click", function (t) { t.stopImmediatePropagation() }), i.find("input").off("click").on("click", function () { var e = t(this); s.toggleColumn(e.val(), e.prop("checked"), !1), s.trigger("column-switch", t(this).data("field"), e.prop("checked")) })), this.options.search && ((o = []).push('<div class="pull-right search">', e('<input class="form-control" type="text" placeholder="%s">', this.options.formatSearch()), "</div>"), this.$toolbar.append(o.join("")), this.$toolbar.find(".search input").off("keyup").on("keyup", function (t) { clearTimeout(n), n = setTimeout(function () { s.onSearch(t) }, 500) })) }, a.prototype.onSearch = function (e) { var i = t.trim(t(e.currentTarget).val()); t(e.currentTarget).val(i), i !== this.searchText && (this.searchText = i, this.options.pageNumber = 1, this.initSearch(), this.updatePagination()) }, a.prototype.initSearch = function () { var e = this; if ("server" !== this.options.sidePagination) { var i = this.searchText && this.searchText.toLowerCase(); this.data = i ? t.grep(this.options.data, function (s, o) { a = t.isNumeric(a) ? parseInt(a, 10) : a; for (var a in s) { var r = s[a]; if (r = n(e.header, e.header.formatters[t.inArray(a, e.header.fields)], [r, s, o], r), -1 !== t.inArray(a, e.header.fields) && ("string" == typeof r || "number" == typeof r) && -1 !== (r + "").toLowerCase().indexOf(i)) return !0 } return !1 }) : this.options.data, "function" == typeof this.searchCallback && (this.data = t.grep(this.options.data, this.searchCallback)) } }, a.prototype.initPagination = function () { if (this.$pagination = this.$container.find(".fixed-table-pagination"), this.options.pagination) { var i, s, o, n, a, r, h, l, c, d = this, p = [], u = this.searchText ? this.data : this.options.data; "server" !== this.options.sidePagination && (this.options.totalRows = u.length), this.totalPages = 0, this.options.totalRows && (this.totalPages = 1 + ~~((this.options.totalRows - 1) / this.options.pageSize)), this.totalPages > 0 && this.options.pageNumber > this.totalPages && (this.options.pageNumber = this.totalPages), this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1, this.pageTo = this.options.pageNumber * this.options.pageSize, this.pageTo > this.options.totalRows && (this.pageTo = this.options.totalRows), p.push('<div class="pull-left pagination-detail">', '<span class="pagination-info">', this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows), "</span>"), p.push('<span class="page-list">'); var f = ['<span class="btn-group dropup">', '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">', '<span class="page-size">', this.options.pageSize, "</span>", ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'], g = this.options.pageList; if ("string" == typeof this.options.pageList) { var b = this.options.pageList.slice(1, -1).replace(/ /g, "").split(","); g = [], t.each(b, function (t, e) { g.push(+e) }) } for (t.each(g, function (t, i) { var s = i === d.options.pageSize ? ' class="active"' : ""; f.push(e('<li%s><a href="javascript:void(0)">%s</a></li>', s, i)) }), f.push("</ul></span>"), p.push(this.options.formatRecordsPerPage(f.join(""))), p.push("</span>"), p.push("</div>", '<div class="pull-right pagination">', '<ul class="pagination">', '<li class="page-first"><a href="javascript:void(0)">&lt;&lt;</a></li>', '<li class="page-pre"><a href="javascript:void(0)">&lt;</a></li>'), this.totalPages < 5 ? (s = 1, o = this.totalPages) : (o = (s = this.options.pageNumber - 2) + 4, s < 1 && (s = 1, o = 5), o > this.totalPages && (s = (o = this.totalPages) - 4)), i = s; i <= o; i++) p.push('<li class="page-number' + (i === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', i, "</a>", "</li>"); p.push('<li class="page-next"><a href="javascript:void(0)">&gt;</a></li>', '<li class="page-last"><a href="javascript:void(0)">&gt;&gt;</a></li>', "</ul>", "</div>"), this.$pagination.html(p.join("")), n = this.$pagination.find(".page-list a"), a = this.$pagination.find(".page-first"), r = this.$pagination.find(".page-pre"), h = this.$pagination.find(".page-next"), l = this.$pagination.find(".page-last"), c = this.$pagination.find(".page-number"), this.options.pageNumber <= 1 && (a.addClass("disabled"), r.addClass("disabled")), this.options.pageNumber >= this.totalPages && (h.addClass("disabled"), l.addClass("disabled")), n.off("click").on("click", t.proxy(this.onPageListChange, this)), a.off("click").on("click", t.proxy(this.onPageFirst, this)), r.off("click").on("click", t.proxy(this.onPagePre, this)), h.off("click").on("click", t.proxy(this.onPageNext, this)), l.off("click").on("click", t.proxy(this.onPageLast, this)), c.off("click").on("click", t.proxy(this.onPageNumber, this)) } }, a.prototype.updatePagination = function () { this.options.maintainSelected || this.resetRows(), this.initPagination(), "server" === this.options.sidePagination ? this.initServer() : this.initBody() }, a.prototype.onPageListChange = function (e) { var i = t(e.currentTarget); i.parent().addClass("active").siblings().removeClass("active"), this.options.pageSize = +i.text(), this.$toolbar.find(".page-size").text(this.options.pageSize), this.updatePagination() }, a.prototype.onPageFirst = function () { this.options.pageNumber = 1, this.updatePagination() }, a.prototype.onPagePre = function () { this.options.pageNumber--, this.updatePagination() }, a.prototype.onPageNext = function () { this.options.pageNumber++, this.updatePagination() }, a.prototype.onPageLast = function () { this.options.pageNumber = this.totalPages, this.updatePagination() }, a.prototype.onPageNumber = function (e) { this.options.pageNumber !== +t(e.currentTarget).text() && (this.options.pageNumber = +t(e.currentTarget).text(), this.updatePagination()) }, a.prototype.initBody = function (s) { var o = this, a = [], r = this.getData(); this.$body = this.$el.find("tbody"), this.$body.length || (this.$body = t("<tbody></tbody>").appendTo(this.$el)), "server" === this.options.sidePagination && (r = this.data), this.options.pagination && "server" !== this.options.sidePagination || (this.pageFrom = 1, this.pageTo = r.length); for (var h = this.pageFrom - 1; h < this.pageTo; h++) { var l = r[h], c = {}, d = []; if ((c = n(this.options, this.options.rowStyle, [l, h], c)) && c.css) for (var p in c.css) d.push(p + ": " + c.css[p]); a.push("<tr", e(' class="%s"', c.classes), e(' data-index="%s"', h), ">"), this.options.cardView && a.push(e('<td colspan="%s">', this.header.fields.length)), t.each(this.header.fields, function (t, s) { var r = "", p = l[s], u = "", f = {}, g = o.header.classes[t]; if (c = e('style="%s"', d.concat(o.header.styles[t]).join("; ")), p = n(o.header, o.header.formatters[t], [p, l, h], p), (f = n(o.header, o.header.cellStyles[t], [p, l, h], f)).classes && (g = e(' class="%s"', f.classes)), f.css) { d = []; for (var b in f.css) d.push(b + ": " + f.css[b]); c = e('style="%s"', d.concat(o.header.styles[t]).join("; ")) } if (o.options.columns[t].checkbox || o.options.columns[t].radio) { if (o.options.cardView) return !0; u = o.options.columns[t].checkbox ? "checkbox" : u, u = o.options.columns[t].radio ? "radio" : u, r = ['<td class="bs-checkbox">', "<input" + e(' data-index="%s"', h) + e(' name="%s"', o.options.selectItemName) + e(' type="%s"', u) + e(' value="%s"', l[o.options.idField]) + e(' checked="%s"', 1 == +p || p && p.checked ? "checked" : void 0) + e(' disabled="%s"', !o.options.columns[t].checkboxEnabled || p && p.disabled ? "disabled" : void 0) + " />", "</td>"].join("") } else p = void 0 === p ? o.options.undefinedText : p, r = o.options.cardView ? ['<div class="card-view">', o.options.showHeader ? e('<span class="title" %s>%s</span>', c, i(o.options.columns, "field", "title", s)) : "", e('<span class="value">%s</span>', p), "</div>"].join("") : [e("<td%s %s>", g, c), p, "</td>"].join(""); a.push(r) }), this.options.cardView && a.push("</td>"), a.push("</tr>") } a.length || a.push('<tr class="no-records-found">', e('<td colspan="%s">%s</td>', this.header.fields.length, this.options.formatNoMatches()), "</tr>"), this.$body.html(a.join("")), s || this.$container.find(".fixed-table-body").scrollTop(0), this.$body.find("> tr > td").off("click").on("click", function () { var i = t(this).parent(); o.trigger("click-row", o.data[i.data("index")], i), o.options.clickToSelect && o.header.clickToSelects[i.children().index(t(this))] && i.find(e('[name="%s"]', o.options.selectItemName)).trigger("click") }), this.$body.find("tr").off("dblclick").on("dblclick", function () { o.trigger("dbl-click-row", o.data[t(this).data("index")], t(this)) }), this.$selectItem = this.$body.find(e('[name="%s"]', this.options.selectItemName)), this.$selectItem.off("click").on("click", function (e) { e.stopImmediatePropagation(), t(this).is(":radio") && t(this).prop("checked", !0); var i = o.$selectItem.filter(":enabled").length === o.$selectItem.filter(":enabled").filter(":checked").length, s = t(this).prop("checked"), n = o.data[t(this).data("index")]; o.$selectAll.add(o.$selectAll_).prop("checked", i), n[o.header.stateField] = s, o.trigger(s ? "check" : "uncheck", n), o.options.singleSelect && (o.$selectItem.not(this).each(function () { o.data[t(this).data("index")][o.header.stateField] = !1 }), o.$selectItem.filter(":checked").not(this).prop("checked", !1)), o.updateSelected() }), t.each(this.header.events, function (e, i) { if (i) { "string" == typeof i && (i = n(null, i)); for (var s in i) o.$body.find("tr").each(function () { var n = t(this), a = n.find("td").eq(e), r = s.indexOf(" "), h = s.substring(0, r), l = s.substring(r + 1), c = i[s]; a.find(l).off(h).on(h, function (t) { var i = n.data("index"), s = o.data[i], a = s[o.header.fields[e]]; c(t, a, s, i) }) }) } }), this.updateSelected(), this.resetView() }, a.prototype.initServer = function (e) { var i = this, s = {}, o = { pageSize: this.options.pageSize, pageNumber: this.options.pageNumber, searchText: this.searchText, sortName: this.options.sortName, sortOrder: this.options.sortOrder }; this.options.url && ("limit" === this.options.queryParamsType && (o = { limit: o.pageSize, offset: o.pageSize * (o.pageNumber - 1), search: o.searchText, sort: o.sortName, order: o.sortOrder }), !1 !== (s = n(this.options, this.options.queryParams, [o], s)) && (e || this.$loading.show(), t.ajax({ type: this.options.method, url: this.options.url, data: s, cache: this.options.cache, contentType: this.options.contentType, dataType: "json", success: function (t) { var e = t = n(i.options, i.options.responseHandler, [t], t); "server" === i.options.sidePagination && (i.options.totalRows = t.total, e = t.rows), i.load(e), i.trigger("load-success", e) }, error: function (t) { i.trigger("load-error", t.status) }, complete: function () { e || i.$loading.hide() } }))) }, a.prototype.getCaretHtml = function () { return ['<span class="order' + ("desc" === this.options.sortOrder ? "" : " dropup") + '">', '<span class="caret" style="margin: 10px 5px;"></span>', "</span>"].join("") }, a.prototype.updateSelected = function () { this.$selectItem.each(function () { t(this).parents("tr")[t(this).prop("checked") ? "addClass" : "removeClass"]("selected") }) }, a.prototype.updateRows = function (e) { var i = this; this.$selectItem.each(function () { i.data[t(this).data("index")][i.header.stateField] = e }) }, a.prototype.resetRows = function () { var e = this; t.each(this.data, function (t, i) { e.$selectAll.prop("checked", !1), e.$selectItem.prop("checked", !1), i[e.header.stateField] = !1 }) }, a.prototype.trigger = function (e) { var i = Array.prototype.slice.call(arguments, 1); e += ".bs.table", this.options[a.EVENTS[e]].apply(this.options, i), this.$el.trigger(t.Event(e), i), this.options.onAll(e, i), this.$el.trigger(t.Event("all.bs.table"), [e, i]) }, a.prototype.resetHeader = function () { var e = this, i = this.$container.find(".fixed-table-header"), s = this.$container.find(".fixed-table-body"), n = this.$el.width() > s.width() ? o() : 0; if (this.$el.is(":hidden")) return clearTimeout(this.timeoutId_), void (this.timeoutId_ = setTimeout(t.proxy(this.resetHeader, this), 100)); this.$header_ = this.$header.clone(!0, !0), this.$selectAll_ = this.$header_.find('[name="btSelectAll"]'), setTimeout(function () { i.css({ height: "37px", "border-bottom": "1px solid #dddddd", "margin-right": n }).find("table").css("width", e.$el.css("width")).html("").attr("class", e.$el.attr("class")).append(e.$header_), e.$header.find("th").each(function (i) { e.$header_.find("th").eq(i).data(t(this).data()) }), e.$body.find("tr:first-child:not(.no-records-found) > *").each(function (i) { e.$header_.find("div.fht-cell").eq(i).width(t(this).innerWidth()) }), e.$el.css("margin-top", -e.$header.height()), s.off("scroll").on("scroll", function () { i.scrollLeft(t(this).scrollLeft()) }) }) }, a.prototype.toggleColumn = function (t, i, s) { if (-1 !== t && (this.options.columns[t].visible = i, this.initHeader(), this.initSearch(), this.initPagination(), this.initBody(), this.options.showColumns)) { var o = this.$toolbar.find(".keep-open input").prop("disabled", !1); s && o.filter(e('[value="%s"]', t)).prop("checked", i), o.filter(":checked").length <= this.options.minimumCountColumns && o.filter(":checked").prop("disabled", !0) } }, a.prototype.resetView = function (t) { var e = this; this.header; if (t && t.height && (this.options.height = t.height), this.$selectAll.prop("checked", this.$selectItem.length > 0 && this.$selectItem.length === this.$selectItem.filter(":checked").length), this.options.height) { var i = +this.$toolbar.children().outerHeight(!0), s = +this.$pagination.children().outerHeight(!0), o = this.options.height - i - s; this.$container.find(".fixed-table-container").css("height", o + "px") } if (this.options.cardView) return e.$el.css("margin-top", "0"), void e.$container.find(".fixed-table-container").css("padding-bottom", "0"); this.options.showHeader && this.options.height && this.resetHeader(), this.options.height && this.options.showHeader && this.$container.find(".fixed-table-container").css("padding-bottom", "37px") }, a.prototype.getData = function () { return this.searchText || this.searchCallback ? this.data : this.options.data }, a.prototype.getColumns = function () { return this.options.columns }, a.prototype.load = function (t) { this.initData(t), this.initSearch(), this.initPagination(), this.initBody() }, a.prototype.append = function (t) { this.initData(t, !0), this.initSearch(), this.initPagination(), this.initBody(!0) }, a.prototype.remove = function (e) { var i, s, o = this.options.data.length; if (e.hasOwnProperty("field") && e.hasOwnProperty("values")) { for (i = o - 1; i >= 0; i--) { if (!(s = this.options.data[i]).hasOwnProperty(e.field)) return; -1 !== t.inArray(s[e.field], e.values) && this.options.data.splice(i, 1) } o !== this.options.data.length && (this.initSearch(), this.initPagination(), this.initBody(!0)) } }, a.prototype.updateRow = function (e) { e.hasOwnProperty("index") && e.hasOwnProperty("row") && (t.extend(this.data[e.index], e.row), this.initBody()) }, a.prototype.mergeCells = function (e) { var i, s, o = e.index, n = t.inArray(e.field, this.header.fields), a = e.rowspan || 1, r = e.colspan || 1, h = this.$body.find("tr"), l = h.eq(o).find("td").eq(n); if (!(o < 0 || n < 0 || o >= this.data.length)) { for (i = o; i < o + a; i++) for (s = n; s < n + r; s++) h.eq(i).find("td").eq(s).hide(); l.attr("rowspan", a).attr("colspan", r).show(10, t.proxy(this.resetView, this)) } }, a.prototype.getSelections = function () { var e = this; return t.grep(this.data, function (t) { return t[e.header.stateField] }) }, a.prototype.checkAll = function () { this.$selectAll.add(this.$selectAll_).prop("checked", !0), this.$selectItem.filter(":enabled").prop("checked", !0), this.updateRows(!0), this.updateSelected(), this.trigger("check-all") }, a.prototype.uncheckAll = function () { this.$selectAll.add(this.$selectAll_).prop("checked", !1), this.$selectItem.filter(":enabled").prop("checked", !1), this.updateRows(!1), this.updateSelected(), this.trigger("uncheck-all") }, a.prototype.destroy = function () { this.$el.insertBefore(this.$container), t(this.options.toolbar).insertBefore(this.$el), this.$container.next().remove(), this.$container.remove(), this.$el.html(this.$el_.html()).attr("class", this.$el_.attr("class") || "") }, a.prototype.showLoading = function () { this.$loading.show() }, a.prototype.hideLoading = function () { this.$loading.hide() }, a.prototype.refresh = function (t) { t && t.url && (this.options.url = t.url), this.initServer(t && t.silent) }, a.prototype.showColumn = function (t) { this.toggleColumn(s(this.options.columns, t), !0, !0) }, a.prototype.hideColumn = function (t) { this.toggleColumn(s(this.options.columns, t), !1, !0) }, a.prototype.registerSearchCallback = function (t) { this.searchCallback = t }, a.prototype.updateSearch = function () { this.options.pageNumber = 1, this.initSearch(), this.updatePagination() }, a.prototype.getServerUrl = function () { return !!this.options.url && this.options.url }, t.fn.bootstrapTable = function (e, i) { var s, o = ["getSelections", "getData", "getColumns", "getServerUrl", "load", "append", "remove", "updateRow", "mergeCells", "checkAll", "uncheckAll", "refresh", "resetView", "destroy", "showLoading", "hideLoading", "showColumn", "hideColumn", "registerSearchCallback", "updateSearch"]; return this.each(function () { var n = t(this), r = n.data("bootstrap.table"), h = t.extend({}, a.DEFAULTS, n.data(), "object" == typeof e && e); if ("string" == typeof e) { if (t.inArray(e, o) < 0) throw "Unknown method: " + e; if (!r) return; s = r[e](i), "destroy" === e && n.removeData("bootstrap.table") } r || n.data("bootstrap.table", r = new a(this, h)) }), void 0 === s ? this : s }, t.fn.bootstrapTable.Constructor = a, t.fn.bootstrapTable.defaults = a.DEFAULTS, t.fn.bootstrapTable.columnDefaults = a.COLUMN_DEFAULTS, t(function () { t('[data-toggle="table"]').bootstrapTable() }) }(jQuery);