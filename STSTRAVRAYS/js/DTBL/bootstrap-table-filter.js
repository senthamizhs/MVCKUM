!function (t) { "use strict"; var e = function (e) { var i = e; return "object" == typeof e && (i = e.label, "object" == typeof e.i18n && t.each(e.i18n, function (t, e) { i = i.replace("{%" + t + "}", e) })), i }, i = function (t, e) { return "object" == typeof e ? e.id : t }, n = function (e) { var i, n = !1, l = {}, o = 0, r = e.find(".filter-enabled"); return t(":input", e).each(function () { var e = t(this); e.is(r) || ((i = e.attr("data-name")) && (l[i] = e.val()), n = e.val(), o++) }), t.isEmptyObject(l) ? n : l }, l = function (e, i) { this.options = i, this.$el = t(e), this.$el_ = this.$el.clone(), this.timeoutId_ = 0, this.filters = {}, this.init() }; l.DEFAULTS = { filters: [], connectTo: !1, filterIcon: '<span class="glyphicon glyphicon-filter"></span>', refreshIcon: '<span class="glyphicon glyphicon-ok"></span>', clearAllIcon: '<span class="glyphicon glyphicon-remove"></span>', formatRemoveFiltersMessage: function () { return "Remove all filters" }, formatSearchMessage: function () { return "Search" }, onAll: function (t, e) { return !1 }, onFilterChanged: function (t) { return !1 }, onResetView: function () { return !1 }, onAddFilter: function (t) { return !1 }, onRemoveFilter: function (t) { return !1 }, onEnableFilter: function (t) { return !1 }, onDisableFilter: function (t) { return !1 }, onSelectFilterOption: function (t, e, i) { return !1 }, onUnselectFilterOption: function (t, e) { return !1 }, onDataChanged: function (t) { return !1 }, onSubmit: function (t) { return !1 } }, l.EVENTS = { "all.bs.table.filter": "onAll", "reset.bs.table.filter": "onResetView", "add-filter.bs.table.filter": "onAddFilter", "remove-filter.bs.table.filter": "onRemoveFilter", "enable-filter.bs.table.filter": "onEnableFilter", "disable-filter.bs.table.filter": "onDisableFilter", "select-filter-option.bs.table.filter": "onSelectFilterOption", "unselect-filter-option.bs.table.filter": "onUnselectFilterOption", "data-changed.bs.table.filter": "onDataChanged", "submit.bs.table.filter": "onSubmit" }, l.FILTER_SOURCES = { range: { search: !1, rows: [{ id: "lte", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Less than" } }, { id: "gte", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "More than" } }, { id: "eq", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Equals" } }], check: function (t, e) { return !(void 0 !== t.lte && parseInt(e) > parseInt(t.lte)) && (!(void 0 !== t.gte && parseInt(e) < parseInt(t.gte)) && (void 0 === t.eq || parseInt(e) == parseInt(t.eq))) } }, search: { search: !1, rows: [{ id: "eq", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Equals" } }, { id: "neq", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Not equals" } }, { id: "cnt", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Contains" } }, { id: "ncnt", label: '{%msg} <input class="form-control" type="text">', i18n: { msg: "Doesn't contain" } }, { id: "ept", label: "{%msg}", i18n: { msg: "Is empty" } }, { id: "nept", label: "{%msg}", i18n: { msg: "Is not empty" } }], check: function (t, e) { return (void 0 === t.eq || e == t.eq) && ((void 0 === t.neq || e != t.neq) && (!(void 0 !== t.cnt && e.indexOf(t.cnt) < 0) && (!(void 0 !== t.ncnt && e.indexOf(t.ncnt) >= 0) && (!(void 0 !== t._values && t._values.indexOf("ept") >= 0 && e.trim()) && !(void 0 !== t._values && t._values.indexOf("nept") >= 0 && !e.trim()))))) } }, ajaxSelect: { search: !0, rows: [], rowsCallback: function (e, i) { var n = this; clearTimeout(this.timeoutId_), this.timeoutId_ = setTimeout(function () { t.ajax(e.source, { dataType: "json", data: { q: i } }).done(function (t) { n.clearFilterOptions(e.field), n.fillFilterOptions(e.field, t) }) }, 300) } }, select: { search: !0, rows: [], rowsCallback: function (t, i) { var n = t.values; i.length && (n = n.filter(function (t) { return e(t).indexOf(i) > -1 })), this.clearFilterOptions(t.field), this.fillFilterOptions(t.field, n.slice(0, 20)) } } }, l.EXTERNALS = [], l.prototype.init = function () { this.initContainer(), this.initMainButton(), this.initFilters(), this.initRefreshButton(), this.initFilterSelector(), this.initExternals() }, l.prototype.initContainer = function () { var e = this; this.$toolbar = t(['<div class="btn-toolbar">', '<div class="btn-group btn-group-filter-main">', '<button type="button" class="btn btn-default dropdown-toggle btn-filter" data-toggle="dropdown">', this.options.filterIcon, "</button>", '<ul class="dropdown-menu" role="menu">', "</ul>", "</div>", '<div class="btn-group btn-group-filters">', "</div>", '<div class="btn-group btn-group-filter-refresh">', '<button type="button" class="btn btn-default btn-primary btn-refresh" data-toggle="dropdown">', this.options.refreshIcon, "</button>", "</div>", "</div>"].join("")), this.$toolbar.appendTo(this.$el), this.$filters = this.$toolbar.find(".btn-group-filters"), this.$toolbar.delegate(".btn-group-filters li", "click", function (t) { t.stopImmediatePropagation() }), this.$toolbar.delegate(".btn-group-filters li .filter-enabled", "click", function (i) { var l = t(this), o = l.closest("[data-filter-field]").attr("data-filter-field"), r = l.closest("[data-val]"), s = r.attr("data-val"); if (l.prop("checked")) { var a = n(r); e.selectFilterOption(o, s, a) } else e.unselectFilterOption(o, s); i.stopImmediatePropagation() }), this.$toolbar.delegate(".btn-group-filters li :input:not(.filter-enabled)", "click change", function (i) { var l = t(this), o = l.closest("[data-filter-field]").attr("data-filter-field"), r = l.closest("[data-val]"), s = r.attr("data-val"), a = r.find(".filter-enabled"); if (l.val()) { var c = n(r); e.selectFilterOption(o, s, c), a.prop("checked", !0) } else e.unselectFilterOption(o, s), a.prop("checked", !1); i.stopImmediatePropagation() }), this.$toolbar.delegate(".search-values", "keyup", function (i) { var n = t(this), l = n.val(), o = n.closest("[data-filter-field]").attr("data-filter-field"), r = e.getFilter(o), s = e.getFilterType(r); s.rowsCallback && s.rowsCallback.call(e, r, l) }) }, l.prototype.initMainButton = function () { this.$button = this.$toolbar.find(".btn-filter"), this.$buttonList = this.$button.parent().find(".dropdown-menu"), this.$button.dropdown() }, l.prototype.initRefreshButton = function () { var t = this; this.$refreshButton = this.$toolbar.find(".btn-refresh"), this.$refreshButton.click(function (e) { t.trigger("submit", t.getData()), t.toggleRefreshButton(!1) }), this.toggleRefreshButton(!1) }, l.prototype.initFilters = function () { var e = this; this.$buttonList.append('<li class="remove-filters"><a href="javascript:void(0)">' + this.options.clearAllIcon + " " + this.options.formatRemoveFiltersMessage() + "</a></li>"), this.$buttonList.append('<li class="divider"></li>'), t.each(this.options.filters, function (t, i) { e.addFilter(i) }), this.$toolbar.delegate(".remove-filters *", "click", function () { e.disableFilters() }) }, l.prototype.initFilterSelector = function () { var e = this, i = function (t) { var i = t.closest("[data-filter-field]").attr("data-filter-field"); t.prop("checked") ? e.enableFilter(i) : e.disableFilter(i) }; this.$buttonList.delegate("li :input[type=checkbox]", "click", function (e) { i(t(this)), e.stopImmediatePropagation() }), this.$buttonList.delegate("li, li a", "click", function (e) { var n = t(":input[type=checkbox]", this); n.length && (n.prop("checked", !n.is(":checked")), i(n), e.stopImmediatePropagation()); var l = t(":input[type=text]", this); l.length && l.focus() }) }, l.prototype.initExternals = function () { var e = this; t.each(l.EXTERNALS, function (t, i) { i.call(e) }) }, l.prototype.getFilter = function (t) { if (void 0 === this.filters[t]) throw "Invalid filter " + t; return this.filters[t] }, l.prototype.getFilterType = function (e, i) { if (e && (i = ("object" == typeof e ? e : this.getFilter(e)).type), void 0 === l.FILTER_SOURCES[i]) throw "Invalid filter type " + i; var n = l.FILTER_SOURCES[i]; return void 0 !== n.extend && (n = t.extend({}, n, this.getFilterType(null, n.extend))), n }, l.prototype.checkFilterTypeValue = function (e, i, n) { return "function" == typeof e.check ? e.check(i, n) : void 0 === i._values || t.inArray("" + n, i._values) >= 0 }, l.prototype.clearFilterOptions = function (t) { this.getFilter(t).$dropdownList.find("li:not(.static)").remove(), this.toggleRefreshButton(!0) }, l.prototype.fillFilterOptions = function (n, l, o) { var r = this, s = this.getFilter(n); o = o || ""; var a, c; t.each(l, function (l, p) { a = i(l, p), c = r.isSelected(n, a), s.$dropdownList.append(t('<li data-val="' + a + '" class="' + o + '"><a href="javascript:void(0)"><input type="checkbox" class="filter-enabled"' + (c ? " checked" : "") + "> " + e(p) + "</a></li>")) }) }, l.prototype.trigger = function (e) { var i = Array.prototype.slice.call(arguments, 1); if (e += ".bs.table.filter", void 0 === l.EVENTS[e]) throw "Unknown event " + e; this.options[l.EVENTS[e]].apply(this.options, i), this.$el.trigger(t.Event(e), i), this.options.onAll(e, i), this.$el.trigger(t.Event("all.bs.table.filter"), [e, i]) }, l.prototype.resetView = function () { this.$el.html(), this.init(), this.trigger("reset") }, l.prototype.addFilter = function (t) { this.filters[t.field] = t, this.$buttonList.append('<li data-filter-field="' + t.field + '"><a href="javascript:void(0)"><input type="checkbox"> ' + t.label + "</a></li>"), this.trigger("add-filter", t), void 0 !== t.enabled && t.enabled && this.enableFilter(t.field) }, l.prototype.removeFilter = function (t) { this.disableFilter(t), this.$buttonList.find("[data-filter-field=" + t + "]").remove(), this.trigger("remove-filter", t) }, l.prototype.enableFilter = function (e) { var i = this.getFilter(e), n = t(['<div class="btn-group" data-filter-field="' + e + '">', '<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">', i.label, ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">', "</ul>", "</div>"].join("")); n.appendTo(this.$filters), i.$dropdown = n, i.$dropdownList = n.find(".dropdown-menu"), i.enabled = !0, this.$buttonList.find("[data-filter-field=" + e + "] input[type=checkbox]").prop("checked", !0); var l = this.getFilterType(i); l.search && (i.$dropdownList.append(t('<li class="static"><span><input type="text" class="form-control search-values" placeholder="' + this.options.formatSearchMessage() + '"></span></li>')), i.$dropdownList.append(t('<li class="static divider"></li>'))), l.rows && this.fillFilterOptions(e, l.rows, "static"), l.rowsCallback && l.rowsCallback.call(this, i, ""), this.toggleRefreshButton(!0), this.trigger("enable-filter", i) }, l.prototype.disableFilters = function () { var e = this; t.each(this.filters, function (t, i) { e.disableFilter(i.field) }) }, l.prototype.disableFilter = function (t) { var e = this.getFilter(t); this.$buttonList.find("[data-filter-field=" + t + "] input[type=checkbox]").prop("checked", !1), e.enabled = !1, e.$dropdown && (e.$dropdown.remove(), delete e.$dropdown, this.trigger("disable-filter", e)), this.toggleRefreshButton(!0) }, l.prototype.selectFilterOption = function (t, e, i) { var n = this.getFilter(t); void 0 === n.selectedOptions && (n.selectedOptions = {}), i ? n.selectedOptions[e] = i : (void 0 === n.selectedOptions._values && (n.selectedOptions._values = []), n.selectedOptions._values.push(e)), this.trigger("select-filter-option", t, e, i), this.toggleRefreshButton(!0) }, l.prototype.unselectFilterOption = function (e, i) { var n = this.getFilter(e); void 0 !== n.selectedOptions && void 0 !== n.selectedOptions[i] && delete n.selectedOptions[i], void 0 !== n.selectedOptions && void 0 !== n.selectedOptions._values && (n.selectedOptions._values = n.selectedOptions._values.filter(function (t) { return t != i }), 0 == n.selectedOptions._values.length && delete n.selectedOptions._values, t.isEmptyObject(n.selectedOptions) && delete n.selectedOptions), this.trigger("unselect-filter-option", e, i), this.toggleRefreshButton(!0) }, l.prototype.setupFilter = function (e, i) { var n = this; this.enableFilter(e), t.each(i, function (i, l) { "_values" === i ? t.each(l, function (i, l) { n.selectFilterOption(e, l, !1), t('div[data-filter-field="' + e + '"] [data-val="' + l + '"] input.filter-enabled').prop("checked", !0) }) : (n.selectFilterOption(e, i, l), t('div[data-filter-field="' + e + '"] [data-val="' + i + '"] input.filter-enabled').prop("checked", !0), t('div[data-filter-field="' + e + '"] [data-val="' + i + '"] input[type="text"]:not([data-name])').val(l)) }) }, l.prototype.toggleRefreshButton = function (t) { this.$refreshButton.toggle(t) }, l.prototype.isSelected = function (t, e, i) { var n = this.getFilter(t); if (void 0 !== n.selectedOptions) { if (void 0 !== n.selectedOptions[e] && (i ? n.selectedOptions[e] == i : n.selectedOptions[e])) return !0; if (void 0 !== n.selectedOptions._values && n.selectedOptions._values.indexOf(e.toString()) > -1) return !0 } return !1 }, l.prototype.getData = function () { var e = this, i = {}; return t.each(e.filters, function (t, e) { e.enabled && void 0 !== e.selectedOptions && (i[t] = e.selectedOptions) }), i }, t.fn.bootstrapTableFilter = function (e, i, n) { l.externals = this.externals; var o, r = ["addFilter", "removeFilter", "enableFilter", "disableFilter", "disableFilters", "selectFilterOption", "unselectFilterOption", "setupFilter", "toggleRefreshButton", "getData", "isSelected", "resetView"]; return this.each(function () { var s = t(this), a = s.data("bootstrap.tableFilter"), c = t.extend({}, l.DEFAULTS, s.data(), "object" == typeof e && e); if ("string" == typeof e) { if (t.inArray(e, r) < 0) throw "Unknown method: " + e; if (!a) return; o = a[e](i, n), "destroy" === e && s.removeData("bootstrap.tableFilter") } a || s.data("bootstrap.tableFilter", a = new l(this, c)) }), void 0 === o ? this : o }, t.fn.bootstrapTableFilter.Constructor = l, t.fn.bootstrapTableFilter.defaults = l.DEFAULTS, t.fn.bootstrapTableFilter.columnDefaults = l.COLUMN_DEFAULTS, t.fn.bootstrapTableFilter.externals = l.EXTERNALS, t.fn.bootstrapTableFilter.filterSources = l.FILTER_SOURCES, t(function () { t('[data-toggle="tableFilter"]').bootstrapTableFilter() }) }(jQuery);