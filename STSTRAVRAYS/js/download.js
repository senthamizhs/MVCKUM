!function (e, t) { "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? module.exports = t() : e.download = t() }(this, function () { return function e(t, n, o) { function a(e, t) { if ("download" in b) return b.href = e, b.setAttribute("download", h), b.className = "download-js-link", b.innerHTML = "downloading...", p.body.appendChild(b), setTimeout(function () { b.click(), p.body.removeChild(b), !0 === t && setTimeout(function () { l.URL.revokeObjectURL(b.href) }, 250) }, 66), !0; if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) return e = e.replace(/^data:([\w\/\-\+]+)/, s), window.open(e) || confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.") && (location.href = e), !0; var n = p.createElement("iframe"); p.body.appendChild(n), t || (e = "data:" + e.replace(/^data:([\w\/\-\+]+)/, s)), n.src = e, setTimeout(function () { p.body.removeChild(n) }, 333) } var r, i, d, l = window, s = "application/octet-stream", c = o || s, f = t, u = !n && !o && f, p = document, b = p.createElement("a"), m = function (e) { return String(e) }, w = l.Blob || l.MozBlob || l.WebKitBlob || m, h = n || "download"; if (w = w.call ? w.bind(l) : Blob, "true" === String(this) && (c = (f = [f, c])[0], f = f[1]), u && u.length < 2048 && (h = u.split("/").pop().split("?")[0], b.href = u, -1 !== b.href.indexOf(u))) return (d = new XMLHttpRequest).open("GET", u, !0), d.responseType = "blob", d.onload = function (t) { e(t.target.response, h, s) }, d.send(), d; if (/^data\:[\w+\-]+\/[\w+\-]+[,;]/.test(f)) return navigator.msSaveBlob ? navigator.msSaveBlob(function (e) { var t = e.split(/[:;,]/), n = t[1], o = ("base64" == t[2] ? atob : decodeURIComponent)(t.pop()), a = o.length, r = 0, i = new Uint8Array(a); for (r; r < a; ++r) i[r] = o.charCodeAt(r); return new w([i], { type: n }) }(f), h) : a(f); if (r = f instanceof w ? f : new w([f], { type: c }), navigator.msSaveBlob) return navigator.msSaveBlob(r, h); if (l.URL) a(l.URL.createObjectURL(r), !0); else { if ("string" == typeof r || r.constructor === m) try { return a("data:" + c + ";base64," + l.btoa(r)) } catch (e) { return a("data:" + c + "," + encodeURIComponent(r)) } (i = new FileReader).onload = function (e) { a(this.result) }, i.readAsDataURL(r) } return !0 } });