!function (e) { e.fn.progressbarManager = function (t) { e.fn.progressbarManager.GUID || (e.fn.progressbarManager.GUID = 1); var r = e.extend({ debug: !1, currentValue: 0, totalValue: 100, style: "primary", animate: !1, stripe: !1, id: "pbm-bootsrap-progress-" + e.fn.progressbarManager.GUID, barIdPrefix: "pbm-progress-bar-", total: t.totalValue, addDefaultBar: !0, showValueHandler: function (e) { var t = e.elem.attr("aria-valuenow") + "%"; e.elem.text(t) }, hideValueHandler: function (e) { e.elem.text("") }, onComplete: function () { }, onBarComplete: function () { } }, t), a = e(this), n = function (t) { return e("<div></div>", { id: t, class: "progress" }) }, s = function (t, r, a, n, s, i, l) { var o = e("<div></div>"), u = "progress-bar progress-bar-" + a; return i && (u += " active "), l && (u += " progress-bar-striped"), o.attr("id", t).attr("role", "progress-bar"), o.attr("aria-valuenow", r).attr("aria-valuemin", n), o.attr("aria-valuemax", s).css({ width: r + "%", "min-width": "2em" }), o.addClass(u), o.append('<span class="sr-only sr-indicator">' + r + "% Complete</span></div>"), o }, i = function (e, t) { return 100 - (t - e) / t * 100 }, l = function (e) { r.debug && console.log("Progress Bar Manager Debug => " + e) }; return e.fn.progressbarManager.GUID++, new function (t) { var o = this, u = 1, d = {}, h = 0, c = !1, p = n(t); a.append(p); var m = "", f = function () { h = 0; for (var e in d) h += d[e].totalValuePercentRounded }; this.setValue = function (e, t) { var a = this.getBar(t); if (e = parseInt(e), a) { var n = i(e, r.total), s = Math.round(10 * n) / 10; e > a.totalValue && (l("New Bar value is greater that the totalValue. Setting the bar percentage to full"), n = 100, s = 100, e = a.totalValue), a.elem.attr("aria-valuenow", s), a.currentPercent = n, a.currentPercentRounded = s, a.currentValue = e, a.elem.css("width", s + "%"), a.showText && this.showValue(t), this.isComplete(t) && r.onBarComplete.call(a), f(), this.isComplete() && r.onComplete() } return this }, this.animate = function (e) { var t = this.getBar(e); return t && t.elem.addClass("active"), this }, this.animateRemove = function (e) { var t = this.getBar(e); return t && t.elem.removeClass("active"), this }, this.stripe = function (e) { var t = this.getBar(e); return t && t.elem.addClass("progress-bar-striped"), this }, this.removeStripe = function (e) { var t = this.getBar(e); return t && t.elem.removeClass("progress-bar-striped"), this }, this.style = function (e, t) { var r = this.getBar(t); return r && (r.elem.removeClass("progress-bar-" + r.style), r.style = e, r.elem.addClass("progress-bar-" + e)), this }, this.showValue = function (e) { var t = this.getBar(e); if (!0 === e) for (var r in d) r.showText = !0, r.showValueHandler(t); return t && (t.showText = !0, t.showValueHandler(t)), this }, this.hideValue = function (e) { var t = this.getBar(e); if (!0 === e) for (var r in d) r.showText = !1, r.hideValueHandler(t); return t && (t.showText = !1, t.hideValueHandler(t)), this }, this.isComplete = function (e) { var t = this.getBar(e); return t && t.currentValue >= t.totalValue }, this.complete = function (e) { var t = this.getBar(e); return t && this.setValue(t.totalValue, e), this }, this.completeAll = function () { var e; for (e in d) o.complete(e) }, this.addBar = function (t) { if (c) return l("container can not take new bar element, space full!"), !1; var a = e.extend({ initValue: 0, totalValue: 100, style: "primary", animate: !1, stripe: !1, showValueHandler: r.showValueHandler, hideValueHandler: r.hideValueHandler }, t), n = r.barIdPrefix + u, o = parseInt(a.initValue) || 0, m = parseInt(a.totalValue) || 100 - h, v = i(o, r.total), g = Math.round(10 * v) / 10, V = i(m, r.total), w = Math.round(10 * V) / 10, b = 100 - h; v >= b && (v = b, c = !0); var B = s(n, g, a.style, o, m, a.animate, a.stripe); return p.append(B), d[n] = { totalValue: m, currentValue: o, init: o, initPercent: v, totalValuePercent: V, totalValuePercentRounded: w, currentPercent: v, currentPercentRounded: g, style: a.style, elem: B, showText: !0, id: n, showValueHandler: a.showValueHandler, hideValueHandler: a.hideValueHandler }, a.showValueHandler(d[n]), u++, f(), n }, this.removeBar = function (e) { var t = this.getBar(e); t && t.elem.remove() }, this.destroy = function () { p.remove() }, this.getBar = function (e) { var t = e || m; return d[t] ? d[t] : (l("No progress bar element with id: " + t), null) }, r.addDefaultBar && (m = this.addBar(r)) }(r.id) } }(jQuery);