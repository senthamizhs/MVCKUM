//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace STSTRAVRAYS.InplantService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InplantserviceSoap", Namespace="http://tempuri.org/")]
    public partial class Inplantservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Insert_Hotel_Commission_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Hotel_Supplier_Commission_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Bus_Supplier_Commission_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Insurance_Supplier_Commission_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Airline_CommissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTrackDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DashBoradDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBookedTicketDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AgentFindOperationCompleted;
        
        private System.Threading.SendOrPostCallback FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_login_detailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DuplicatebookingOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchActivityBookedHistoryDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchActivityofflinecityOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Client_GST_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintTicket_RiyaOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_AirlineNameFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_BusServiceCharge_WebHomeByteOperationCompleted;
        
        private System.Threading.SendOrPostCallback Modify_BusServiceChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCodeCountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCommonPopupOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Update_Login_StatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback Modify_HotelServiceChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_HotelServiceCharge_WebHomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendmailGmailNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateSeqNoForVisaOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertVisaOfflineOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchPricingcodeForQTKTOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchThaiVisaBookedHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchThaiVisaViewPNROperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertVisaOfflineNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBulkMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Login_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_WebHomeLogin_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback INSERT_LOGIN_HISTORYOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Login_User_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_All_Agent_Branch_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_All_Agent_Branch_DetailsByteOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBrBookedHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Pnr_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_BUS_BookedHistory_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BusPnrdetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCompanySuperuserOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Employee_detailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateTrackID_PgOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Payment_Gateway_TrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_PG_Payment_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_PG_Payment_Details_V3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_Payment_Gateway_TrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Payment_Gateway_TrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_ICICI_Payment_Gateway_TrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCodeDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCodeDetails_v1OperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchPricingCodeDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FETCHAGENTPGDETAILSOperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_Topup_trackIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Ticket_Details_TableOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_SequenceNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Detailed_LogDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_LogDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Detailed_LogDetails_WebOperationCompleted;
        
        private System.Threading.SendOrPostCallback APPSSECCHECKOperationCompleted;
        
        private System.Threading.SendOrPostCallback WEBAPPSSECCHECKOperationCompleted;
        
        private System.Threading.SendOrPostCallback WEBAPPSSESSIONCHECKOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIndeskTerminalIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback newdashboardreportwebOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestbuilddashboardwebOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestdaywisesegwebOperationCompleted;
        
        private System.Threading.SendOrPostCallback newdashboardwebOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestdaywisesegOperationCompleted;
        
        private System.Threading.SendOrPostCallback newdashboardOperationCompleted;
        
        private System.Threading.SendOrPostCallback newdashboardreportOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchBrBookedHistoryB2BOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchSeatTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback SystemdetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchdownloaddetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchfarecalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertvatdetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Best_Buy_ContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted;
        
        private System.Threading.SendOrPostCallback FETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_topup_details_webOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Agent_Credit_Balance_Details_franciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Franchise_master_dashboardOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Franchise_agentbalance_reportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Franchise_agentdetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_vat_registrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateimgwebhomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchOrDeleteImages_WebOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_MarkUP_Details_WebOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Airline_Markup_Details_webOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertPgtrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchhotelcountriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertservicechargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchhotelcitynameOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchOfflineHoteldetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback HotelAmenitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertHtldetRefidOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchHotelfiltercitynameOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchApphtlnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchOtherAgntLgnDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchHtlServcOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchHtlExistpaxdetOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserthtlcancelReqOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchHtlDuplicatepaxdetOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_VendorApps_Login_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Delete_Supplier_CommissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Supplier_Credit_And_Debit_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_HomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Home_MonthlyWise_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Visa_MasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Airline_MarkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Airline_Markup_ResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Visa_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_SSR_Details_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Current_BalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Visa_FeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Supplier_Control_PanelOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Sales_ReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Supplier_Sales_ReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_VisaDetails_With_KnownValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Visa_Supplier_FareOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Visa_AmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Visa_AmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Visa_PlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback Delete_Visa_FeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_Updating_Supplier_BalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback Check_Visa_NumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSuplierbalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Air_Supplier_MarkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Insurance_Supplier_CommissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Bus_Supplier_CommissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Hotel_Supplier_CommissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Flown_UnflownOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Net_SalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Supplier_Main_HomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Fetch_Credential_OfficeIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertVisaCancellationDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatingVisaStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback P_Fetch_Supp_BalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Insurance_Commission_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_Bus_Commission_DetailsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Inplantservice() {
            this.Url = global::STSTRAVRAYS.Properties.Settings.Default.STSTRAVRAYS_InplantService_Inplantservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Insert_Hotel_Commission_DetailsCompletedEventHandler Insert_Hotel_Commission_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_Hotel_Supplier_Commission_DetailsCompletedEventHandler Fetch_Hotel_Supplier_Commission_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_Bus_Supplier_Commission_DetailsCompletedEventHandler Fetch_Bus_Supplier_Commission_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_Insurance_Supplier_Commission_DetailsCompletedEventHandler Fetch_Insurance_Supplier_Commission_DetailsCompleted;
        
        /// <remarks/>
        public event Insert_Airline_CommissionCompletedEventHandler Insert_Airline_CommissionCompleted;
        
        /// <remarks/>
        public event UpdateTrackDetailsCompletedEventHandler UpdateTrackDetailsCompleted;
        
        /// <remarks/>
        public event DashBoradDetailsCompletedEventHandler DashBoradDetailsCompleted;
        
        /// <remarks/>
        public event FetchBookedTicketDetailsCompletedEventHandler FetchBookedTicketDetailsCompleted;
        
        /// <remarks/>
        public event AgentFindCompletedEventHandler AgentFindCompleted;
        
        /// <remarks/>
        public event FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventHandler FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompleted;
        
        /// <remarks/>
        public event Get_login_detailsCompletedEventHandler Get_login_detailsCompleted;
        
        /// <remarks/>
        public event DuplicatebookingCompletedEventHandler DuplicatebookingCompleted;
        
        /// <remarks/>
        public event FetchActivityBookedHistoryDetailsCompletedEventHandler FetchActivityBookedHistoryDetailsCompleted;
        
        /// <remarks/>
        public event FetchActivityofflinecityCompletedEventHandler FetchActivityofflinecityCompleted;
        
        /// <remarks/>
        public event Fetch_Client_GST_DetailsCompletedEventHandler Fetch_Client_GST_DetailsCompleted;
        
        /// <remarks/>
        public event PrintTicket_RiyaCompletedEventHandler PrintTicket_RiyaCompleted;
        
        /// <remarks/>
        public event Fetch_AirlineNameFormatCompletedEventHandler Fetch_AirlineNameFormatCompleted;
        
        /// <remarks/>
        public event Fetch_BusServiceCharge_WebHomeByteCompletedEventHandler Fetch_BusServiceCharge_WebHomeByteCompleted;
        
        /// <remarks/>
        public event Modify_BusServiceChargeCompletedEventHandler Modify_BusServiceChargeCompleted;
        
        /// <remarks/>
        public event FetchCodeCountDetailsCompletedEventHandler FetchCodeCountDetailsCompleted;
        
        /// <remarks/>
        public event InsertCommonPopupCompletedEventHandler InsertCommonPopupCompleted;
        
        /// <remarks/>
        public event Insert_Update_Login_StatusCompletedEventHandler Insert_Update_Login_StatusCompleted;
        
        /// <remarks/>
        public event Modify_HotelServiceChargeCompletedEventHandler Modify_HotelServiceChargeCompleted;
        
        /// <remarks/>
        public event Fetch_HotelServiceCharge_WebHomeCompletedEventHandler Fetch_HotelServiceCharge_WebHomeCompleted;
        
        /// <remarks/>
        public event SendmailCompletedEventHandler SendmailCompleted;
        
        /// <remarks/>
        public event SendmailGmailNewCompletedEventHandler SendmailGmailNewCompleted;
        
        /// <remarks/>
        public event GenerateSeqNoForVisaCompletedEventHandler GenerateSeqNoForVisaCompleted;
        
        /// <remarks/>
        public event InsertVisaOfflineCompletedEventHandler InsertVisaOfflineCompleted;
        
        /// <remarks/>
        public event FetchPricingcodeForQTKTCompletedEventHandler FetchPricingcodeForQTKTCompleted;
        
        /// <remarks/>
        public event FetchThaiVisaBookedHistoryCompletedEventHandler FetchThaiVisaBookedHistoryCompleted;
        
        /// <remarks/>
        public event FetchThaiVisaViewPNRCompletedEventHandler FetchThaiVisaViewPNRCompleted;
        
        /// <remarks/>
        public event InsertVisaOfflineNewCompletedEventHandler InsertVisaOfflineNewCompleted;
        
        /// <remarks/>
        public event FetchBulkMailCompletedEventHandler FetchBulkMailCompleted;
        
        /// <remarks/>
        public event InsertMailCompletedEventHandler InsertMailCompleted;
        
        /// <remarks/>
        public event Fetch_Login_DetailsCompletedEventHandler Fetch_Login_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_WebHomeLogin_DetailsCompletedEventHandler Fetch_WebHomeLogin_DetailsCompleted;
        
        /// <remarks/>
        public event INSERT_LOGIN_HISTORYCompletedEventHandler INSERT_LOGIN_HISTORYCompleted;
        
        /// <remarks/>
        public event Insert_Login_User_DetailsCompletedEventHandler Insert_Login_User_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_All_Agent_Branch_DetailsCompletedEventHandler Fetch_All_Agent_Branch_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_All_Agent_Branch_DetailsByteCompletedEventHandler Fetch_All_Agent_Branch_DetailsByteCompleted;
        
        /// <remarks/>
        public event changePasswordCompletedEventHandler changePasswordCompleted;
        
        /// <remarks/>
        public event FetchBrBookedHistoryCompletedEventHandler FetchBrBookedHistoryCompleted;
        
        /// <remarks/>
        public event Fetch_Pnr_DetailsCompletedEventHandler Fetch_Pnr_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_BUS_BookedHistory_DetailsCompletedEventHandler Fetch_BUS_BookedHistory_DetailsCompleted;
        
        /// <remarks/>
        public event BusPnrdetailsCompletedEventHandler BusPnrdetailsCompleted;
        
        /// <remarks/>
        public event FetchCompanySuperuserCompletedEventHandler FetchCompanySuperuserCompleted;
        
        /// <remarks/>
        public event Fetch_Employee_detailsCompletedEventHandler Fetch_Employee_detailsCompleted;
        
        /// <remarks/>
        public event GenerateTrackID_PgCompletedEventHandler GenerateTrackID_PgCompleted;
        
        /// <remarks/>
        public event Insert_Payment_Gateway_TrackCompletedEventHandler Insert_Payment_Gateway_TrackCompleted;
        
        /// <remarks/>
        public event Fetch_PG_Payment_DetailsCompletedEventHandler Fetch_PG_Payment_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_PG_Payment_Details_V3CompletedEventHandler Fetch_PG_Payment_Details_V3Completed;
        
        /// <remarks/>
        public event Check_Payment_Gateway_TrackCompletedEventHandler Check_Payment_Gateway_TrackCompleted;
        
        /// <remarks/>
        public event Update_Payment_Gateway_TrackCompletedEventHandler Update_Payment_Gateway_TrackCompleted;
        
        /// <remarks/>
        public event Check_ICICI_Payment_Gateway_TrackCompletedEventHandler Check_ICICI_Payment_Gateway_TrackCompleted;
        
        /// <remarks/>
        public event FetchCodeDetailsCompletedEventHandler FetchCodeDetailsCompleted;
        
        /// <remarks/>
        public event FetchCodeDetails_v1CompletedEventHandler FetchCodeDetails_v1Completed;
        
        /// <remarks/>
        public event FetchPricingCodeDetailsCompletedEventHandler FetchPricingCodeDetailsCompleted;
        
        /// <remarks/>
        public event FETCHAGENTPGDETAILSCompletedEventHandler FETCHAGENTPGDETAILSCompleted;
        
        /// <remarks/>
        public event Check_Topup_trackIDCompletedEventHandler Check_Topup_trackIDCompleted;
        
        /// <remarks/>
        public event Update_Ticket_Details_TableCompletedEventHandler Update_Ticket_Details_TableCompleted;
        
        /// <remarks/>
        public event Fetch_SequenceNumberCompletedEventHandler Fetch_SequenceNumberCompleted;
        
        /// <remarks/>
        public event Insert_Detailed_LogDetailsCompletedEventHandler Insert_Detailed_LogDetailsCompleted;
        
        /// <remarks/>
        public event Fetch_LogDataCompletedEventHandler Fetch_LogDataCompleted;
        
        /// <remarks/>
        public event Insert_Detailed_LogDetails_WebCompletedEventHandler Insert_Detailed_LogDetails_WebCompleted;
        
        /// <remarks/>
        public event APPSSECCHECKCompletedEventHandler APPSSECCHECKCompleted;
        
        /// <remarks/>
        public event WEBAPPSSECCHECKCompletedEventHandler WEBAPPSSECCHECKCompleted;
        
        /// <remarks/>
        public event WEBAPPSSESSIONCHECKCompletedEventHandler WEBAPPSSESSIONCHECKCompleted;
        
        /// <remarks/>
        public event CheckIndeskTerminalIDCompletedEventHandler CheckIndeskTerminalIDCompleted;
        
        /// <remarks/>
        public event newdashboardreportwebCompletedEventHandler newdashboardreportwebCompleted;
        
        /// <remarks/>
        public event RequestbuilddashboardwebCompletedEventHandler RequestbuilddashboardwebCompleted;
        
        /// <remarks/>
        public event RequestdaywisesegwebCompletedEventHandler RequestdaywisesegwebCompleted;
        
        /// <remarks/>
        public event newdashboardwebCompletedEventHandler newdashboardwebCompleted;
        
        /// <remarks/>
        public event RequestdaywisesegCompletedEventHandler RequestdaywisesegCompleted;
        
        /// <remarks/>
        public event newdashboardCompletedEventHandler newdashboardCompleted;
        
        /// <remarks/>
        public event newdashboardreportCompletedEventHandler newdashboardreportCompleted;
        
        /// <remarks/>
        public event FetchBrBookedHistoryB2BCompletedEventHandler FetchBrBookedHistoryB2BCompleted;
        
        /// <remarks/>
        public event FetchSeatTrackCompletedEventHandler FetchSeatTrackCompleted;
        
        /// <remarks/>
        public event SystemdetailsCompletedEventHandler SystemdetailsCompleted;
        
        /// <remarks/>
        public event fetchdownloaddetailsCompletedEventHandler fetchdownloaddetailsCompleted;
        
        /// <remarks/>
        public event FetchfarecalendarCompletedEventHandler FetchfarecalendarCompleted;
        
        /// <remarks/>
        public event insertvatdetailsCompletedEventHandler insertvatdetailsCompleted;
        
        /// <remarks/>
        public event Fetch_Best_Buy_ContentCompletedEventHandler Fetch_Best_Buy_ContentCompleted;
        
        /// <remarks/>
        public event P_FETCH_PAYMENT_GATEWAYNAMECompletedEventHandler P_FETCH_PAYMENT_GATEWAYNAMECompleted;
        
        /// <remarks/>
        public event FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventHandler FETCH_PAYMENT_GATEWAY_CHARGESWEBCompleted;
        
        /// <remarks/>
        public event Fetch_topup_details_webCompletedEventHandler Fetch_topup_details_webCompleted;
        
        /// <remarks/>
        public event Fetch_Agent_Credit_Balance_Details_franciesCompletedEventHandler Fetch_Agent_Credit_Balance_Details_franciesCompleted;
        
        /// <remarks/>
        public event Fetch_Franchise_master_dashboardCompletedEventHandler Fetch_Franchise_master_dashboardCompleted;
        
        /// <remarks/>
        public event Fetch_Franchise_agentbalance_reportCompletedEventHandler Fetch_Franchise_agentbalance_reportCompleted;
        
        /// <remarks/>
        public event Fetch_Franchise_agentdetailsCompletedEventHandler Fetch_Franchise_agentdetailsCompleted;
        
        /// <remarks/>
        public event Insert_vat_registrationCompletedEventHandler Insert_vat_registrationCompleted;
        
        /// <remarks/>
        public event UpdateimgwebhomeCompletedEventHandler UpdateimgwebhomeCompleted;
        
        /// <remarks/>
        public event FetchOrDeleteImages_WebCompletedEventHandler FetchOrDeleteImages_WebCompleted;
        
        /// <remarks/>
        public event Insert_MarkUP_Details_WebCompletedEventHandler Insert_MarkUP_Details_WebCompleted;
        
        /// <remarks/>
        public event Fetch_Airline_Markup_Details_webCompletedEventHandler Fetch_Airline_Markup_Details_webCompleted;
        
        /// <remarks/>
        public event P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventHandler P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompleted;
        
        /// <remarks/>
        public event insertPgtrackCompletedEventHandler insertPgtrackCompleted;
        
        /// <remarks/>
        public event FetchhotelcountriesCompletedEventHandler FetchhotelcountriesCompleted;
        
        /// <remarks/>
        public event InsertservicechargeCompletedEventHandler InsertservicechargeCompleted;
        
        /// <remarks/>
        public event FetchhotelcitynameCompletedEventHandler FetchhotelcitynameCompleted;
        
        /// <remarks/>
        public event FetchOfflineHoteldetCompletedEventHandler FetchOfflineHoteldetCompleted;
        
        /// <remarks/>
        public event GetCityCodeCompletedEventHandler GetCityCodeCompleted;
        
        /// <remarks/>
        public event HotelAmenitiesCompletedEventHandler HotelAmenitiesCompleted;
        
        /// <remarks/>
        public event InsertHtldetRefidCompletedEventHandler InsertHtldetRefidCompleted;
        
        /// <remarks/>
        public event FetchHotelfiltercitynameCompletedEventHandler FetchHotelfiltercitynameCompleted;
        
        /// <remarks/>
        public event FetchApphtlnameCompletedEventHandler FetchApphtlnameCompleted;
        
        /// <remarks/>
        public event FetchOtherAgntLgnDetailsCompletedEventHandler FetchOtherAgntLgnDetailsCompleted;
        
        /// <remarks/>
        public event FetchHtlServcCompletedEventHandler FetchHtlServcCompleted;
        
        /// <remarks/>
        public event FetchHtlExistpaxdetCompletedEventHandler FetchHtlExistpaxdetCompleted;
        
        /// <remarks/>
        public event InserthtlcancelReqCompletedEventHandler InserthtlcancelReqCompleted;
        
        /// <remarks/>
        public event FetchHtlDuplicatepaxdetCompletedEventHandler FetchHtlDuplicatepaxdetCompleted;
        
        /// <remarks/>
        public event Fetch_VendorApps_Login_DetailsCompletedEventHandler Fetch_VendorApps_Login_DetailsCompleted;
        
        /// <remarks/>
        public event Insert_Delete_Supplier_CommissionCompletedEventHandler Insert_Delete_Supplier_CommissionCompleted;
        
        /// <remarks/>
        public event Insert_Supplier_Credit_And_Debit_DetailsCompletedEventHandler Insert_Supplier_Credit_And_Debit_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_HomeCompletedEventHandler Fetch_Supplier_HomeCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventHandler Fetch_Supplier_Home_MonthlyWise_ReportCompleted;
        
        /// <remarks/>
        public event Fetch_Visa_MasterCompletedEventHandler Fetch_Visa_MasterCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Airline_MarkupCompletedEventHandler Fetch_Supplier_Airline_MarkupCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Airline_Markup_ResultCompletedEventHandler Fetch_Supplier_Airline_Markup_ResultCompleted;
        
        /// <remarks/>
        public event Fetch_Visa_DetailsCompletedEventHandler Fetch_Visa_DetailsCompleted;
        
        /// <remarks/>
        public event Fetch_SSR_Details_NewCompletedEventHandler Fetch_SSR_Details_NewCompleted;
        
        /// <remarks/>
        public event Fetch_Current_BalanceCompletedEventHandler Fetch_Current_BalanceCompleted;
        
        /// <remarks/>
        public event Fetch_Visa_FeeCompletedEventHandler Fetch_Visa_FeeCompleted;
        
        /// <remarks/>
        public event Update_Supplier_Control_PanelCompletedEventHandler Update_Supplier_Control_PanelCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Sales_ReportsCompletedEventHandler Fetch_Supplier_Sales_ReportsCompleted;
        
        /// <remarks/>
        public event Update_Supplier_Sales_ReportsCompletedEventHandler Update_Supplier_Sales_ReportsCompleted;
        
        /// <remarks/>
        public event Fetch_VisaDetails_With_KnownValuesCompletedEventHandler Fetch_VisaDetails_With_KnownValuesCompleted;
        
        /// <remarks/>
        public event Fetch_Visa_Supplier_FareCompletedEventHandler Fetch_Visa_Supplier_FareCompleted;
        
        /// <remarks/>
        public event Insert_Visa_AmountCompletedEventHandler Insert_Visa_AmountCompleted;
        
        /// <remarks/>
        public event Update_Visa_AmountCompletedEventHandler Update_Visa_AmountCompleted;
        
        /// <remarks/>
        public event Fetch_Visa_PlanCompletedEventHandler Fetch_Visa_PlanCompleted;
        
        /// <remarks/>
        public event Delete_Visa_FeeCompletedEventHandler Delete_Visa_FeeCompleted;
        
        /// <remarks/>
        public event P_Updating_Supplier_BalanceCompletedEventHandler P_Updating_Supplier_BalanceCompleted;
        
        /// <remarks/>
        public event Check_Visa_NumberCompletedEventHandler Check_Visa_NumberCompleted;
        
        /// <remarks/>
        public event SetSuplierbalanceCompletedEventHandler SetSuplierbalanceCompleted;
        
        /// <remarks/>
        public event Insert_Air_Supplier_MarkupCompletedEventHandler Insert_Air_Supplier_MarkupCompleted;
        
        /// <remarks/>
        public event Fetch_Insurance_Supplier_CommissionCompletedEventHandler Fetch_Insurance_Supplier_CommissionCompleted;
        
        /// <remarks/>
        public event Fetch_Bus_Supplier_CommissionCompletedEventHandler Fetch_Bus_Supplier_CommissionCompleted;
        
        /// <remarks/>
        public event Fetch_Hotel_Supplier_CommissionCompletedEventHandler Fetch_Hotel_Supplier_CommissionCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Flown_UnflownCompletedEventHandler Fetch_Supplier_Flown_UnflownCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Net_SalesCompletedEventHandler Fetch_Supplier_Net_SalesCompleted;
        
        /// <remarks/>
        public event Fetch_Supplier_Main_HomeCompletedEventHandler Fetch_Supplier_Main_HomeCompleted;
        
        /// <remarks/>
        public event Fetch_Credential_OfficeIdCompletedEventHandler Fetch_Credential_OfficeIdCompleted;
        
        /// <remarks/>
        public event insertVisaCancellationDetailsCompletedEventHandler insertVisaCancellationDetailsCompleted;
        
        /// <remarks/>
        public event UpdatingVisaStatusCompletedEventHandler UpdatingVisaStatusCompleted;
        
        /// <remarks/>
        public event P_Fetch_Supp_BalanceCompletedEventHandler P_Fetch_Supp_BalanceCompleted;
        
        /// <remarks/>
        public event Insert_Insurance_Commission_DetailsCompletedEventHandler Insert_Insurance_Commission_DetailsCompleted;
        
        /// <remarks/>
        public event Insert_Bus_Commission_DetailsCompletedEventHandler Insert_Bus_Commission_DetailsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Hotel_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Hotel_Commission_Details(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            object[] results = this.Invoke("Insert_Hotel_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        TravelTodate,
                        Status,
                        Remarks,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Hotel_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            this.Insert_Hotel_Commission_DetailsAsync(strSupplierID, TerminalID, Type, Amount, PlanName, Datetype, Bookedfromdate, BookedTodate, Travelfromdate, TravelTodate, Status, Remarks, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Insert_Hotel_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence, 
                    object userState) {
            if ((this.Insert_Hotel_Commission_DetailsOperationCompleted == null)) {
                this.Insert_Hotel_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Hotel_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Hotel_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        TravelTodate,
                        Status,
                        Remarks,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Insert_Hotel_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Hotel_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Hotel_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Hotel_Commission_DetailsCompleted(this, new Insert_Hotel_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Hotel_Supplier_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Fetch_Hotel_Supplier_Commission_Details(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Hotel_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Hotel_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Hotel_Supplier_Commission_DetailsAsync(strSupplierID, TerminalID, Status, RefID, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Hotel_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Hotel_Supplier_Commission_DetailsOperationCompleted == null)) {
                this.Fetch_Hotel_Supplier_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Hotel_Supplier_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Hotel_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Hotel_Supplier_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Hotel_Supplier_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Hotel_Supplier_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Hotel_Supplier_Commission_DetailsCompleted(this, new Fetch_Hotel_Supplier_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Bus_Supplier_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Fetch_Bus_Supplier_Commission_Details(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Bus_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Bus_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Bus_Supplier_Commission_DetailsAsync(strSupplierID, TerminalID, Status, RefID, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Bus_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Bus_Supplier_Commission_DetailsOperationCompleted == null)) {
                this.Fetch_Bus_Supplier_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Bus_Supplier_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Bus_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Bus_Supplier_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Bus_Supplier_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Bus_Supplier_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Bus_Supplier_Commission_DetailsCompleted(this, new Fetch_Bus_Supplier_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Insurance_Supplier_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Fetch_Insurance_Supplier_Commission_Details(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Insurance_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Insurance_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Insurance_Supplier_Commission_DetailsAsync(strSupplierID, TerminalID, Status, RefID, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Insurance_Supplier_Commission_DetailsAsync(string strSupplierID, string TerminalID, string Status, string RefID, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Insurance_Supplier_Commission_DetailsOperationCompleted == null)) {
                this.Fetch_Insurance_Supplier_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Insurance_Supplier_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Insurance_Supplier_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Status,
                        RefID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Insurance_Supplier_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Insurance_Supplier_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Insurance_Supplier_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Insurance_Supplier_Commission_DetailsCompleted(this, new Fetch_Insurance_Supplier_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Airline_Commission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Airline_Commission(
                    string strSupplierID, 
                    string TerminalID, 
                    string CommORplb, 
                    string Origin, 
                    string Destination, 
                    string RBDClass, 
                    string hdntxtAircode, 
                    string hdnCat, 
                    string Hdtype, 
                    string txt_SFromdate, 
                    string txt_Stodate, 
                    string txt_TFromdate, 
                    string txt_Ttodate, 
                    string trip, 
                    string ddlCabin, 
                    string HdSectype, 
                    string Hdtravel, 
                    string HdCabtype, 
                    string officeif, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            object[] results = this.Invoke("Insert_Airline_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        CommORplb,
                        Origin,
                        Destination,
                        RBDClass,
                        hdntxtAircode,
                        hdnCat,
                        Hdtype,
                        txt_SFromdate,
                        txt_Stodate,
                        txt_TFromdate,
                        txt_Ttodate,
                        trip,
                        ddlCabin,
                        HdSectype,
                        Hdtravel,
                        HdCabtype,
                        officeif,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Airline_CommissionAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string CommORplb, 
                    string Origin, 
                    string Destination, 
                    string RBDClass, 
                    string hdntxtAircode, 
                    string hdnCat, 
                    string Hdtype, 
                    string txt_SFromdate, 
                    string txt_Stodate, 
                    string txt_TFromdate, 
                    string txt_Ttodate, 
                    string trip, 
                    string ddlCabin, 
                    string HdSectype, 
                    string Hdtravel, 
                    string HdCabtype, 
                    string officeif, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            this.Insert_Airline_CommissionAsync(strSupplierID, TerminalID, CommORplb, Origin, Destination, RBDClass, hdntxtAircode, hdnCat, Hdtype, txt_SFromdate, txt_Stodate, txt_TFromdate, txt_Ttodate, trip, ddlCabin, HdSectype, Hdtravel, HdCabtype, officeif, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Insert_Airline_CommissionAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string CommORplb, 
                    string Origin, 
                    string Destination, 
                    string RBDClass, 
                    string hdntxtAircode, 
                    string hdnCat, 
                    string Hdtype, 
                    string txt_SFromdate, 
                    string txt_Stodate, 
                    string txt_TFromdate, 
                    string txt_Ttodate, 
                    string trip, 
                    string ddlCabin, 
                    string HdSectype, 
                    string Hdtravel, 
                    string HdCabtype, 
                    string officeif, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence, 
                    object userState) {
            if ((this.Insert_Airline_CommissionOperationCompleted == null)) {
                this.Insert_Airline_CommissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Airline_CommissionOperationCompleted);
            }
            this.InvokeAsync("Insert_Airline_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        CommORplb,
                        Origin,
                        Destination,
                        RBDClass,
                        hdntxtAircode,
                        hdnCat,
                        Hdtype,
                        txt_SFromdate,
                        txt_Stodate,
                        txt_TFromdate,
                        txt_Ttodate,
                        trip,
                        ddlCabin,
                        HdSectype,
                        Hdtravel,
                        HdCabtype,
                        officeif,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Insert_Airline_CommissionOperationCompleted, userState);
        }
        
        private void OnInsert_Airline_CommissionOperationCompleted(object arg) {
            if ((this.Insert_Airline_CommissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Airline_CommissionCompleted(this, new Insert_Airline_CommissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTrackDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdateTrackDetails(
                    string AirRefId, 
                    string CarRefId, 
                    string RailRefId, 
                    string BusRefId, 
                    string HotelRefId, 
                    string TripId, 
                    string strcompanyId, 
                    string strUserId, 
                    string strTrackId, 
                    string strTrackstatus, 
                    string strConfirmStatus, 
                    decimal tripFare, 
                    string strUsername, 
                    string strErrorMsg, 
                    string Flag, 
                    string strAirStatus, 
                    string strHotelStatus, 
                    string strCarStatus, 
                    string strRailStatus, 
                    string strBusStaus) {
            object[] results = this.Invoke("UpdateTrackDetails", new object[] {
                        AirRefId,
                        CarRefId,
                        RailRefId,
                        BusRefId,
                        HotelRefId,
                        TripId,
                        strcompanyId,
                        strUserId,
                        strTrackId,
                        strTrackstatus,
                        strConfirmStatus,
                        tripFare,
                        strUsername,
                        strErrorMsg,
                        Flag,
                        strAirStatus,
                        strHotelStatus,
                        strCarStatus,
                        strRailStatus,
                        strBusStaus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTrackDetailsAsync(
                    string AirRefId, 
                    string CarRefId, 
                    string RailRefId, 
                    string BusRefId, 
                    string HotelRefId, 
                    string TripId, 
                    string strcompanyId, 
                    string strUserId, 
                    string strTrackId, 
                    string strTrackstatus, 
                    string strConfirmStatus, 
                    decimal tripFare, 
                    string strUsername, 
                    string strErrorMsg, 
                    string Flag, 
                    string strAirStatus, 
                    string strHotelStatus, 
                    string strCarStatus, 
                    string strRailStatus, 
                    string strBusStaus) {
            this.UpdateTrackDetailsAsync(AirRefId, CarRefId, RailRefId, BusRefId, HotelRefId, TripId, strcompanyId, strUserId, strTrackId, strTrackstatus, strConfirmStatus, tripFare, strUsername, strErrorMsg, Flag, strAirStatus, strHotelStatus, strCarStatus, strRailStatus, strBusStaus, null);
        }
        
        /// <remarks/>
        public void UpdateTrackDetailsAsync(
                    string AirRefId, 
                    string CarRefId, 
                    string RailRefId, 
                    string BusRefId, 
                    string HotelRefId, 
                    string TripId, 
                    string strcompanyId, 
                    string strUserId, 
                    string strTrackId, 
                    string strTrackstatus, 
                    string strConfirmStatus, 
                    decimal tripFare, 
                    string strUsername, 
                    string strErrorMsg, 
                    string Flag, 
                    string strAirStatus, 
                    string strHotelStatus, 
                    string strCarStatus, 
                    string strRailStatus, 
                    string strBusStaus, 
                    object userState) {
            if ((this.UpdateTrackDetailsOperationCompleted == null)) {
                this.UpdateTrackDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTrackDetailsOperationCompleted);
            }
            this.InvokeAsync("UpdateTrackDetails", new object[] {
                        AirRefId,
                        CarRefId,
                        RailRefId,
                        BusRefId,
                        HotelRefId,
                        TripId,
                        strcompanyId,
                        strUserId,
                        strTrackId,
                        strTrackstatus,
                        strConfirmStatus,
                        tripFare,
                        strUsername,
                        strErrorMsg,
                        Flag,
                        strAirStatus,
                        strHotelStatus,
                        strCarStatus,
                        strRailStatus,
                        strBusStaus}, this.UpdateTrackDetailsOperationCompleted, userState);
        }
        
        private void OnUpdateTrackDetailsOperationCompleted(object arg) {
            if ((this.UpdateTrackDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTrackDetailsCompleted(this, new UpdateTrackDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DashBoradDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DashBoradDetails(string strEmployeeCode, string fromDtStr, string toDtStr, string strflag, string imagePathAgentLogo, string usertype, string ApprovalCountFlag, string IPAddress) {
            object[] results = this.Invoke("DashBoradDetails", new object[] {
                        strEmployeeCode,
                        fromDtStr,
                        toDtStr,
                        strflag,
                        imagePathAgentLogo,
                        usertype,
                        ApprovalCountFlag,
                        IPAddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DashBoradDetailsAsync(string strEmployeeCode, string fromDtStr, string toDtStr, string strflag, string imagePathAgentLogo, string usertype, string ApprovalCountFlag, string IPAddress) {
            this.DashBoradDetailsAsync(strEmployeeCode, fromDtStr, toDtStr, strflag, imagePathAgentLogo, usertype, ApprovalCountFlag, IPAddress, null);
        }
        
        /// <remarks/>
        public void DashBoradDetailsAsync(string strEmployeeCode, string fromDtStr, string toDtStr, string strflag, string imagePathAgentLogo, string usertype, string ApprovalCountFlag, string IPAddress, object userState) {
            if ((this.DashBoradDetailsOperationCompleted == null)) {
                this.DashBoradDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDashBoradDetailsOperationCompleted);
            }
            this.InvokeAsync("DashBoradDetails", new object[] {
                        strEmployeeCode,
                        fromDtStr,
                        toDtStr,
                        strflag,
                        imagePathAgentLogo,
                        usertype,
                        ApprovalCountFlag,
                        IPAddress}, this.DashBoradDetailsOperationCompleted, userState);
        }
        
        private void OnDashBoradDetailsOperationCompleted(object arg) {
            if ((this.DashBoradDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DashBoradDetailsCompleted(this, new DashBoradDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBookedTicketDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchBookedTicketDetails(string strUserID, string strBookedDate, string strCompanyID, string strflag, string usertype, string IPAddress) {
            object[] results = this.Invoke("FetchBookedTicketDetails", new object[] {
                        strUserID,
                        strBookedDate,
                        strCompanyID,
                        strflag,
                        usertype,
                        IPAddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBookedTicketDetailsAsync(string strUserID, string strBookedDate, string strCompanyID, string strflag, string usertype, string IPAddress) {
            this.FetchBookedTicketDetailsAsync(strUserID, strBookedDate, strCompanyID, strflag, usertype, IPAddress, null);
        }
        
        /// <remarks/>
        public void FetchBookedTicketDetailsAsync(string strUserID, string strBookedDate, string strCompanyID, string strflag, string usertype, string IPAddress, object userState) {
            if ((this.FetchBookedTicketDetailsOperationCompleted == null)) {
                this.FetchBookedTicketDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBookedTicketDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchBookedTicketDetails", new object[] {
                        strUserID,
                        strBookedDate,
                        strCompanyID,
                        strflag,
                        usertype,
                        IPAddress}, this.FetchBookedTicketDetailsOperationCompleted, userState);
        }
        
        private void OnFetchBookedTicketDetailsOperationCompleted(object arg) {
            if ((this.FetchBookedTicketDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBookedTicketDetailsCompleted(this, new FetchBookedTicketDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AgentFind", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] AgentFind(string ClientName, string ClientID, string strAgentID, string BoaTerminalid, string username, string ipaddress, string seqid) {
            object[] results = this.Invoke("AgentFind", new object[] {
                        ClientName,
                        ClientID,
                        strAgentID,
                        BoaTerminalid,
                        username,
                        ipaddress,
                        seqid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void AgentFindAsync(string ClientName, string ClientID, string strAgentID, string BoaTerminalid, string username, string ipaddress, string seqid) {
            this.AgentFindAsync(ClientName, ClientID, strAgentID, BoaTerminalid, username, ipaddress, seqid, null);
        }
        
        /// <remarks/>
        public void AgentFindAsync(string ClientName, string ClientID, string strAgentID, string BoaTerminalid, string username, string ipaddress, string seqid, object userState) {
            if ((this.AgentFindOperationCompleted == null)) {
                this.AgentFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAgentFindOperationCompleted);
            }
            this.InvokeAsync("AgentFind", new object[] {
                        ClientName,
                        ClientID,
                        strAgentID,
                        BoaTerminalid,
                        username,
                        ipaddress,
                        seqid}, this.AgentFindOperationCompleted, userState);
        }
        
        private void OnAgentFindOperationCompleted(object arg) {
            if ((this.AgentFindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AgentFindCompleted(this, new AgentFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCC(string CrsID, string Branch, string AgentID, string UserName, string IP, string sequenceId, string TerminalId, string TerminalType, string strresponse, ref string pstrDisplayMsg) {
            object[] results = this.Invoke("FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCC", new object[] {
                        CrsID,
                        Branch,
                        AgentID,
                        UserName,
                        IP,
                        sequenceId,
                        TerminalId,
                        TerminalType,
                        strresponse,
                        pstrDisplayMsg});
            pstrDisplayMsg = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCAsync(string CrsID, string Branch, string AgentID, string UserName, string IP, string sequenceId, string TerminalId, string TerminalType, string strresponse, string pstrDisplayMsg) {
            this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCAsync(CrsID, Branch, AgentID, UserName, IP, sequenceId, TerminalId, TerminalType, strresponse, pstrDisplayMsg, null);
        }
        
        /// <remarks/>
        public void FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCAsync(string CrsID, string Branch, string AgentID, string UserName, string IP, string sequenceId, string TerminalId, string TerminalType, string strresponse, string pstrDisplayMsg, object userState) {
            if ((this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted == null)) {
                this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted);
            }
            this.InvokeAsync("FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCC", new object[] {
                        CrsID,
                        Branch,
                        AgentID,
                        UserName,
                        IP,
                        sequenceId,
                        TerminalId,
                        TerminalType,
                        strresponse,
                        pstrDisplayMsg}, this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted, userState);
        }
        
        private void OnFECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCOperationCompleted(object arg) {
            if ((this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompleted(this, new FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_login_details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_login_details(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, ref string pstrerror) {
            object[] results = this.Invoke("Get_login_details", new object[] {
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        pstrerror});
            pstrerror = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_login_detailsAsync(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, string pstrerror) {
            this.Get_login_detailsAsync(agentid, Terminalid, Username, Ipaddress, terminaltype, sequenceid, pagename, function, pstrerror, null);
        }
        
        /// <remarks/>
        public void Get_login_detailsAsync(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, string pstrerror, object userState) {
            if ((this.Get_login_detailsOperationCompleted == null)) {
                this.Get_login_detailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_login_detailsOperationCompleted);
            }
            this.InvokeAsync("Get_login_details", new object[] {
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        pstrerror}, this.Get_login_detailsOperationCompleted, userState);
        }
        
        private void OnGet_login_detailsOperationCompleted(object arg) {
            if ((this.Get_login_detailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_login_detailsCompleted(this, new Get_login_detailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Duplicatebooking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Duplicatebooking(string FirstName, string Lastname, string traveldate, string tourename, string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, ref string pstrerror) {
            object[] results = this.Invoke("Duplicatebooking", new object[] {
                        FirstName,
                        Lastname,
                        traveldate,
                        tourename,
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        pstrerror});
            pstrerror = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DuplicatebookingAsync(string FirstName, string Lastname, string traveldate, string tourename, string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, string pstrerror) {
            this.DuplicatebookingAsync(FirstName, Lastname, traveldate, tourename, agentid, Terminalid, Username, Ipaddress, terminaltype, sequenceid, pagename, function, pstrerror, null);
        }
        
        /// <remarks/>
        public void DuplicatebookingAsync(string FirstName, string Lastname, string traveldate, string tourename, string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, string pstrerror, object userState) {
            if ((this.DuplicatebookingOperationCompleted == null)) {
                this.DuplicatebookingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDuplicatebookingOperationCompleted);
            }
            this.InvokeAsync("Duplicatebooking", new object[] {
                        FirstName,
                        Lastname,
                        traveldate,
                        tourename,
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        pstrerror}, this.DuplicatebookingOperationCompleted, userState);
        }
        
        private void OnDuplicatebookingOperationCompleted(object arg) {
            if ((this.DuplicatebookingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DuplicatebookingCompleted(this, new DuplicatebookingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchActivityBookedHistoryDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FetchActivityBookedHistoryDetails(
                    string FromDate, 
                    string ToDate, 
                    string SPNR, 
                    string tourpnr, 
                    string Status_str, 
                    string Paymentmode, 
                    string agentid, 
                    string Terminalid, 
                    string Username, 
                    string Ipaddress, 
                    string terminaltype, 
                    decimal sequenceid, 
                    string pagename, 
                    string function, 
                    ref System.Data.DataSet dsout, 
                    ref string pstrerror) {
            object[] results = this.Invoke("FetchActivityBookedHistoryDetails", new object[] {
                        FromDate,
                        ToDate,
                        SPNR,
                        tourpnr,
                        Status_str,
                        Paymentmode,
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        dsout,
                        pstrerror});
            dsout = ((System.Data.DataSet)(results[1]));
            pstrerror = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FetchActivityBookedHistoryDetailsAsync(
                    string FromDate, 
                    string ToDate, 
                    string SPNR, 
                    string tourpnr, 
                    string Status_str, 
                    string Paymentmode, 
                    string agentid, 
                    string Terminalid, 
                    string Username, 
                    string Ipaddress, 
                    string terminaltype, 
                    decimal sequenceid, 
                    string pagename, 
                    string function, 
                    System.Data.DataSet dsout, 
                    string pstrerror) {
            this.FetchActivityBookedHistoryDetailsAsync(FromDate, ToDate, SPNR, tourpnr, Status_str, Paymentmode, agentid, Terminalid, Username, Ipaddress, terminaltype, sequenceid, pagename, function, dsout, pstrerror, null);
        }
        
        /// <remarks/>
        public void FetchActivityBookedHistoryDetailsAsync(
                    string FromDate, 
                    string ToDate, 
                    string SPNR, 
                    string tourpnr, 
                    string Status_str, 
                    string Paymentmode, 
                    string agentid, 
                    string Terminalid, 
                    string Username, 
                    string Ipaddress, 
                    string terminaltype, 
                    decimal sequenceid, 
                    string pagename, 
                    string function, 
                    System.Data.DataSet dsout, 
                    string pstrerror, 
                    object userState) {
            if ((this.FetchActivityBookedHistoryDetailsOperationCompleted == null)) {
                this.FetchActivityBookedHistoryDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchActivityBookedHistoryDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchActivityBookedHistoryDetails", new object[] {
                        FromDate,
                        ToDate,
                        SPNR,
                        tourpnr,
                        Status_str,
                        Paymentmode,
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        dsout,
                        pstrerror}, this.FetchActivityBookedHistoryDetailsOperationCompleted, userState);
        }
        
        private void OnFetchActivityBookedHistoryDetailsOperationCompleted(object arg) {
            if ((this.FetchActivityBookedHistoryDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchActivityBookedHistoryDetailsCompleted(this, new FetchActivityBookedHistoryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchActivityofflinecity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FetchActivityofflinecity(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] dsout, ref string pstrerror) {
            object[] results = this.Invoke("FetchActivityofflinecity", new object[] {
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        dsout,
                        pstrerror});
            dsout = ((byte[])(results[1]));
            pstrerror = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FetchActivityofflinecityAsync(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, byte[] dsout, string pstrerror) {
            this.FetchActivityofflinecityAsync(agentid, Terminalid, Username, Ipaddress, terminaltype, sequenceid, pagename, function, dsout, pstrerror, null);
        }
        
        /// <remarks/>
        public void FetchActivityofflinecityAsync(string agentid, string Terminalid, string Username, string Ipaddress, string terminaltype, decimal sequenceid, string pagename, string function, byte[] dsout, string pstrerror, object userState) {
            if ((this.FetchActivityofflinecityOperationCompleted == null)) {
                this.FetchActivityofflinecityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchActivityofflinecityOperationCompleted);
            }
            this.InvokeAsync("FetchActivityofflinecity", new object[] {
                        agentid,
                        Terminalid,
                        Username,
                        Ipaddress,
                        terminaltype,
                        sequenceid,
                        pagename,
                        function,
                        dsout,
                        pstrerror}, this.FetchActivityofflinecityOperationCompleted, userState);
        }
        
        private void OnFetchActivityofflinecityOperationCompleted(object arg) {
            if ((this.FetchActivityofflinecityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchActivityofflinecityCompleted(this, new FetchActivityofflinecityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Client_GST_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Client_GST_Details(string strClientID, string sstrUsername, string strBranchId, string strIpaddress, string strSequenceno, string strAppType, string strTerminalType, string GROUPID) {
            object[] results = this.Invoke("Fetch_Client_GST_Details", new object[] {
                        strClientID,
                        sstrUsername,
                        strBranchId,
                        strIpaddress,
                        strSequenceno,
                        strAppType,
                        strTerminalType,
                        GROUPID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Client_GST_DetailsAsync(string strClientID, string sstrUsername, string strBranchId, string strIpaddress, string strSequenceno, string strAppType, string strTerminalType, string GROUPID) {
            this.Fetch_Client_GST_DetailsAsync(strClientID, sstrUsername, strBranchId, strIpaddress, strSequenceno, strAppType, strTerminalType, GROUPID, null);
        }
        
        /// <remarks/>
        public void Fetch_Client_GST_DetailsAsync(string strClientID, string sstrUsername, string strBranchId, string strIpaddress, string strSequenceno, string strAppType, string strTerminalType, string GROUPID, object userState) {
            if ((this.Fetch_Client_GST_DetailsOperationCompleted == null)) {
                this.Fetch_Client_GST_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Client_GST_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Client_GST_Details", new object[] {
                        strClientID,
                        sstrUsername,
                        strBranchId,
                        strIpaddress,
                        strSequenceno,
                        strAppType,
                        strTerminalType,
                        GROUPID}, this.Fetch_Client_GST_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Client_GST_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Client_GST_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Client_GST_DetailsCompleted(this, new Fetch_Client_GST_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintTicket_Riya", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PrintTicket_Riya(
                    string agentID, 
                    string PNR, 
                    string AirPnr, 
                    string CRSPnr, 
                    bool SingleTicket, 
                    bool WithLogo, 
                    bool WithFare, 
                    bool WithTaxBreakup, 
                    bool WithSFGST, 
                    bool mailFlag, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    ref int TktCount, 
                    ref string TickectCopy, 
                    ref string strErrorMsg, 
                    string[] listArray) {
            object[] results = this.Invoke("PrintTicket_Riya", new object[] {
                        agentID,
                        PNR,
                        AirPnr,
                        CRSPnr,
                        SingleTicket,
                        WithLogo,
                        WithFare,
                        WithTaxBreakup,
                        WithSFGST,
                        mailFlag,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        TktCount,
                        TickectCopy,
                        strErrorMsg,
                        listArray});
            TktCount = ((int)(results[1]));
            TickectCopy = ((string)(results[2]));
            strErrorMsg = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrintTicket_RiyaAsync(
                    string agentID, 
                    string PNR, 
                    string AirPnr, 
                    string CRSPnr, 
                    bool SingleTicket, 
                    bool WithLogo, 
                    bool WithFare, 
                    bool WithTaxBreakup, 
                    bool WithSFGST, 
                    bool mailFlag, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    int TktCount, 
                    string TickectCopy, 
                    string strErrorMsg, 
                    string[] listArray) {
            this.PrintTicket_RiyaAsync(agentID, PNR, AirPnr, CRSPnr, SingleTicket, WithLogo, WithFare, WithTaxBreakup, WithSFGST, mailFlag, terminalID, userName, ipAddress, terminalType, sequenceID, TktCount, TickectCopy, strErrorMsg, listArray, null);
        }
        
        /// <remarks/>
        public void PrintTicket_RiyaAsync(
                    string agentID, 
                    string PNR, 
                    string AirPnr, 
                    string CRSPnr, 
                    bool SingleTicket, 
                    bool WithLogo, 
                    bool WithFare, 
                    bool WithTaxBreakup, 
                    bool WithSFGST, 
                    bool mailFlag, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    int TktCount, 
                    string TickectCopy, 
                    string strErrorMsg, 
                    string[] listArray, 
                    object userState) {
            if ((this.PrintTicket_RiyaOperationCompleted == null)) {
                this.PrintTicket_RiyaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintTicket_RiyaOperationCompleted);
            }
            this.InvokeAsync("PrintTicket_Riya", new object[] {
                        agentID,
                        PNR,
                        AirPnr,
                        CRSPnr,
                        SingleTicket,
                        WithLogo,
                        WithFare,
                        WithTaxBreakup,
                        WithSFGST,
                        mailFlag,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        TktCount,
                        TickectCopy,
                        strErrorMsg,
                        listArray}, this.PrintTicket_RiyaOperationCompleted, userState);
        }
        
        private void OnPrintTicket_RiyaOperationCompleted(object arg) {
            if ((this.PrintTicket_RiyaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintTicket_RiyaCompleted(this, new PrintTicket_RiyaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_AirlineNameFormat", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Fetch_AirlineNameFormat(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string flag, ref string strErrormsg, ref System.Data.DataSet strResult) {
            object[] results = this.Invoke("Fetch_AirlineNameFormat", new object[] {
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        flag,
                        strErrormsg,
                        strResult});
            strErrormsg = ((string)(results[1]));
            strResult = ((System.Data.DataSet)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_AirlineNameFormatAsync(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string flag, string strErrormsg, System.Data.DataSet strResult) {
            this.Fetch_AirlineNameFormatAsync(agentID, terminalID, userName, ipAddress, terminalType, sequenceID, flag, strErrormsg, strResult, null);
        }
        
        /// <remarks/>
        public void Fetch_AirlineNameFormatAsync(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string flag, string strErrormsg, System.Data.DataSet strResult, object userState) {
            if ((this.Fetch_AirlineNameFormatOperationCompleted == null)) {
                this.Fetch_AirlineNameFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_AirlineNameFormatOperationCompleted);
            }
            this.InvokeAsync("Fetch_AirlineNameFormat", new object[] {
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        flag,
                        strErrormsg,
                        strResult}, this.Fetch_AirlineNameFormatOperationCompleted, userState);
        }
        
        private void OnFetch_AirlineNameFormatOperationCompleted(object arg) {
            if ((this.Fetch_AirlineNameFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_AirlineNameFormatCompleted(this, new Fetch_AirlineNameFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_BusServiceCharge_WebHomeByte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Fetch_BusServiceCharge_WebHomeByte(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceId, string strOrigin, string strDestination, string strBusType, string strCheckAll, string strFlag, string strCurrency, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_BusServiceCharge_WebHomeByte", new object[] {
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        sequenceId,
                        strOrigin,
                        strDestination,
                        strBusType,
                        strCheckAll,
                        strFlag,
                        strCurrency,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_BusServiceCharge_WebHomeByteAsync(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceId, string strOrigin, string strDestination, string strBusType, string strCheckAll, string strFlag, string strCurrency, string strErrorMsg) {
            this.Fetch_BusServiceCharge_WebHomeByteAsync(strAgentID, strTerminalID, strUserName, strIpAddress, strTerminalType, sequenceId, strOrigin, strDestination, strBusType, strCheckAll, strFlag, strCurrency, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_BusServiceCharge_WebHomeByteAsync(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceId, string strOrigin, string strDestination, string strBusType, string strCheckAll, string strFlag, string strCurrency, string strErrorMsg, object userState) {
            if ((this.Fetch_BusServiceCharge_WebHomeByteOperationCompleted == null)) {
                this.Fetch_BusServiceCharge_WebHomeByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_BusServiceCharge_WebHomeByteOperationCompleted);
            }
            this.InvokeAsync("Fetch_BusServiceCharge_WebHomeByte", new object[] {
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        sequenceId,
                        strOrigin,
                        strDestination,
                        strBusType,
                        strCheckAll,
                        strFlag,
                        strCurrency,
                        strErrorMsg}, this.Fetch_BusServiceCharge_WebHomeByteOperationCompleted, userState);
        }
        
        private void OnFetch_BusServiceCharge_WebHomeByteOperationCompleted(object arg) {
            if ((this.Fetch_BusServiceCharge_WebHomeByteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_BusServiceCharge_WebHomeByteCompleted(this, new Fetch_BusServiceCharge_WebHomeByteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Modify_BusServiceCharge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Modify_BusServiceCharge(string strJsonRequest, string agentId, string terminalID, string userName, string terminalType, string ipAddress, decimal sequenceID, string currcode, string FLAG) {
            object[] results = this.Invoke("Modify_BusServiceCharge", new object[] {
                        strJsonRequest,
                        agentId,
                        terminalID,
                        userName,
                        terminalType,
                        ipAddress,
                        sequenceID,
                        currcode,
                        FLAG});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Modify_BusServiceChargeAsync(string strJsonRequest, string agentId, string terminalID, string userName, string terminalType, string ipAddress, decimal sequenceID, string currcode, string FLAG) {
            this.Modify_BusServiceChargeAsync(strJsonRequest, agentId, terminalID, userName, terminalType, ipAddress, sequenceID, currcode, FLAG, null);
        }
        
        /// <remarks/>
        public void Modify_BusServiceChargeAsync(string strJsonRequest, string agentId, string terminalID, string userName, string terminalType, string ipAddress, decimal sequenceID, string currcode, string FLAG, object userState) {
            if ((this.Modify_BusServiceChargeOperationCompleted == null)) {
                this.Modify_BusServiceChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModify_BusServiceChargeOperationCompleted);
            }
            this.InvokeAsync("Modify_BusServiceCharge", new object[] {
                        strJsonRequest,
                        agentId,
                        terminalID,
                        userName,
                        terminalType,
                        ipAddress,
                        sequenceID,
                        currcode,
                        FLAG}, this.Modify_BusServiceChargeOperationCompleted, userState);
        }
        
        private void OnModify_BusServiceChargeOperationCompleted(object arg) {
            if ((this.Modify_BusServiceChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Modify_BusServiceChargeCompleted(this, new Modify_BusServiceChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCodeCountDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchCodeCountDetails(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    ref string strerror, 
                    string strairlineCode) {
            object[] results = this.Invoke("FetchCodeCountDetails", new object[] {
                        ClientID,
                        Terminalid,
                        Origin,
                        Destination,
                        AIrportId,
                        Triptype,
                        Calss,
                        Cabin,
                        Thread,
                        CatCount,
                        strUserName,
                        strTerminalType,
                        sequenceid,
                        ipaddress,
                        strerror,
                        strairlineCode});
            strerror = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCodeCountDetailsAsync(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    string strerror, 
                    string strairlineCode) {
            this.FetchCodeCountDetailsAsync(ClientID, Terminalid, Origin, Destination, AIrportId, Triptype, Calss, Cabin, Thread, CatCount, strUserName, strTerminalType, sequenceid, ipaddress, strerror, strairlineCode, null);
        }
        
        /// <remarks/>
        public void FetchCodeCountDetailsAsync(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    string strerror, 
                    string strairlineCode, 
                    object userState) {
            if ((this.FetchCodeCountDetailsOperationCompleted == null)) {
                this.FetchCodeCountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCodeCountDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchCodeCountDetails", new object[] {
                        ClientID,
                        Terminalid,
                        Origin,
                        Destination,
                        AIrportId,
                        Triptype,
                        Calss,
                        Cabin,
                        Thread,
                        CatCount,
                        strUserName,
                        strTerminalType,
                        sequenceid,
                        ipaddress,
                        strerror,
                        strairlineCode}, this.FetchCodeCountDetailsOperationCompleted, userState);
        }
        
        private void OnFetchCodeCountDetailsOperationCompleted(object arg) {
            if ((this.FetchCodeCountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCodeCountDetailsCompleted(this, new FetchCodeCountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCommonPopup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertCommonPopup(System.Data.DataSet dsPopupDetails, string username, string IP, string strTerminalid) {
            object[] results = this.Invoke("InsertCommonPopup", new object[] {
                        dsPopupDetails,
                        username,
                        IP,
                        strTerminalid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCommonPopupAsync(System.Data.DataSet dsPopupDetails, string username, string IP, string strTerminalid) {
            this.InsertCommonPopupAsync(dsPopupDetails, username, IP, strTerminalid, null);
        }
        
        /// <remarks/>
        public void InsertCommonPopupAsync(System.Data.DataSet dsPopupDetails, string username, string IP, string strTerminalid, object userState) {
            if ((this.InsertCommonPopupOperationCompleted == null)) {
                this.InsertCommonPopupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCommonPopupOperationCompleted);
            }
            this.InvokeAsync("InsertCommonPopup", new object[] {
                        dsPopupDetails,
                        username,
                        IP,
                        strTerminalid}, this.InsertCommonPopupOperationCompleted, userState);
        }
        
        private void OnInsertCommonPopupOperationCompleted(object arg) {
            if ((this.InsertCommonPopupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCommonPopupCompleted(this, new InsertCommonPopupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Update_Login_Status", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Update_Login_Status(string Terminalid, string userName, string FLAG, string ipAddress, ref string strErrorMsg, decimal seqid, string historydetails, string Terminaltype) {
            object[] results = this.Invoke("Insert_Update_Login_Status", new object[] {
                        Terminalid,
                        userName,
                        FLAG,
                        ipAddress,
                        strErrorMsg,
                        seqid,
                        historydetails,
                        Terminaltype});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Update_Login_StatusAsync(string Terminalid, string userName, string FLAG, string ipAddress, string strErrorMsg, decimal seqid, string historydetails, string Terminaltype) {
            this.Insert_Update_Login_StatusAsync(Terminalid, userName, FLAG, ipAddress, strErrorMsg, seqid, historydetails, Terminaltype, null);
        }
        
        /// <remarks/>
        public void Insert_Update_Login_StatusAsync(string Terminalid, string userName, string FLAG, string ipAddress, string strErrorMsg, decimal seqid, string historydetails, string Terminaltype, object userState) {
            if ((this.Insert_Update_Login_StatusOperationCompleted == null)) {
                this.Insert_Update_Login_StatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Update_Login_StatusOperationCompleted);
            }
            this.InvokeAsync("Insert_Update_Login_Status", new object[] {
                        Terminalid,
                        userName,
                        FLAG,
                        ipAddress,
                        strErrorMsg,
                        seqid,
                        historydetails,
                        Terminaltype}, this.Insert_Update_Login_StatusOperationCompleted, userState);
        }
        
        private void OnInsert_Update_Login_StatusOperationCompleted(object arg) {
            if ((this.Insert_Update_Login_StatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Update_Login_StatusCompleted(this, new Insert_Update_Login_StatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Modify_HotelServiceCharge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Modify_HotelServiceCharge(string JsonRequest, string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal SequenceId, string currcode, string strFlag) {
            object[] results = this.Invoke("Modify_HotelServiceCharge", new object[] {
                        JsonRequest,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        SequenceId,
                        currcode,
                        strFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Modify_HotelServiceChargeAsync(string JsonRequest, string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal SequenceId, string currcode, string strFlag) {
            this.Modify_HotelServiceChargeAsync(JsonRequest, strAgentID, strTerminalID, strUserName, strIpAddress, strTerminalType, SequenceId, currcode, strFlag, null);
        }
        
        /// <remarks/>
        public void Modify_HotelServiceChargeAsync(string JsonRequest, string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal SequenceId, string currcode, string strFlag, object userState) {
            if ((this.Modify_HotelServiceChargeOperationCompleted == null)) {
                this.Modify_HotelServiceChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModify_HotelServiceChargeOperationCompleted);
            }
            this.InvokeAsync("Modify_HotelServiceCharge", new object[] {
                        JsonRequest,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        SequenceId,
                        currcode,
                        strFlag}, this.Modify_HotelServiceChargeOperationCompleted, userState);
        }
        
        private void OnModify_HotelServiceChargeOperationCompleted(object arg) {
            if ((this.Modify_HotelServiceChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Modify_HotelServiceChargeCompleted(this, new Modify_HotelServiceChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_HotelServiceCharge_WebHome", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Fetch_HotelServiceCharge_WebHome(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceID, string strAirportID, string RoomPaxType, string strFlag, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_HotelServiceCharge_WebHome", new object[] {
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        sequenceID,
                        strAirportID,
                        RoomPaxType,
                        strFlag,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_HotelServiceCharge_WebHomeAsync(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceID, string strAirportID, string RoomPaxType, string strFlag, string strErrorMsg) {
            this.Fetch_HotelServiceCharge_WebHomeAsync(strAgentID, strTerminalID, strUserName, strIpAddress, strTerminalType, sequenceID, strAirportID, RoomPaxType, strFlag, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_HotelServiceCharge_WebHomeAsync(string strAgentID, string strTerminalID, string strUserName, string strIpAddress, string strTerminalType, decimal sequenceID, string strAirportID, string RoomPaxType, string strFlag, string strErrorMsg, object userState) {
            if ((this.Fetch_HotelServiceCharge_WebHomeOperationCompleted == null)) {
                this.Fetch_HotelServiceCharge_WebHomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_HotelServiceCharge_WebHomeOperationCompleted);
            }
            this.InvokeAsync("Fetch_HotelServiceCharge_WebHome", new object[] {
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIpAddress,
                        strTerminalType,
                        sequenceID,
                        strAirportID,
                        RoomPaxType,
                        strFlag,
                        strErrorMsg}, this.Fetch_HotelServiceCharge_WebHomeOperationCompleted, userState);
        }
        
        private void OnFetch_HotelServiceCharge_WebHomeOperationCompleted(object arg) {
            if ((this.Fetch_HotelServiceCharge_WebHomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_HotelServiceCharge_WebHomeCompleted(this, new Fetch_HotelServiceCharge_WebHomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Sendmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Sendmail(
                    string Toid, 
                    string Subject, 
                    string msgll, 
                    string MessageId, 
                    ulong Historyid, 
                    string ETAG, 
                    string thredid, 
                    string mymessageid, 
                    string Messegedata, 
                    string datetime, 
                    string Reference, 
                    string inreplyto, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    ref string pstrResult) {
            object[] results = this.Invoke("Sendmail", new object[] {
                        Toid,
                        Subject,
                        msgll,
                        MessageId,
                        Historyid,
                        ETAG,
                        thredid,
                        mymessageid,
                        Messegedata,
                        datetime,
                        Reference,
                        inreplyto,
                        userName,
                        TerminalId,
                        TerminalType,
                        sequenceID,
                        ipAddress,
                        pstrResult});
            pstrResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendmailAsync(
                    string Toid, 
                    string Subject, 
                    string msgll, 
                    string MessageId, 
                    ulong Historyid, 
                    string ETAG, 
                    string thredid, 
                    string mymessageid, 
                    string Messegedata, 
                    string datetime, 
                    string Reference, 
                    string inreplyto, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    string pstrResult) {
            this.SendmailAsync(Toid, Subject, msgll, MessageId, Historyid, ETAG, thredid, mymessageid, Messegedata, datetime, Reference, inreplyto, userName, TerminalId, TerminalType, sequenceID, ipAddress, pstrResult, null);
        }
        
        /// <remarks/>
        public void SendmailAsync(
                    string Toid, 
                    string Subject, 
                    string msgll, 
                    string MessageId, 
                    ulong Historyid, 
                    string ETAG, 
                    string thredid, 
                    string mymessageid, 
                    string Messegedata, 
                    string datetime, 
                    string Reference, 
                    string inreplyto, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    string pstrResult, 
                    object userState) {
            if ((this.SendmailOperationCompleted == null)) {
                this.SendmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendmailOperationCompleted);
            }
            this.InvokeAsync("Sendmail", new object[] {
                        Toid,
                        Subject,
                        msgll,
                        MessageId,
                        Historyid,
                        ETAG,
                        thredid,
                        mymessageid,
                        Messegedata,
                        datetime,
                        Reference,
                        inreplyto,
                        userName,
                        TerminalId,
                        TerminalType,
                        sequenceID,
                        ipAddress,
                        pstrResult}, this.SendmailOperationCompleted, userState);
        }
        
        private void OnSendmailOperationCompleted(object arg) {
            if ((this.SendmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendmailCompleted(this, new SendmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendmailGmailNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendmailGmailNew(
                    string Toid, 
                    string CCMail, 
                    string BCCMail, 
                    string Subject, 
                    string BodyText, 
                    string[] Attchment, 
                    string[] Attchmenttype, 
                    string[] Attachmentname, 
                    string MessageId, 
                    string PstrReferenceid, 
                    string PstrMsgID, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    ref string pstrResult) {
            object[] results = this.Invoke("SendmailGmailNew", new object[] {
                        Toid,
                        CCMail,
                        BCCMail,
                        Subject,
                        BodyText,
                        Attchment,
                        Attchmenttype,
                        Attachmentname,
                        MessageId,
                        PstrReferenceid,
                        PstrMsgID,
                        userName,
                        TerminalId,
                        TerminalType,
                        sequenceID,
                        ipAddress,
                        pstrResult});
            pstrResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendmailGmailNewAsync(
                    string Toid, 
                    string CCMail, 
                    string BCCMail, 
                    string Subject, 
                    string BodyText, 
                    string[] Attchment, 
                    string[] Attchmenttype, 
                    string[] Attachmentname, 
                    string MessageId, 
                    string PstrReferenceid, 
                    string PstrMsgID, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    string pstrResult) {
            this.SendmailGmailNewAsync(Toid, CCMail, BCCMail, Subject, BodyText, Attchment, Attchmenttype, Attachmentname, MessageId, PstrReferenceid, PstrMsgID, userName, TerminalId, TerminalType, sequenceID, ipAddress, pstrResult, null);
        }
        
        /// <remarks/>
        public void SendmailGmailNewAsync(
                    string Toid, 
                    string CCMail, 
                    string BCCMail, 
                    string Subject, 
                    string BodyText, 
                    string[] Attchment, 
                    string[] Attchmenttype, 
                    string[] Attachmentname, 
                    string MessageId, 
                    string PstrReferenceid, 
                    string PstrMsgID, 
                    string userName, 
                    string TerminalId, 
                    string TerminalType, 
                    string sequenceID, 
                    string ipAddress, 
                    string pstrResult, 
                    object userState) {
            if ((this.SendmailGmailNewOperationCompleted == null)) {
                this.SendmailGmailNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendmailGmailNewOperationCompleted);
            }
            this.InvokeAsync("SendmailGmailNew", new object[] {
                        Toid,
                        CCMail,
                        BCCMail,
                        Subject,
                        BodyText,
                        Attchment,
                        Attchmenttype,
                        Attachmentname,
                        MessageId,
                        PstrReferenceid,
                        PstrMsgID,
                        userName,
                        TerminalId,
                        TerminalType,
                        sequenceID,
                        ipAddress,
                        pstrResult}, this.SendmailGmailNewOperationCompleted, userState);
        }
        
        private void OnSendmailGmailNewOperationCompleted(object arg) {
            if ((this.SendmailGmailNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendmailGmailNewCompleted(this, new SendmailGmailNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateSeqNoForVisa", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateSeqNoForVisa(string agentID, string terminalID, string UserName, string IpAddress, string TerminalType, decimal sequenceID, ref string strErrorMsg, string strPageName, string FunctionName, string TableName, string ColumnName, string strVisa, string strLength, string curseqNo) {
            object[] results = this.Invoke("GenerateSeqNoForVisa", new object[] {
                        agentID,
                        terminalID,
                        UserName,
                        IpAddress,
                        TerminalType,
                        sequenceID,
                        strErrorMsg,
                        strPageName,
                        FunctionName,
                        TableName,
                        ColumnName,
                        strVisa,
                        strLength,
                        curseqNo});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateSeqNoForVisaAsync(string agentID, string terminalID, string UserName, string IpAddress, string TerminalType, decimal sequenceID, string strErrorMsg, string strPageName, string FunctionName, string TableName, string ColumnName, string strVisa, string strLength, string curseqNo) {
            this.GenerateSeqNoForVisaAsync(agentID, terminalID, UserName, IpAddress, TerminalType, sequenceID, strErrorMsg, strPageName, FunctionName, TableName, ColumnName, strVisa, strLength, curseqNo, null);
        }
        
        /// <remarks/>
        public void GenerateSeqNoForVisaAsync(string agentID, string terminalID, string UserName, string IpAddress, string TerminalType, decimal sequenceID, string strErrorMsg, string strPageName, string FunctionName, string TableName, string ColumnName, string strVisa, string strLength, string curseqNo, object userState) {
            if ((this.GenerateSeqNoForVisaOperationCompleted == null)) {
                this.GenerateSeqNoForVisaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateSeqNoForVisaOperationCompleted);
            }
            this.InvokeAsync("GenerateSeqNoForVisa", new object[] {
                        agentID,
                        terminalID,
                        UserName,
                        IpAddress,
                        TerminalType,
                        sequenceID,
                        strErrorMsg,
                        strPageName,
                        FunctionName,
                        TableName,
                        ColumnName,
                        strVisa,
                        strLength,
                        curseqNo}, this.GenerateSeqNoForVisaOperationCompleted, userState);
        }
        
        private void OnGenerateSeqNoForVisaOperationCompleted(object arg) {
            if ((this.GenerateSeqNoForVisaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateSeqNoForVisaCompleted(this, new GenerateSeqNoForVisaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertVisaOffline", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertVisaOffline(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string strTicketCopy, 
                    string PassportObservImage, 
                    string strMarriageCertificateImage, 
                    string strBirtCertfificateImage, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Education, 
                    string VisitPurpose, 
                    string Duration, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    ref string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string PaxTitle, 
                    string Flag, 
                    string strVODTracID) {
            object[] results = this.Invoke("InsertVisaOffline", new object[] {
                        agentID,
                        strPassportFirstPage,
                        strPassportLastPage,
                        strPhoto,
                        strTicketCopy,
                        PassportObservImage,
                        strMarriageCertificateImage,
                        strBirtCertfificateImage,
                        FirstName,
                        MiddleName,
                        LastName,
                        MobileNumber,
                        EmailId,
                        PassportNo,
                        MaritalStatus,
                        Religion,
                        Education,
                        VisitPurpose,
                        Duration,
                        Profession,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        PNR,
                        RefID,
                        PaxTitle,
                        Flag,
                        strVODTracID});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertVisaOfflineAsync(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string strTicketCopy, 
                    string PassportObservImage, 
                    string strMarriageCertificateImage, 
                    string strBirtCertfificateImage, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Education, 
                    string VisitPurpose, 
                    string Duration, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string PaxTitle, 
                    string Flag, 
                    string strVODTracID) {
            this.InsertVisaOfflineAsync(agentID, strPassportFirstPage, strPassportLastPage, strPhoto, strTicketCopy, PassportObservImage, strMarriageCertificateImage, strBirtCertfificateImage, FirstName, MiddleName, LastName, MobileNumber, EmailId, PassportNo, MaritalStatus, Religion, Education, VisitPurpose, Duration, Profession, terminalID, userName, ipAddress, terminalType, sequenceId, strErrorMsg, lstrPageName, lstrFunName, PNR, RefID, PaxTitle, Flag, strVODTracID, null);
        }
        
        /// <remarks/>
        public void InsertVisaOfflineAsync(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string strTicketCopy, 
                    string PassportObservImage, 
                    string strMarriageCertificateImage, 
                    string strBirtCertfificateImage, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Education, 
                    string VisitPurpose, 
                    string Duration, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string PaxTitle, 
                    string Flag, 
                    string strVODTracID, 
                    object userState) {
            if ((this.InsertVisaOfflineOperationCompleted == null)) {
                this.InsertVisaOfflineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertVisaOfflineOperationCompleted);
            }
            this.InvokeAsync("InsertVisaOffline", new object[] {
                        agentID,
                        strPassportFirstPage,
                        strPassportLastPage,
                        strPhoto,
                        strTicketCopy,
                        PassportObservImage,
                        strMarriageCertificateImage,
                        strBirtCertfificateImage,
                        FirstName,
                        MiddleName,
                        LastName,
                        MobileNumber,
                        EmailId,
                        PassportNo,
                        MaritalStatus,
                        Religion,
                        Education,
                        VisitPurpose,
                        Duration,
                        Profession,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        PNR,
                        RefID,
                        PaxTitle,
                        Flag,
                        strVODTracID}, this.InsertVisaOfflineOperationCompleted, userState);
        }
        
        private void OnInsertVisaOfflineOperationCompleted(object arg) {
            if ((this.InsertVisaOfflineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertVisaOfflineCompleted(this, new InsertVisaOfflineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchPricingcodeForQTKT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchPricingcodeForQTKT(
                    string strConsoleAgentID, 
                    string strAgentID, 
                    string strTerminalID, 
                    string strUserName, 
                    string strBranchID, 
                    string strCRsID, 
                    string strIP, 
                    string strSequence, 
                    string strTerminalType, 
                    string strOrigin, 
                    string strDestination, 
                    string strSector, 
                    string strClass, 
                    string strCabin, 
                    string strTravelDate, 
                    string strArrivalDate, 
                    string strAirlineCode, 
                    string strFlightNo, 
                    string strPageFrom, 
                    ref string strErrorMsg) {
            object[] results = this.Invoke("FetchPricingcodeForQTKT", new object[] {
                        strConsoleAgentID,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strBranchID,
                        strCRsID,
                        strIP,
                        strSequence,
                        strTerminalType,
                        strOrigin,
                        strDestination,
                        strSector,
                        strClass,
                        strCabin,
                        strTravelDate,
                        strArrivalDate,
                        strAirlineCode,
                        strFlightNo,
                        strPageFrom,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchPricingcodeForQTKTAsync(
                    string strConsoleAgentID, 
                    string strAgentID, 
                    string strTerminalID, 
                    string strUserName, 
                    string strBranchID, 
                    string strCRsID, 
                    string strIP, 
                    string strSequence, 
                    string strTerminalType, 
                    string strOrigin, 
                    string strDestination, 
                    string strSector, 
                    string strClass, 
                    string strCabin, 
                    string strTravelDate, 
                    string strArrivalDate, 
                    string strAirlineCode, 
                    string strFlightNo, 
                    string strPageFrom, 
                    string strErrorMsg) {
            this.FetchPricingcodeForQTKTAsync(strConsoleAgentID, strAgentID, strTerminalID, strUserName, strBranchID, strCRsID, strIP, strSequence, strTerminalType, strOrigin, strDestination, strSector, strClass, strCabin, strTravelDate, strArrivalDate, strAirlineCode, strFlightNo, strPageFrom, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void FetchPricingcodeForQTKTAsync(
                    string strConsoleAgentID, 
                    string strAgentID, 
                    string strTerminalID, 
                    string strUserName, 
                    string strBranchID, 
                    string strCRsID, 
                    string strIP, 
                    string strSequence, 
                    string strTerminalType, 
                    string strOrigin, 
                    string strDestination, 
                    string strSector, 
                    string strClass, 
                    string strCabin, 
                    string strTravelDate, 
                    string strArrivalDate, 
                    string strAirlineCode, 
                    string strFlightNo, 
                    string strPageFrom, 
                    string strErrorMsg, 
                    object userState) {
            if ((this.FetchPricingcodeForQTKTOperationCompleted == null)) {
                this.FetchPricingcodeForQTKTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchPricingcodeForQTKTOperationCompleted);
            }
            this.InvokeAsync("FetchPricingcodeForQTKT", new object[] {
                        strConsoleAgentID,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strBranchID,
                        strCRsID,
                        strIP,
                        strSequence,
                        strTerminalType,
                        strOrigin,
                        strDestination,
                        strSector,
                        strClass,
                        strCabin,
                        strTravelDate,
                        strArrivalDate,
                        strAirlineCode,
                        strFlightNo,
                        strPageFrom,
                        strErrorMsg}, this.FetchPricingcodeForQTKTOperationCompleted, userState);
        }
        
        private void OnFetchPricingcodeForQTKTOperationCompleted(object arg) {
            if ((this.FetchPricingcodeForQTKTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchPricingcodeForQTKTCompleted(this, new FetchPricingcodeForQTKTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchThaiVisaBookedHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchThaiVisaBookedHistory(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strFromDate, string strToDate, string strPageName, string strStatus) {
            object[] results = this.Invoke("FetchThaiVisaBookedHistory", new object[] {
                        strAgentId,
                        strTerminalID,
                        strUserName,
                        IPAddress,
                        strSequenceId,
                        strTerminalType,
                        strRiyaPNR,
                        strFromDate,
                        strToDate,
                        strPageName,
                        strStatus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchThaiVisaBookedHistoryAsync(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strFromDate, string strToDate, string strPageName, string strStatus) {
            this.FetchThaiVisaBookedHistoryAsync(strAgentId, strTerminalID, strUserName, IPAddress, strSequenceId, strTerminalType, strRiyaPNR, strFromDate, strToDate, strPageName, strStatus, null);
        }
        
        /// <remarks/>
        public void FetchThaiVisaBookedHistoryAsync(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strFromDate, string strToDate, string strPageName, string strStatus, object userState) {
            if ((this.FetchThaiVisaBookedHistoryOperationCompleted == null)) {
                this.FetchThaiVisaBookedHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchThaiVisaBookedHistoryOperationCompleted);
            }
            this.InvokeAsync("FetchThaiVisaBookedHistory", new object[] {
                        strAgentId,
                        strTerminalID,
                        strUserName,
                        IPAddress,
                        strSequenceId,
                        strTerminalType,
                        strRiyaPNR,
                        strFromDate,
                        strToDate,
                        strPageName,
                        strStatus}, this.FetchThaiVisaBookedHistoryOperationCompleted, userState);
        }
        
        private void OnFetchThaiVisaBookedHistoryOperationCompleted(object arg) {
            if ((this.FetchThaiVisaBookedHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchThaiVisaBookedHistoryCompleted(this, new FetchThaiVisaBookedHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchThaiVisaViewPNR", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchThaiVisaViewPNR(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strRefNo, string strPageName) {
            object[] results = this.Invoke("FetchThaiVisaViewPNR", new object[] {
                        strAgentId,
                        strTerminalID,
                        strUserName,
                        IPAddress,
                        strSequenceId,
                        strTerminalType,
                        strRiyaPNR,
                        strRefNo,
                        strPageName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchThaiVisaViewPNRAsync(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strRefNo, string strPageName) {
            this.FetchThaiVisaViewPNRAsync(strAgentId, strTerminalID, strUserName, IPAddress, strSequenceId, strTerminalType, strRiyaPNR, strRefNo, strPageName, null);
        }
        
        /// <remarks/>
        public void FetchThaiVisaViewPNRAsync(string strAgentId, string strTerminalID, string strUserName, string IPAddress, string strSequenceId, string strTerminalType, string strRiyaPNR, string strRefNo, string strPageName, object userState) {
            if ((this.FetchThaiVisaViewPNROperationCompleted == null)) {
                this.FetchThaiVisaViewPNROperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchThaiVisaViewPNROperationCompleted);
            }
            this.InvokeAsync("FetchThaiVisaViewPNR", new object[] {
                        strAgentId,
                        strTerminalID,
                        strUserName,
                        IPAddress,
                        strSequenceId,
                        strTerminalType,
                        strRiyaPNR,
                        strRefNo,
                        strPageName}, this.FetchThaiVisaViewPNROperationCompleted, userState);
        }
        
        private void OnFetchThaiVisaViewPNROperationCompleted(object arg) {
            if ((this.FetchThaiVisaViewPNRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchThaiVisaViewPNRCompleted(this, new FetchThaiVisaViewPNRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertVisaOfflineNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertVisaOfflineNew(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    ref string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string Flag, 
                    string strVODTracID, 
                    string strPancardImage, 
                    string strHotelbookticket, 
                    string AirBookingticket, 
                    string DepartureFlightBooking, 
                    string InvitationLetter, 
                    string AddressProof, 
                    string IDCardProof, 
                    string AdditionalDocument1, 
                    string AdditionalDocument2, 
                    [System.Xml.Serialization.XmlElementAttribute("TerminalID")] string TerminalID1, 
                    string usrname, 
                    string IP, 
                    [System.Xml.Serialization.XmlElementAttribute("TerminalType")] string TerminalType1, 
                    [System.Xml.Serialization.XmlElementAttribute("SequenceID")] string SequenceID1, 
                    string Pagename, 
                    string Functionname, 
                    string strfirstName, 
                    string strmiddleName, 
                    string strlastName, 
                    string strmobileNumber, 
                    string strEmailId, 
                    string strPassportNum, 
                    string strmaritalstatus, 
                    string strreligion, 
                    string strpancard, 
                    string strDateoftravel, 
                    string strDateofbirth, 
                    string strGender, 
                    string strcountryofbirth, 
                    string strmothername, 
                    string strfathername, 
                    string strplaceofbirth, 
                    string strspousename, 
                    string strprofession, 
                    string strRPNR, 
                    string strPassportIssuedate, 
                    string strPassportExpdate, 
                    string strRefID, 
                    string strFlag, 
                    string strStatus, 
                    string strVisaTrackID, 
                    string strDestination, 
                    string strVisaType) {
            object[] results = this.Invoke("InsertVisaOfflineNew", new object[] {
                        agentID,
                        strPassportFirstPage,
                        strPassportLastPage,
                        strPhoto,
                        FirstName,
                        MiddleName,
                        LastName,
                        MobileNumber,
                        EmailId,
                        PassportNo,
                        MaritalStatus,
                        Religion,
                        Profession,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        PNR,
                        RefID,
                        Flag,
                        strVODTracID,
                        strPancardImage,
                        strHotelbookticket,
                        AirBookingticket,
                        DepartureFlightBooking,
                        InvitationLetter,
                        AddressProof,
                        IDCardProof,
                        AdditionalDocument1,
                        AdditionalDocument2,
                        TerminalID1,
                        usrname,
                        IP,
                        TerminalType1,
                        SequenceID1,
                        Pagename,
                        Functionname,
                        strfirstName,
                        strmiddleName,
                        strlastName,
                        strmobileNumber,
                        strEmailId,
                        strPassportNum,
                        strmaritalstatus,
                        strreligion,
                        strpancard,
                        strDateoftravel,
                        strDateofbirth,
                        strGender,
                        strcountryofbirth,
                        strmothername,
                        strfathername,
                        strplaceofbirth,
                        strspousename,
                        strprofession,
                        strRPNR,
                        strPassportIssuedate,
                        strPassportExpdate,
                        strRefID,
                        strFlag,
                        strStatus,
                        strVisaTrackID,
                        strDestination,
                        strVisaType});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertVisaOfflineNewAsync(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string Flag, 
                    string strVODTracID, 
                    string strPancardImage, 
                    string strHotelbookticket, 
                    string AirBookingticket, 
                    string DepartureFlightBooking, 
                    string InvitationLetter, 
                    string AddressProof, 
                    string IDCardProof, 
                    string AdditionalDocument1, 
                    string AdditionalDocument2, 
                    string TerminalID1, 
                    string usrname, 
                    string IP, 
                    string TerminalType1, 
                    string SequenceID1, 
                    string Pagename, 
                    string Functionname, 
                    string strfirstName, 
                    string strmiddleName, 
                    string strlastName, 
                    string strmobileNumber, 
                    string strEmailId, 
                    string strPassportNum, 
                    string strmaritalstatus, 
                    string strreligion, 
                    string strpancard, 
                    string strDateoftravel, 
                    string strDateofbirth, 
                    string strGender, 
                    string strcountryofbirth, 
                    string strmothername, 
                    string strfathername, 
                    string strplaceofbirth, 
                    string strspousename, 
                    string strprofession, 
                    string strRPNR, 
                    string strPassportIssuedate, 
                    string strPassportExpdate, 
                    string strRefID, 
                    string strFlag, 
                    string strStatus, 
                    string strVisaTrackID, 
                    string strDestination, 
                    string strVisaType) {
            this.InsertVisaOfflineNewAsync(agentID, strPassportFirstPage, strPassportLastPage, strPhoto, FirstName, MiddleName, LastName, MobileNumber, EmailId, PassportNo, MaritalStatus, Religion, Profession, terminalID, userName, ipAddress, terminalType, sequenceId, strErrorMsg, lstrPageName, lstrFunName, PNR, RefID, Flag, strVODTracID, strPancardImage, strHotelbookticket, AirBookingticket, DepartureFlightBooking, InvitationLetter, AddressProof, IDCardProof, AdditionalDocument1, AdditionalDocument2, TerminalID1, usrname, IP, TerminalType1, SequenceID1, Pagename, Functionname, strfirstName, strmiddleName, strlastName, strmobileNumber, strEmailId, strPassportNum, strmaritalstatus, strreligion, strpancard, strDateoftravel, strDateofbirth, strGender, strcountryofbirth, strmothername, strfathername, strplaceofbirth, strspousename, strprofession, strRPNR, strPassportIssuedate, strPassportExpdate, strRefID, strFlag, strStatus, strVisaTrackID, strDestination, strVisaType, null);
        }
        
        /// <remarks/>
        public void InsertVisaOfflineNewAsync(
                    string agentID, 
                    string strPassportFirstPage, 
                    string strPassportLastPage, 
                    string strPhoto, 
                    string FirstName, 
                    string MiddleName, 
                    string LastName, 
                    string MobileNumber, 
                    string EmailId, 
                    string PassportNo, 
                    string MaritalStatus, 
                    string Religion, 
                    string Profession, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceId, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunName, 
                    string PNR, 
                    string RefID, 
                    string Flag, 
                    string strVODTracID, 
                    string strPancardImage, 
                    string strHotelbookticket, 
                    string AirBookingticket, 
                    string DepartureFlightBooking, 
                    string InvitationLetter, 
                    string AddressProof, 
                    string IDCardProof, 
                    string AdditionalDocument1, 
                    string AdditionalDocument2, 
                    string TerminalID1, 
                    string usrname, 
                    string IP, 
                    string TerminalType1, 
                    string SequenceID1, 
                    string Pagename, 
                    string Functionname, 
                    string strfirstName, 
                    string strmiddleName, 
                    string strlastName, 
                    string strmobileNumber, 
                    string strEmailId, 
                    string strPassportNum, 
                    string strmaritalstatus, 
                    string strreligion, 
                    string strpancard, 
                    string strDateoftravel, 
                    string strDateofbirth, 
                    string strGender, 
                    string strcountryofbirth, 
                    string strmothername, 
                    string strfathername, 
                    string strplaceofbirth, 
                    string strspousename, 
                    string strprofession, 
                    string strRPNR, 
                    string strPassportIssuedate, 
                    string strPassportExpdate, 
                    string strRefID, 
                    string strFlag, 
                    string strStatus, 
                    string strVisaTrackID, 
                    string strDestination, 
                    string strVisaType, 
                    object userState) {
            if ((this.InsertVisaOfflineNewOperationCompleted == null)) {
                this.InsertVisaOfflineNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertVisaOfflineNewOperationCompleted);
            }
            this.InvokeAsync("InsertVisaOfflineNew", new object[] {
                        agentID,
                        strPassportFirstPage,
                        strPassportLastPage,
                        strPhoto,
                        FirstName,
                        MiddleName,
                        LastName,
                        MobileNumber,
                        EmailId,
                        PassportNo,
                        MaritalStatus,
                        Religion,
                        Profession,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        PNR,
                        RefID,
                        Flag,
                        strVODTracID,
                        strPancardImage,
                        strHotelbookticket,
                        AirBookingticket,
                        DepartureFlightBooking,
                        InvitationLetter,
                        AddressProof,
                        IDCardProof,
                        AdditionalDocument1,
                        AdditionalDocument2,
                        TerminalID1,
                        usrname,
                        IP,
                        TerminalType1,
                        SequenceID1,
                        Pagename,
                        Functionname,
                        strfirstName,
                        strmiddleName,
                        strlastName,
                        strmobileNumber,
                        strEmailId,
                        strPassportNum,
                        strmaritalstatus,
                        strreligion,
                        strpancard,
                        strDateoftravel,
                        strDateofbirth,
                        strGender,
                        strcountryofbirth,
                        strmothername,
                        strfathername,
                        strplaceofbirth,
                        strspousename,
                        strprofession,
                        strRPNR,
                        strPassportIssuedate,
                        strPassportExpdate,
                        strRefID,
                        strFlag,
                        strStatus,
                        strVisaTrackID,
                        strDestination,
                        strVisaType}, this.InsertVisaOfflineNewOperationCompleted, userState);
        }
        
        private void OnInsertVisaOfflineNewOperationCompleted(object arg) {
            if ((this.InsertVisaOfflineNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertVisaOfflineNewCompleted(this, new InsertVisaOfflineNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBulkMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FetchBulkMail(
                    string strCmpyID, 
                    string strEmpId, 
                    string strEmpMailId, 
                    string strCCMailId, 
                    string strBmlCcMailId, 
                    string strSubject, 
                    string strMailContent, 
                    string strCreatedBy, 
                    string strAttachment, 
                    string GroupID, 
                    string strAgentID, 
                    string strTerminalId, 
                    string sequenceID, 
                    string Ipaddress, 
                    string TerminalType, 
                    string BranchId, 
                    ref string StrError) {
            object[] results = this.Invoke("FetchBulkMail", new object[] {
                        strCmpyID,
                        strEmpId,
                        strEmpMailId,
                        strCCMailId,
                        strBmlCcMailId,
                        strSubject,
                        strMailContent,
                        strCreatedBy,
                        strAttachment,
                        GroupID,
                        strAgentID,
                        strTerminalId,
                        sequenceID,
                        Ipaddress,
                        TerminalType,
                        BranchId,
                        StrError});
            StrError = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBulkMailAsync(
                    string strCmpyID, 
                    string strEmpId, 
                    string strEmpMailId, 
                    string strCCMailId, 
                    string strBmlCcMailId, 
                    string strSubject, 
                    string strMailContent, 
                    string strCreatedBy, 
                    string strAttachment, 
                    string GroupID, 
                    string strAgentID, 
                    string strTerminalId, 
                    string sequenceID, 
                    string Ipaddress, 
                    string TerminalType, 
                    string BranchId, 
                    string StrError) {
            this.FetchBulkMailAsync(strCmpyID, strEmpId, strEmpMailId, strCCMailId, strBmlCcMailId, strSubject, strMailContent, strCreatedBy, strAttachment, GroupID, strAgentID, strTerminalId, sequenceID, Ipaddress, TerminalType, BranchId, StrError, null);
        }
        
        /// <remarks/>
        public void FetchBulkMailAsync(
                    string strCmpyID, 
                    string strEmpId, 
                    string strEmpMailId, 
                    string strCCMailId, 
                    string strBmlCcMailId, 
                    string strSubject, 
                    string strMailContent, 
                    string strCreatedBy, 
                    string strAttachment, 
                    string GroupID, 
                    string strAgentID, 
                    string strTerminalId, 
                    string sequenceID, 
                    string Ipaddress, 
                    string TerminalType, 
                    string BranchId, 
                    string StrError, 
                    object userState) {
            if ((this.FetchBulkMailOperationCompleted == null)) {
                this.FetchBulkMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBulkMailOperationCompleted);
            }
            this.InvokeAsync("FetchBulkMail", new object[] {
                        strCmpyID,
                        strEmpId,
                        strEmpMailId,
                        strCCMailId,
                        strBmlCcMailId,
                        strSubject,
                        strMailContent,
                        strCreatedBy,
                        strAttachment,
                        GroupID,
                        strAgentID,
                        strTerminalId,
                        sequenceID,
                        Ipaddress,
                        TerminalType,
                        BranchId,
                        StrError}, this.FetchBulkMailOperationCompleted, userState);
        }
        
        private void OnFetchBulkMailOperationCompleted(object arg) {
            if ((this.FetchBulkMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBulkMailCompleted(this, new FetchBulkMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertMail(string strAgentID, string strTerminalId, string sequenceID, string Ipaddress, string TerminalType, string agenttype, ref System.Data.DataSet ds_set) {
            object[] results = this.Invoke("InsertMail", new object[] {
                        strAgentID,
                        strTerminalId,
                        sequenceID,
                        Ipaddress,
                        TerminalType,
                        agenttype,
                        ds_set});
            ds_set = ((System.Data.DataSet)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMailAsync(string strAgentID, string strTerminalId, string sequenceID, string Ipaddress, string TerminalType, string agenttype, System.Data.DataSet ds_set) {
            this.InsertMailAsync(strAgentID, strTerminalId, sequenceID, Ipaddress, TerminalType, agenttype, ds_set, null);
        }
        
        /// <remarks/>
        public void InsertMailAsync(string strAgentID, string strTerminalId, string sequenceID, string Ipaddress, string TerminalType, string agenttype, System.Data.DataSet ds_set, object userState) {
            if ((this.InsertMailOperationCompleted == null)) {
                this.InsertMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMailOperationCompleted);
            }
            this.InvokeAsync("InsertMail", new object[] {
                        strAgentID,
                        strTerminalId,
                        sequenceID,
                        Ipaddress,
                        TerminalType,
                        agenttype,
                        ds_set}, this.InsertMailOperationCompleted, userState);
        }
        
        private void OnInsertMailOperationCompleted(object arg) {
            if ((this.InsertMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMailCompleted(this, new InsertMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Login_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Login_Details(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, ref string strErrorMsg, string lstrPageName, string lstrFunName, string strModule) {
            object[] results = this.Invoke("Fetch_Login_Details", new object[] {
                        TYPE,
                        NAME,
                        PWD,
                        IPAddress,
                        terminalID,
                        terminal,
                        versionNo,
                        processImageID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        strModule});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Login_DetailsAsync(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, string strErrorMsg, string lstrPageName, string lstrFunName, string strModule) {
            this.Fetch_Login_DetailsAsync(TYPE, NAME, PWD, IPAddress, terminalID, terminal, versionNo, processImageID, strErrorMsg, lstrPageName, lstrFunName, strModule, null);
        }
        
        /// <remarks/>
        public void Fetch_Login_DetailsAsync(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, string strErrorMsg, string lstrPageName, string lstrFunName, string strModule, object userState) {
            if ((this.Fetch_Login_DetailsOperationCompleted == null)) {
                this.Fetch_Login_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Login_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Login_Details", new object[] {
                        TYPE,
                        NAME,
                        PWD,
                        IPAddress,
                        terminalID,
                        terminal,
                        versionNo,
                        processImageID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName,
                        strModule}, this.Fetch_Login_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Login_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Login_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Login_DetailsCompleted(this, new Fetch_Login_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_WebHomeLogin_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_WebHomeLogin_Details(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, ref string strErrorMsg, string lstrPageName, string lstrFunName) {
            object[] results = this.Invoke("Fetch_WebHomeLogin_Details", new object[] {
                        TYPE,
                        NAME,
                        PWD,
                        IPAddress,
                        terminalID,
                        terminal,
                        versionNo,
                        processImageID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_WebHomeLogin_DetailsAsync(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, string strErrorMsg, string lstrPageName, string lstrFunName) {
            this.Fetch_WebHomeLogin_DetailsAsync(TYPE, NAME, PWD, IPAddress, terminalID, terminal, versionNo, processImageID, strErrorMsg, lstrPageName, lstrFunName, null);
        }
        
        /// <remarks/>
        public void Fetch_WebHomeLogin_DetailsAsync(string TYPE, string NAME, string PWD, string IPAddress, string terminalID, char terminal, string versionNo, string processImageID, string strErrorMsg, string lstrPageName, string lstrFunName, object userState) {
            if ((this.Fetch_WebHomeLogin_DetailsOperationCompleted == null)) {
                this.Fetch_WebHomeLogin_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_WebHomeLogin_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_WebHomeLogin_Details", new object[] {
                        TYPE,
                        NAME,
                        PWD,
                        IPAddress,
                        terminalID,
                        terminal,
                        versionNo,
                        processImageID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName}, this.Fetch_WebHomeLogin_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_WebHomeLogin_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_WebHomeLogin_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_WebHomeLogin_DetailsCompleted(this, new Fetch_WebHomeLogin_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/INSERT_LOGIN_HISTORY", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string INSERT_LOGIN_HISTORY(decimal seqid, string agentID, string terminalId, string userName, string PWD, string SECKEY, string TERMINALTYPE, string IPADDRESS, string VERSION, string PREVIOUS_LOGIN_DATE, string PREVIOUS_SEQ_ID, string USER_PC_DETAILS) {
            object[] results = this.Invoke("INSERT_LOGIN_HISTORY", new object[] {
                        seqid,
                        agentID,
                        terminalId,
                        userName,
                        PWD,
                        SECKEY,
                        TERMINALTYPE,
                        IPADDRESS,
                        VERSION,
                        PREVIOUS_LOGIN_DATE,
                        PREVIOUS_SEQ_ID,
                        USER_PC_DETAILS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void INSERT_LOGIN_HISTORYAsync(decimal seqid, string agentID, string terminalId, string userName, string PWD, string SECKEY, string TERMINALTYPE, string IPADDRESS, string VERSION, string PREVIOUS_LOGIN_DATE, string PREVIOUS_SEQ_ID, string USER_PC_DETAILS) {
            this.INSERT_LOGIN_HISTORYAsync(seqid, agentID, terminalId, userName, PWD, SECKEY, TERMINALTYPE, IPADDRESS, VERSION, PREVIOUS_LOGIN_DATE, PREVIOUS_SEQ_ID, USER_PC_DETAILS, null);
        }
        
        /// <remarks/>
        public void INSERT_LOGIN_HISTORYAsync(decimal seqid, string agentID, string terminalId, string userName, string PWD, string SECKEY, string TERMINALTYPE, string IPADDRESS, string VERSION, string PREVIOUS_LOGIN_DATE, string PREVIOUS_SEQ_ID, string USER_PC_DETAILS, object userState) {
            if ((this.INSERT_LOGIN_HISTORYOperationCompleted == null)) {
                this.INSERT_LOGIN_HISTORYOperationCompleted = new System.Threading.SendOrPostCallback(this.OnINSERT_LOGIN_HISTORYOperationCompleted);
            }
            this.InvokeAsync("INSERT_LOGIN_HISTORY", new object[] {
                        seqid,
                        agentID,
                        terminalId,
                        userName,
                        PWD,
                        SECKEY,
                        TERMINALTYPE,
                        IPADDRESS,
                        VERSION,
                        PREVIOUS_LOGIN_DATE,
                        PREVIOUS_SEQ_ID,
                        USER_PC_DETAILS}, this.INSERT_LOGIN_HISTORYOperationCompleted, userState);
        }
        
        private void OnINSERT_LOGIN_HISTORYOperationCompleted(object arg) {
            if ((this.INSERT_LOGIN_HISTORYCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INSERT_LOGIN_HISTORYCompleted(this, new INSERT_LOGIN_HISTORYCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Login_User_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Login_User_Details(string Agentid, string terminalid, string username, string password, string ipaddress, string remarks, string status, string Platform, string terminaltype) {
            object[] results = this.Invoke("Insert_Login_User_Details", new object[] {
                        Agentid,
                        terminalid,
                        username,
                        password,
                        ipaddress,
                        remarks,
                        status,
                        Platform,
                        terminaltype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Login_User_DetailsAsync(string Agentid, string terminalid, string username, string password, string ipaddress, string remarks, string status, string Platform, string terminaltype) {
            this.Insert_Login_User_DetailsAsync(Agentid, terminalid, username, password, ipaddress, remarks, status, Platform, terminaltype, null);
        }
        
        /// <remarks/>
        public void Insert_Login_User_DetailsAsync(string Agentid, string terminalid, string username, string password, string ipaddress, string remarks, string status, string Platform, string terminaltype, object userState) {
            if ((this.Insert_Login_User_DetailsOperationCompleted == null)) {
                this.Insert_Login_User_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Login_User_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Login_User_Details", new object[] {
                        Agentid,
                        terminalid,
                        username,
                        password,
                        ipaddress,
                        remarks,
                        status,
                        Platform,
                        terminaltype}, this.Insert_Login_User_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Login_User_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Login_User_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Login_User_DetailsCompleted(this, new Insert_Login_User_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_All_Agent_Branch_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_All_Agent_Branch_Details(string IPAddress, string UserName, string Password, string terminalID, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_All_Agent_Branch_Details", new object[] {
                        IPAddress,
                        UserName,
                        Password,
                        terminalID,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_All_Agent_Branch_DetailsAsync(string IPAddress, string UserName, string Password, string terminalID, string strErrorMsg) {
            this.Fetch_All_Agent_Branch_DetailsAsync(IPAddress, UserName, Password, terminalID, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_All_Agent_Branch_DetailsAsync(string IPAddress, string UserName, string Password, string terminalID, string strErrorMsg, object userState) {
            if ((this.Fetch_All_Agent_Branch_DetailsOperationCompleted == null)) {
                this.Fetch_All_Agent_Branch_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_All_Agent_Branch_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_All_Agent_Branch_Details", new object[] {
                        IPAddress,
                        UserName,
                        Password,
                        terminalID,
                        strErrorMsg}, this.Fetch_All_Agent_Branch_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_All_Agent_Branch_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_All_Agent_Branch_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_All_Agent_Branch_DetailsCompleted(this, new Fetch_All_Agent_Branch_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_All_Agent_Branch_DetailsByte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Fetch_All_Agent_Branch_DetailsByte(string IPAddress, string UserName, string Password, string terminalID, ref string strErrorMsg, string strModule) {
            object[] results = this.Invoke("Fetch_All_Agent_Branch_DetailsByte", new object[] {
                        IPAddress,
                        UserName,
                        Password,
                        terminalID,
                        strErrorMsg,
                        strModule});
            strErrorMsg = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_All_Agent_Branch_DetailsByteAsync(string IPAddress, string UserName, string Password, string terminalID, string strErrorMsg, string strModule) {
            this.Fetch_All_Agent_Branch_DetailsByteAsync(IPAddress, UserName, Password, terminalID, strErrorMsg, strModule, null);
        }
        
        /// <remarks/>
        public void Fetch_All_Agent_Branch_DetailsByteAsync(string IPAddress, string UserName, string Password, string terminalID, string strErrorMsg, string strModule, object userState) {
            if ((this.Fetch_All_Agent_Branch_DetailsByteOperationCompleted == null)) {
                this.Fetch_All_Agent_Branch_DetailsByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_All_Agent_Branch_DetailsByteOperationCompleted);
            }
            this.InvokeAsync("Fetch_All_Agent_Branch_DetailsByte", new object[] {
                        IPAddress,
                        UserName,
                        Password,
                        terminalID,
                        strErrorMsg,
                        strModule}, this.Fetch_All_Agent_Branch_DetailsByteOperationCompleted, userState);
        }
        
        private void OnFetch_All_Agent_Branch_DetailsByteOperationCompleted(object arg) {
            if ((this.Fetch_All_Agent_Branch_DetailsByteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_All_Agent_Branch_DetailsByteCompleted(this, new Fetch_All_Agent_Branch_DetailsByteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string changePassword(string agentID, string terminalID, string loginName, string oldPassword, string newpassword, string terminalType, string ipAddress, decimal sequenceId, ref string strErrorMsg, string lstrPageName, string lstrFunName) {
            object[] results = this.Invoke("changePassword", new object[] {
                        agentID,
                        terminalID,
                        loginName,
                        oldPassword,
                        newpassword,
                        terminalType,
                        ipAddress,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void changePasswordAsync(string agentID, string terminalID, string loginName, string oldPassword, string newpassword, string terminalType, string ipAddress, decimal sequenceId, string strErrorMsg, string lstrPageName, string lstrFunName) {
            this.changePasswordAsync(agentID, terminalID, loginName, oldPassword, newpassword, terminalType, ipAddress, sequenceId, strErrorMsg, lstrPageName, lstrFunName, null);
        }
        
        /// <remarks/>
        public void changePasswordAsync(string agentID, string terminalID, string loginName, string oldPassword, string newpassword, string terminalType, string ipAddress, decimal sequenceId, string strErrorMsg, string lstrPageName, string lstrFunName, object userState) {
            if ((this.changePasswordOperationCompleted == null)) {
                this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
            }
            this.InvokeAsync("changePassword", new object[] {
                        agentID,
                        terminalID,
                        loginName,
                        oldPassword,
                        newpassword,
                        terminalType,
                        ipAddress,
                        sequenceId,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName}, this.changePasswordOperationCompleted, userState);
        }
        
        private void OnchangePasswordOperationCompleted(object arg) {
            if ((this.changePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePasswordCompleted(this, new changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBrBookedHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchBrBookedHistory(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string TRAVELTODATE, 
                    string strMobileNo) {
            object[] results = this.Invoke("FetchBrBookedHistory", new object[] {
                        S_PNR,
                        CRS_PNR,
                        AIR_PNR,
                        AGENT_ID,
                        STATUS,
                        FROMDATE,
                        TODATE,
                        TERMINALID,
                        USERNAME,
                        PAYMENTMODE,
                        AIRLINE_CODE,
                        MASTERDATA,
                        FIRSTNAME,
                        LASTNAME,
                        TRAVELDATE,
                        BLOCKEDDATE,
                        AIRPORTID,
                        SEQUENCEID,
                        IPADDRESS,
                        strEmpId,
                        TRAVELTODATE,
                        strMobileNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBrBookedHistoryAsync(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string TRAVELTODATE, 
                    string strMobileNo) {
            this.FetchBrBookedHistoryAsync(S_PNR, CRS_PNR, AIR_PNR, AGENT_ID, STATUS, FROMDATE, TODATE, TERMINALID, USERNAME, PAYMENTMODE, AIRLINE_CODE, MASTERDATA, FIRSTNAME, LASTNAME, TRAVELDATE, BLOCKEDDATE, AIRPORTID, SEQUENCEID, IPADDRESS, strEmpId, TRAVELTODATE, strMobileNo, null);
        }
        
        /// <remarks/>
        public void FetchBrBookedHistoryAsync(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string TRAVELTODATE, 
                    string strMobileNo, 
                    object userState) {
            if ((this.FetchBrBookedHistoryOperationCompleted == null)) {
                this.FetchBrBookedHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBrBookedHistoryOperationCompleted);
            }
            this.InvokeAsync("FetchBrBookedHistory", new object[] {
                        S_PNR,
                        CRS_PNR,
                        AIR_PNR,
                        AGENT_ID,
                        STATUS,
                        FROMDATE,
                        TODATE,
                        TERMINALID,
                        USERNAME,
                        PAYMENTMODE,
                        AIRLINE_CODE,
                        MASTERDATA,
                        FIRSTNAME,
                        LASTNAME,
                        TRAVELDATE,
                        BLOCKEDDATE,
                        AIRPORTID,
                        SEQUENCEID,
                        IPADDRESS,
                        strEmpId,
                        TRAVELTODATE,
                        strMobileNo}, this.FetchBrBookedHistoryOperationCompleted, userState);
        }
        
        private void OnFetchBrBookedHistoryOperationCompleted(object arg) {
            if ((this.FetchBrBookedHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBrBookedHistoryCompleted(this, new FetchBrBookedHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Pnr_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Pnr_Details(string agentID, string PNR, string airLinePnr, string crsPnr, string rescheduleStatus, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, ref string strErrorMsg, string lstrPageName, string lstrFunName) {
            object[] results = this.Invoke("Fetch_Pnr_Details", new object[] {
                        agentID,
                        PNR,
                        airLinePnr,
                        crsPnr,
                        rescheduleStatus,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Pnr_DetailsAsync(string agentID, string PNR, string airLinePnr, string crsPnr, string rescheduleStatus, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string strErrorMsg, string lstrPageName, string lstrFunName) {
            this.Fetch_Pnr_DetailsAsync(agentID, PNR, airLinePnr, crsPnr, rescheduleStatus, terminalID, userName, ipAddress, terminalType, sequenceID, strErrorMsg, lstrPageName, lstrFunName, null);
        }
        
        /// <remarks/>
        public void Fetch_Pnr_DetailsAsync(string agentID, string PNR, string airLinePnr, string crsPnr, string rescheduleStatus, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string strErrorMsg, string lstrPageName, string lstrFunName, object userState) {
            if ((this.Fetch_Pnr_DetailsOperationCompleted == null)) {
                this.Fetch_Pnr_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Pnr_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Pnr_Details", new object[] {
                        agentID,
                        PNR,
                        airLinePnr,
                        crsPnr,
                        rescheduleStatus,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunName}, this.Fetch_Pnr_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Pnr_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Pnr_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Pnr_DetailsCompleted(this, new Fetch_Pnr_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_BUS_BookedHistory_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_BUS_BookedHistory_Details(
                    string RaysPnr, 
                    string loginAgentID, 
                    string BusPnr, 
                    string status, 
                    string fromDate, 
                    string toDate, 
                    string terminalUser, 
                    string loginUserName, 
                    string paymentMode, 
                    string masterData, 
                    string PaxName, 
                    string travelDate, 
                    string OperatorName, 
                    string BusType, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    ref string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFuncName, 
                    string POSTID, 
                    string EMPID) {
            object[] results = this.Invoke("Fetch_BUS_BookedHistory_Details", new object[] {
                        RaysPnr,
                        loginAgentID,
                        BusPnr,
                        status,
                        fromDate,
                        toDate,
                        terminalUser,
                        loginUserName,
                        paymentMode,
                        masterData,
                        PaxName,
                        travelDate,
                        OperatorName,
                        BusType,
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFuncName,
                        POSTID,
                        EMPID});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_BUS_BookedHistory_DetailsAsync(
                    string RaysPnr, 
                    string loginAgentID, 
                    string BusPnr, 
                    string status, 
                    string fromDate, 
                    string toDate, 
                    string terminalUser, 
                    string loginUserName, 
                    string paymentMode, 
                    string masterData, 
                    string PaxName, 
                    string travelDate, 
                    string OperatorName, 
                    string BusType, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFuncName, 
                    string POSTID, 
                    string EMPID) {
            this.Fetch_BUS_BookedHistory_DetailsAsync(RaysPnr, loginAgentID, BusPnr, status, fromDate, toDate, terminalUser, loginUserName, paymentMode, masterData, PaxName, travelDate, OperatorName, BusType, agentID, terminalID, userName, ipAddress, terminalType, sequenceID, strErrorMsg, lstrPageName, lstrFuncName, POSTID, EMPID, null);
        }
        
        /// <remarks/>
        public void Fetch_BUS_BookedHistory_DetailsAsync(
                    string RaysPnr, 
                    string loginAgentID, 
                    string BusPnr, 
                    string status, 
                    string fromDate, 
                    string toDate, 
                    string terminalUser, 
                    string loginUserName, 
                    string paymentMode, 
                    string masterData, 
                    string PaxName, 
                    string travelDate, 
                    string OperatorName, 
                    string BusType, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFuncName, 
                    string POSTID, 
                    string EMPID, 
                    object userState) {
            if ((this.Fetch_BUS_BookedHistory_DetailsOperationCompleted == null)) {
                this.Fetch_BUS_BookedHistory_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_BUS_BookedHistory_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_BUS_BookedHistory_Details", new object[] {
                        RaysPnr,
                        loginAgentID,
                        BusPnr,
                        status,
                        fromDate,
                        toDate,
                        terminalUser,
                        loginUserName,
                        paymentMode,
                        masterData,
                        PaxName,
                        travelDate,
                        OperatorName,
                        BusType,
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFuncName,
                        POSTID,
                        EMPID}, this.Fetch_BUS_BookedHistory_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_BUS_BookedHistory_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_BUS_BookedHistory_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_BUS_BookedHistory_DetailsCompleted(this, new Fetch_BUS_BookedHistory_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BusPnrdetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BusPnrdetails(string POSTID, string EMPID, string RaysPnr, string BusPnr, ref string strErrorMsg, ref System.Data.DataSet dsresult, string lstrPageName, string lstrFuncName, string ipAddress, string userName, string terminalType, string sequenceID) {
            object[] results = this.Invoke("BusPnrdetails", new object[] {
                        POSTID,
                        EMPID,
                        RaysPnr,
                        BusPnr,
                        strErrorMsg,
                        dsresult,
                        lstrPageName,
                        lstrFuncName,
                        ipAddress,
                        userName,
                        terminalType,
                        sequenceID});
            strErrorMsg = ((string)(results[1]));
            dsresult = ((System.Data.DataSet)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BusPnrdetailsAsync(string POSTID, string EMPID, string RaysPnr, string BusPnr, string strErrorMsg, System.Data.DataSet dsresult, string lstrPageName, string lstrFuncName, string ipAddress, string userName, string terminalType, string sequenceID) {
            this.BusPnrdetailsAsync(POSTID, EMPID, RaysPnr, BusPnr, strErrorMsg, dsresult, lstrPageName, lstrFuncName, ipAddress, userName, terminalType, sequenceID, null);
        }
        
        /// <remarks/>
        public void BusPnrdetailsAsync(string POSTID, string EMPID, string RaysPnr, string BusPnr, string strErrorMsg, System.Data.DataSet dsresult, string lstrPageName, string lstrFuncName, string ipAddress, string userName, string terminalType, string sequenceID, object userState) {
            if ((this.BusPnrdetailsOperationCompleted == null)) {
                this.BusPnrdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBusPnrdetailsOperationCompleted);
            }
            this.InvokeAsync("BusPnrdetails", new object[] {
                        POSTID,
                        EMPID,
                        RaysPnr,
                        BusPnr,
                        strErrorMsg,
                        dsresult,
                        lstrPageName,
                        lstrFuncName,
                        ipAddress,
                        userName,
                        terminalType,
                        sequenceID}, this.BusPnrdetailsOperationCompleted, userState);
        }
        
        private void OnBusPnrdetailsOperationCompleted(object arg) {
            if ((this.BusPnrdetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BusPnrdetailsCompleted(this, new BusPnrdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCompanySuperuser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchCompanySuperuser(string strCompanyid, string strUserid, string strCompanys, string strFlag) {
            object[] results = this.Invoke("FetchCompanySuperuser", new object[] {
                        strCompanyid,
                        strUserid,
                        strCompanys,
                        strFlag});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCompanySuperuserAsync(string strCompanyid, string strUserid, string strCompanys, string strFlag) {
            this.FetchCompanySuperuserAsync(strCompanyid, strUserid, strCompanys, strFlag, null);
        }
        
        /// <remarks/>
        public void FetchCompanySuperuserAsync(string strCompanyid, string strUserid, string strCompanys, string strFlag, object userState) {
            if ((this.FetchCompanySuperuserOperationCompleted == null)) {
                this.FetchCompanySuperuserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCompanySuperuserOperationCompleted);
            }
            this.InvokeAsync("FetchCompanySuperuser", new object[] {
                        strCompanyid,
                        strUserid,
                        strCompanys,
                        strFlag}, this.FetchCompanySuperuserOperationCompleted, userState);
        }
        
        private void OnFetchCompanySuperuserOperationCompleted(object arg) {
            if ((this.FetchCompanySuperuserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCompanySuperuserCompleted(this, new FetchCompanySuperuserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Employee_details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Employee_details(string StrUserCode, string strEmp_mail_id, string strcompanyid, string struserid, string strusername, string Ipaddress, string Sequenceno) {
            object[] results = this.Invoke("Fetch_Employee_details", new object[] {
                        StrUserCode,
                        strEmp_mail_id,
                        strcompanyid,
                        struserid,
                        strusername,
                        Ipaddress,
                        Sequenceno});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Employee_detailsAsync(string StrUserCode, string strEmp_mail_id, string strcompanyid, string struserid, string strusername, string Ipaddress, string Sequenceno) {
            this.Fetch_Employee_detailsAsync(StrUserCode, strEmp_mail_id, strcompanyid, struserid, strusername, Ipaddress, Sequenceno, null);
        }
        
        /// <remarks/>
        public void Fetch_Employee_detailsAsync(string StrUserCode, string strEmp_mail_id, string strcompanyid, string struserid, string strusername, string Ipaddress, string Sequenceno, object userState) {
            if ((this.Fetch_Employee_detailsOperationCompleted == null)) {
                this.Fetch_Employee_detailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Employee_detailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Employee_details", new object[] {
                        StrUserCode,
                        strEmp_mail_id,
                        strcompanyid,
                        struserid,
                        strusername,
                        Ipaddress,
                        Sequenceno}, this.Fetch_Employee_detailsOperationCompleted, userState);
        }
        
        private void OnFetch_Employee_detailsOperationCompleted(object arg) {
            if ((this.Fetch_Employee_detailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Employee_detailsCompleted(this, new Fetch_Employee_detailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateTrackID_Pg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GenerateTrackID_Pg(string prefix, string productID, ref string strResult) {
            object[] results = this.Invoke("GenerateTrackID_Pg", new object[] {
                        prefix,
                        productID,
                        strResult});
            strResult = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateTrackID_PgAsync(string prefix, string productID, string strResult) {
            this.GenerateTrackID_PgAsync(prefix, productID, strResult, null);
        }
        
        /// <remarks/>
        public void GenerateTrackID_PgAsync(string prefix, string productID, string strResult, object userState) {
            if ((this.GenerateTrackID_PgOperationCompleted == null)) {
                this.GenerateTrackID_PgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateTrackID_PgOperationCompleted);
            }
            this.InvokeAsync("GenerateTrackID_Pg", new object[] {
                        prefix,
                        productID,
                        strResult}, this.GenerateTrackID_PgOperationCompleted, userState);
        }
        
        private void OnGenerateTrackID_PgOperationCompleted(object arg) {
            if ((this.GenerateTrackID_PgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateTrackID_PgCompleted(this, new GenerateTrackID_PgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Payment_Gateway_Track", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_Payment_Gateway_Track(
                    string airlineTrackID, 
                    string trackID, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string status, 
                    string remarks, 
                    string paymentID, 
                    string ticketAmount, 
                    string AddressDetail, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strPaymentGateWayID, 
                    string BookingType, 
                    string serviceCharge, 
                    string ServiceTax, 
                    string DiscountCode, 
                    string DiscountAmount, 
                    ref string strErrorMsg, 
                    string strPGDetails, 
                    string strProductType, 
                    string CheckPG, 
                    string ContactNO, 
                    string EmailID, 
                    string strPGBookingServicefee, 
                    string strPGBookingServicetax, 
                    string strPGCardtype, 
                    string strCorpId, 
                    string strBranchId, 
                    string StrPaymentReq) {
            object[] results = this.Invoke("Insert_Payment_Gateway_Track", new object[] {
                        airlineTrackID,
                        trackID,
                        agentID,
                        terminalID,
                        userName,
                        status,
                        remarks,
                        paymentID,
                        ticketAmount,
                        AddressDetail,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strPaymentGateWayID,
                        BookingType,
                        serviceCharge,
                        ServiceTax,
                        DiscountCode,
                        DiscountAmount,
                        strErrorMsg,
                        strPGDetails,
                        strProductType,
                        CheckPG,
                        ContactNO,
                        EmailID,
                        strPGBookingServicefee,
                        strPGBookingServicetax,
                        strPGCardtype,
                        strCorpId,
                        strBranchId,
                        StrPaymentReq});
            strErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Payment_Gateway_TrackAsync(
                    string airlineTrackID, 
                    string trackID, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string status, 
                    string remarks, 
                    string paymentID, 
                    string ticketAmount, 
                    string AddressDetail, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strPaymentGateWayID, 
                    string BookingType, 
                    string serviceCharge, 
                    string ServiceTax, 
                    string DiscountCode, 
                    string DiscountAmount, 
                    string strErrorMsg, 
                    string strPGDetails, 
                    string strProductType, 
                    string CheckPG, 
                    string ContactNO, 
                    string EmailID, 
                    string strPGBookingServicefee, 
                    string strPGBookingServicetax, 
                    string strPGCardtype, 
                    string strCorpId, 
                    string strBranchId, 
                    string StrPaymentReq) {
            this.Insert_Payment_Gateway_TrackAsync(airlineTrackID, trackID, agentID, terminalID, userName, status, remarks, paymentID, ticketAmount, AddressDetail, ipAddress, terminalType, sequenceID, strPaymentGateWayID, BookingType, serviceCharge, ServiceTax, DiscountCode, DiscountAmount, strErrorMsg, strPGDetails, strProductType, CheckPG, ContactNO, EmailID, strPGBookingServicefee, strPGBookingServicetax, strPGCardtype, strCorpId, strBranchId, StrPaymentReq, null);
        }
        
        /// <remarks/>
        public void Insert_Payment_Gateway_TrackAsync(
                    string airlineTrackID, 
                    string trackID, 
                    string agentID, 
                    string terminalID, 
                    string userName, 
                    string status, 
                    string remarks, 
                    string paymentID, 
                    string ticketAmount, 
                    string AddressDetail, 
                    string ipAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strPaymentGateWayID, 
                    string BookingType, 
                    string serviceCharge, 
                    string ServiceTax, 
                    string DiscountCode, 
                    string DiscountAmount, 
                    string strErrorMsg, 
                    string strPGDetails, 
                    string strProductType, 
                    string CheckPG, 
                    string ContactNO, 
                    string EmailID, 
                    string strPGBookingServicefee, 
                    string strPGBookingServicetax, 
                    string strPGCardtype, 
                    string strCorpId, 
                    string strBranchId, 
                    string StrPaymentReq, 
                    object userState) {
            if ((this.Insert_Payment_Gateway_TrackOperationCompleted == null)) {
                this.Insert_Payment_Gateway_TrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Payment_Gateway_TrackOperationCompleted);
            }
            this.InvokeAsync("Insert_Payment_Gateway_Track", new object[] {
                        airlineTrackID,
                        trackID,
                        agentID,
                        terminalID,
                        userName,
                        status,
                        remarks,
                        paymentID,
                        ticketAmount,
                        AddressDetail,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        strPaymentGateWayID,
                        BookingType,
                        serviceCharge,
                        ServiceTax,
                        DiscountCode,
                        DiscountAmount,
                        strErrorMsg,
                        strPGDetails,
                        strProductType,
                        CheckPG,
                        ContactNO,
                        EmailID,
                        strPGBookingServicefee,
                        strPGBookingServicetax,
                        strPGCardtype,
                        strCorpId,
                        strBranchId,
                        StrPaymentReq}, this.Insert_Payment_Gateway_TrackOperationCompleted, userState);
        }
        
        private void OnInsert_Payment_Gateway_TrackOperationCompleted(object arg) {
            if ((this.Insert_Payment_Gateway_TrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Payment_Gateway_TrackCompleted(this, new Insert_Payment_Gateway_TrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_PG_Payment_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Fetch_PG_Payment_Details(string trackID, string strPG, ref string strResult, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_PG_Payment_Details", new object[] {
                        trackID,
                        strPG,
                        strResult,
                        strErrorMsg});
            strResult = ((string)(results[1]));
            strErrorMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_PG_Payment_DetailsAsync(string trackID, string strPG, string strResult, string strErrorMsg) {
            this.Fetch_PG_Payment_DetailsAsync(trackID, strPG, strResult, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_PG_Payment_DetailsAsync(string trackID, string strPG, string strResult, string strErrorMsg, object userState) {
            if ((this.Fetch_PG_Payment_DetailsOperationCompleted == null)) {
                this.Fetch_PG_Payment_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_PG_Payment_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_PG_Payment_Details", new object[] {
                        trackID,
                        strPG,
                        strResult,
                        strErrorMsg}, this.Fetch_PG_Payment_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_PG_Payment_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_PG_Payment_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_PG_Payment_DetailsCompleted(this, new Fetch_PG_Payment_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_PG_Payment_Details_V3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Fetch_PG_Payment_Details_V3(string trackID, string strPG, ref string strResult, ref string strErrorMsg, string strAgentID, string strTerminalId, string strTerminalType, string strSequenceId) {
            object[] results = this.Invoke("Fetch_PG_Payment_Details_V3", new object[] {
                        trackID,
                        strPG,
                        strResult,
                        strErrorMsg,
                        strAgentID,
                        strTerminalId,
                        strTerminalType,
                        strSequenceId});
            strResult = ((string)(results[1]));
            strErrorMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_PG_Payment_Details_V3Async(string trackID, string strPG, string strResult, string strErrorMsg, string strAgentID, string strTerminalId, string strTerminalType, string strSequenceId) {
            this.Fetch_PG_Payment_Details_V3Async(trackID, strPG, strResult, strErrorMsg, strAgentID, strTerminalId, strTerminalType, strSequenceId, null);
        }
        
        /// <remarks/>
        public void Fetch_PG_Payment_Details_V3Async(string trackID, string strPG, string strResult, string strErrorMsg, string strAgentID, string strTerminalId, string strTerminalType, string strSequenceId, object userState) {
            if ((this.Fetch_PG_Payment_Details_V3OperationCompleted == null)) {
                this.Fetch_PG_Payment_Details_V3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_PG_Payment_Details_V3OperationCompleted);
            }
            this.InvokeAsync("Fetch_PG_Payment_Details_V3", new object[] {
                        trackID,
                        strPG,
                        strResult,
                        strErrorMsg,
                        strAgentID,
                        strTerminalId,
                        strTerminalType,
                        strSequenceId}, this.Fetch_PG_Payment_Details_V3OperationCompleted, userState);
        }
        
        private void OnFetch_PG_Payment_Details_V3OperationCompleted(object arg) {
            if ((this.Fetch_PG_Payment_Details_V3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_PG_Payment_Details_V3Completed(this, new Fetch_PG_Payment_Details_V3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_Payment_Gateway_Track", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Check_Payment_Gateway_Track(string trackID, string status, string paymentID, string ticketAmount, ref string strErrorMsg) {
            object[] results = this.Invoke("Check_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        paymentID,
                        ticketAmount,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Check_Payment_Gateway_TrackAsync(string trackID, string status, string paymentID, string ticketAmount, string strErrorMsg) {
            this.Check_Payment_Gateway_TrackAsync(trackID, status, paymentID, ticketAmount, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Check_Payment_Gateway_TrackAsync(string trackID, string status, string paymentID, string ticketAmount, string strErrorMsg, object userState) {
            if ((this.Check_Payment_Gateway_TrackOperationCompleted == null)) {
                this.Check_Payment_Gateway_TrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_Payment_Gateway_TrackOperationCompleted);
            }
            this.InvokeAsync("Check_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        paymentID,
                        ticketAmount,
                        strErrorMsg}, this.Check_Payment_Gateway_TrackOperationCompleted, userState);
        }
        
        private void OnCheck_Payment_Gateway_TrackOperationCompleted(object arg) {
            if ((this.Check_Payment_Gateway_TrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_Payment_Gateway_TrackCompleted(this, new Check_Payment_Gateway_TrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Payment_Gateway_Track", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update_Payment_Gateway_Track(string trackID, string status, string remarks, string paymentID, string ipAddress, decimal sequenceID, string transId, string result, ref string strErrorMsg) {
            object[] results = this.Invoke("Update_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        remarks,
                        paymentID,
                        ipAddress,
                        sequenceID,
                        transId,
                        result,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Payment_Gateway_TrackAsync(string trackID, string status, string remarks, string paymentID, string ipAddress, decimal sequenceID, string transId, string result, string strErrorMsg) {
            this.Update_Payment_Gateway_TrackAsync(trackID, status, remarks, paymentID, ipAddress, sequenceID, transId, result, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Update_Payment_Gateway_TrackAsync(string trackID, string status, string remarks, string paymentID, string ipAddress, decimal sequenceID, string transId, string result, string strErrorMsg, object userState) {
            if ((this.Update_Payment_Gateway_TrackOperationCompleted == null)) {
                this.Update_Payment_Gateway_TrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Payment_Gateway_TrackOperationCompleted);
            }
            this.InvokeAsync("Update_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        remarks,
                        paymentID,
                        ipAddress,
                        sequenceID,
                        transId,
                        result,
                        strErrorMsg}, this.Update_Payment_Gateway_TrackOperationCompleted, userState);
        }
        
        private void OnUpdate_Payment_Gateway_TrackOperationCompleted(object arg) {
            if ((this.Update_Payment_Gateway_TrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Payment_Gateway_TrackCompleted(this, new Update_Payment_Gateway_TrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_ICICI_Payment_Gateway_Track", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Check_ICICI_Payment_Gateway_Track(string trackID, string status, string paymentID, string ticketAmount, ref string strErrorMsg) {
            object[] results = this.Invoke("Check_ICICI_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        paymentID,
                        ticketAmount,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Check_ICICI_Payment_Gateway_TrackAsync(string trackID, string status, string paymentID, string ticketAmount, string strErrorMsg) {
            this.Check_ICICI_Payment_Gateway_TrackAsync(trackID, status, paymentID, ticketAmount, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Check_ICICI_Payment_Gateway_TrackAsync(string trackID, string status, string paymentID, string ticketAmount, string strErrorMsg, object userState) {
            if ((this.Check_ICICI_Payment_Gateway_TrackOperationCompleted == null)) {
                this.Check_ICICI_Payment_Gateway_TrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_ICICI_Payment_Gateway_TrackOperationCompleted);
            }
            this.InvokeAsync("Check_ICICI_Payment_Gateway_Track", new object[] {
                        trackID,
                        status,
                        paymentID,
                        ticketAmount,
                        strErrorMsg}, this.Check_ICICI_Payment_Gateway_TrackOperationCompleted, userState);
        }
        
        private void OnCheck_ICICI_Payment_Gateway_TrackOperationCompleted(object arg) {
            if ((this.Check_ICICI_Payment_Gateway_TrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_ICICI_Payment_Gateway_TrackCompleted(this, new Check_ICICI_Payment_Gateway_TrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCodeDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchCodeDetails(string IssuingBranchID, string ClientID, ref string _rError, string CODE_FLAG, string GST_FLAG) {
            object[] results = this.Invoke("FetchCodeDetails", new object[] {
                        IssuingBranchID,
                        ClientID,
                        _rError,
                        CODE_FLAG,
                        GST_FLAG});
            _rError = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCodeDetailsAsync(string IssuingBranchID, string ClientID, string _rError, string CODE_FLAG, string GST_FLAG) {
            this.FetchCodeDetailsAsync(IssuingBranchID, ClientID, _rError, CODE_FLAG, GST_FLAG, null);
        }
        
        /// <remarks/>
        public void FetchCodeDetailsAsync(string IssuingBranchID, string ClientID, string _rError, string CODE_FLAG, string GST_FLAG, object userState) {
            if ((this.FetchCodeDetailsOperationCompleted == null)) {
                this.FetchCodeDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCodeDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchCodeDetails", new object[] {
                        IssuingBranchID,
                        ClientID,
                        _rError,
                        CODE_FLAG,
                        GST_FLAG}, this.FetchCodeDetailsOperationCompleted, userState);
        }
        
        private void OnFetchCodeDetailsOperationCompleted(object arg) {
            if ((this.FetchCodeDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCodeDetailsCompleted(this, new FetchCodeDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCodeDetails_v1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchCodeDetails_v1(string strBranchID, string strCRsID, string strConsoleAgentID, string strAgentID, string strTerminalID, string strUserName, string strIP, string strSequence, string strTerminalType, string strRetreivedResponse, ref string _rError) {
            object[] results = this.Invoke("FetchCodeDetails_v1", new object[] {
                        strBranchID,
                        strCRsID,
                        strConsoleAgentID,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIP,
                        strSequence,
                        strTerminalType,
                        strRetreivedResponse,
                        _rError});
            _rError = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCodeDetails_v1Async(string strBranchID, string strCRsID, string strConsoleAgentID, string strAgentID, string strTerminalID, string strUserName, string strIP, string strSequence, string strTerminalType, string strRetreivedResponse, string _rError) {
            this.FetchCodeDetails_v1Async(strBranchID, strCRsID, strConsoleAgentID, strAgentID, strTerminalID, strUserName, strIP, strSequence, strTerminalType, strRetreivedResponse, _rError, null);
        }
        
        /// <remarks/>
        public void FetchCodeDetails_v1Async(string strBranchID, string strCRsID, string strConsoleAgentID, string strAgentID, string strTerminalID, string strUserName, string strIP, string strSequence, string strTerminalType, string strRetreivedResponse, string _rError, object userState) {
            if ((this.FetchCodeDetails_v1OperationCompleted == null)) {
                this.FetchCodeDetails_v1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCodeDetails_v1OperationCompleted);
            }
            this.InvokeAsync("FetchCodeDetails_v1", new object[] {
                        strBranchID,
                        strCRsID,
                        strConsoleAgentID,
                        strAgentID,
                        strTerminalID,
                        strUserName,
                        strIP,
                        strSequence,
                        strTerminalType,
                        strRetreivedResponse,
                        _rError}, this.FetchCodeDetails_v1OperationCompleted, userState);
        }
        
        private void OnFetchCodeDetails_v1OperationCompleted(object arg) {
            if ((this.FetchCodeDetails_v1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCodeDetails_v1Completed(this, new FetchCodeDetails_v1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchPricingCodeDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchPricingCodeDetails(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    ref string strerror, 
                    string strairlineCode, 
                    string strtraveldate, 
                    string strfaretype, 
                    string strDisplayType) {
            object[] results = this.Invoke("FetchPricingCodeDetails", new object[] {
                        ClientID,
                        Terminalid,
                        Origin,
                        Destination,
                        AIrportId,
                        Triptype,
                        Calss,
                        Cabin,
                        Thread,
                        CatCount,
                        strUserName,
                        strTerminalType,
                        sequenceid,
                        ipaddress,
                        strerror,
                        strairlineCode,
                        strtraveldate,
                        strfaretype,
                        strDisplayType});
            strerror = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchPricingCodeDetailsAsync(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    string strerror, 
                    string strairlineCode, 
                    string strtraveldate, 
                    string strfaretype, 
                    string strDisplayType) {
            this.FetchPricingCodeDetailsAsync(ClientID, Terminalid, Origin, Destination, AIrportId, Triptype, Calss, Cabin, Thread, CatCount, strUserName, strTerminalType, sequenceid, ipaddress, strerror, strairlineCode, strtraveldate, strfaretype, strDisplayType, null);
        }
        
        /// <remarks/>
        public void FetchPricingCodeDetailsAsync(
                    string ClientID, 
                    string Terminalid, 
                    string Origin, 
                    string Destination, 
                    string AIrportId, 
                    string Triptype, 
                    string Calss, 
                    string Cabin, 
                    string Thread, 
                    string CatCount, 
                    string strUserName, 
                    string strTerminalType, 
                    decimal sequenceid, 
                    string ipaddress, 
                    string strerror, 
                    string strairlineCode, 
                    string strtraveldate, 
                    string strfaretype, 
                    string strDisplayType, 
                    object userState) {
            if ((this.FetchPricingCodeDetailsOperationCompleted == null)) {
                this.FetchPricingCodeDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchPricingCodeDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchPricingCodeDetails", new object[] {
                        ClientID,
                        Terminalid,
                        Origin,
                        Destination,
                        AIrportId,
                        Triptype,
                        Calss,
                        Cabin,
                        Thread,
                        CatCount,
                        strUserName,
                        strTerminalType,
                        sequenceid,
                        ipaddress,
                        strerror,
                        strairlineCode,
                        strtraveldate,
                        strfaretype,
                        strDisplayType}, this.FetchPricingCodeDetailsOperationCompleted, userState);
        }
        
        private void OnFetchPricingCodeDetailsOperationCompleted(object arg) {
            if ((this.FetchPricingCodeDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchPricingCodeDetailsCompleted(this, new FetchPricingCodeDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FETCHAGENTPGDETAILS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FETCHAGENTPGDETAILS(string strAgentID, string strTerminalId, string strUserName, string strSquenceID, string strTerminalType, string strProducttype, string strTransactionType, string strAllowCard, ref string strResult, ref string strErrorMsg, string strAirlineTrackid) {
            object[] results = this.Invoke("FETCHAGENTPGDETAILS", new object[] {
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        strSquenceID,
                        strTerminalType,
                        strProducttype,
                        strTransactionType,
                        strAllowCard,
                        strResult,
                        strErrorMsg,
                        strAirlineTrackid});
            strResult = ((string)(results[1]));
            strErrorMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FETCHAGENTPGDETAILSAsync(string strAgentID, string strTerminalId, string strUserName, string strSquenceID, string strTerminalType, string strProducttype, string strTransactionType, string strAllowCard, string strResult, string strErrorMsg, string strAirlineTrackid) {
            this.FETCHAGENTPGDETAILSAsync(strAgentID, strTerminalId, strUserName, strSquenceID, strTerminalType, strProducttype, strTransactionType, strAllowCard, strResult, strErrorMsg, strAirlineTrackid, null);
        }
        
        /// <remarks/>
        public void FETCHAGENTPGDETAILSAsync(string strAgentID, string strTerminalId, string strUserName, string strSquenceID, string strTerminalType, string strProducttype, string strTransactionType, string strAllowCard, string strResult, string strErrorMsg, string strAirlineTrackid, object userState) {
            if ((this.FETCHAGENTPGDETAILSOperationCompleted == null)) {
                this.FETCHAGENTPGDETAILSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFETCHAGENTPGDETAILSOperationCompleted);
            }
            this.InvokeAsync("FETCHAGENTPGDETAILS", new object[] {
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        strSquenceID,
                        strTerminalType,
                        strProducttype,
                        strTransactionType,
                        strAllowCard,
                        strResult,
                        strErrorMsg,
                        strAirlineTrackid}, this.FETCHAGENTPGDETAILSOperationCompleted, userState);
        }
        
        private void OnFETCHAGENTPGDETAILSOperationCompleted(object arg) {
            if ((this.FETCHAGENTPGDETAILSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FETCHAGENTPGDETAILSCompleted(this, new FETCHAGENTPGDETAILSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_Topup_trackID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Check_Topup_trackID(string strTopupID, string strAgentID, string strTerminalId, string strUserName, string strIPAddress, ref string strTopupDetails) {
            object[] results = this.Invoke("Check_Topup_trackID", new object[] {
                        strTopupID,
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        strIPAddress,
                        strTopupDetails});
            strTopupDetails = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Check_Topup_trackIDAsync(string strTopupID, string strAgentID, string strTerminalId, string strUserName, string strIPAddress, string strTopupDetails) {
            this.Check_Topup_trackIDAsync(strTopupID, strAgentID, strTerminalId, strUserName, strIPAddress, strTopupDetails, null);
        }
        
        /// <remarks/>
        public void Check_Topup_trackIDAsync(string strTopupID, string strAgentID, string strTerminalId, string strUserName, string strIPAddress, string strTopupDetails, object userState) {
            if ((this.Check_Topup_trackIDOperationCompleted == null)) {
                this.Check_Topup_trackIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_Topup_trackIDOperationCompleted);
            }
            this.InvokeAsync("Check_Topup_trackID", new object[] {
                        strTopupID,
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        strIPAddress,
                        strTopupDetails}, this.Check_Topup_trackIDOperationCompleted, userState);
        }
        
        private void OnCheck_Topup_trackIDOperationCompleted(object arg) {
            if ((this.Check_Topup_trackIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_Topup_trackIDCompleted(this, new Check_Topup_trackIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Ticket_Details_Table", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Update_Ticket_Details_Table(
                    string strAgentID, 
                    string strTerminalId, 
                    string strUserName, 
                    string PNR, 
                    string EMPLOYEEID, 
                    string CORPORATEID, 
                    string REFID, 
                    string REMARK, 
                    string REFERENCEID, 
                    string CHARGEBILITY, 
                    string COST_CENTER_ID, 
                    string TD_REASON, 
                    string BOOKING_TYPE, 
                    string TO_COSTCENTER_I, 
                    string RECHARGE, 
                    string TRAVEL_REQNO, 
                    string BUDGET_CODE, 
                    string JOB_NUMBER, 
                    string PACKAGE_ID, 
                    string SUB_REASON, 
                    ref string strTopupDetails) {
            object[] results = this.Invoke("Update_Ticket_Details_Table", new object[] {
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        PNR,
                        EMPLOYEEID,
                        CORPORATEID,
                        REFID,
                        REMARK,
                        REFERENCEID,
                        CHARGEBILITY,
                        COST_CENTER_ID,
                        TD_REASON,
                        BOOKING_TYPE,
                        TO_COSTCENTER_I,
                        RECHARGE,
                        TRAVEL_REQNO,
                        BUDGET_CODE,
                        JOB_NUMBER,
                        PACKAGE_ID,
                        SUB_REASON,
                        strTopupDetails});
            strTopupDetails = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Ticket_Details_TableAsync(
                    string strAgentID, 
                    string strTerminalId, 
                    string strUserName, 
                    string PNR, 
                    string EMPLOYEEID, 
                    string CORPORATEID, 
                    string REFID, 
                    string REMARK, 
                    string REFERENCEID, 
                    string CHARGEBILITY, 
                    string COST_CENTER_ID, 
                    string TD_REASON, 
                    string BOOKING_TYPE, 
                    string TO_COSTCENTER_I, 
                    string RECHARGE, 
                    string TRAVEL_REQNO, 
                    string BUDGET_CODE, 
                    string JOB_NUMBER, 
                    string PACKAGE_ID, 
                    string SUB_REASON, 
                    string strTopupDetails) {
            this.Update_Ticket_Details_TableAsync(strAgentID, strTerminalId, strUserName, PNR, EMPLOYEEID, CORPORATEID, REFID, REMARK, REFERENCEID, CHARGEBILITY, COST_CENTER_ID, TD_REASON, BOOKING_TYPE, TO_COSTCENTER_I, RECHARGE, TRAVEL_REQNO, BUDGET_CODE, JOB_NUMBER, PACKAGE_ID, SUB_REASON, strTopupDetails, null);
        }
        
        /// <remarks/>
        public void Update_Ticket_Details_TableAsync(
                    string strAgentID, 
                    string strTerminalId, 
                    string strUserName, 
                    string PNR, 
                    string EMPLOYEEID, 
                    string CORPORATEID, 
                    string REFID, 
                    string REMARK, 
                    string REFERENCEID, 
                    string CHARGEBILITY, 
                    string COST_CENTER_ID, 
                    string TD_REASON, 
                    string BOOKING_TYPE, 
                    string TO_COSTCENTER_I, 
                    string RECHARGE, 
                    string TRAVEL_REQNO, 
                    string BUDGET_CODE, 
                    string JOB_NUMBER, 
                    string PACKAGE_ID, 
                    string SUB_REASON, 
                    string strTopupDetails, 
                    object userState) {
            if ((this.Update_Ticket_Details_TableOperationCompleted == null)) {
                this.Update_Ticket_Details_TableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Ticket_Details_TableOperationCompleted);
            }
            this.InvokeAsync("Update_Ticket_Details_Table", new object[] {
                        strAgentID,
                        strTerminalId,
                        strUserName,
                        PNR,
                        EMPLOYEEID,
                        CORPORATEID,
                        REFID,
                        REMARK,
                        REFERENCEID,
                        CHARGEBILITY,
                        COST_CENTER_ID,
                        TD_REASON,
                        BOOKING_TYPE,
                        TO_COSTCENTER_I,
                        RECHARGE,
                        TRAVEL_REQNO,
                        BUDGET_CODE,
                        JOB_NUMBER,
                        PACKAGE_ID,
                        SUB_REASON,
                        strTopupDetails}, this.Update_Ticket_Details_TableOperationCompleted, userState);
        }
        
        private void OnUpdate_Ticket_Details_TableOperationCompleted(object arg) {
            if ((this.Update_Ticket_Details_TableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Ticket_Details_TableCompleted(this, new Update_Ticket_Details_TableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_SequenceNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Fetch_SequenceNumber(char terminalType, string agentID, string terminalID, string ipAddress, string userName, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_SequenceNumber", new object[] {
                        terminalType,
                        agentID,
                        terminalID,
                        ipAddress,
                        userName,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_SequenceNumberAsync(char terminalType, string agentID, string terminalID, string ipAddress, string userName, string strErrorMsg) {
            this.Fetch_SequenceNumberAsync(terminalType, agentID, terminalID, ipAddress, userName, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_SequenceNumberAsync(char terminalType, string agentID, string terminalID, string ipAddress, string userName, string strErrorMsg, object userState) {
            if ((this.Fetch_SequenceNumberOperationCompleted == null)) {
                this.Fetch_SequenceNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_SequenceNumberOperationCompleted);
            }
            this.InvokeAsync("Fetch_SequenceNumber", new object[] {
                        terminalType,
                        agentID,
                        terminalID,
                        ipAddress,
                        userName,
                        strErrorMsg}, this.Fetch_SequenceNumberOperationCompleted, userState);
        }
        
        private void OnFetch_SequenceNumberOperationCompleted(object arg) {
            if ((this.Fetch_SequenceNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_SequenceNumberCompleted(this, new Fetch_SequenceNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Detailed_LogDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Detailed_LogDetails(string agentID, string terminalId, string userName, string ipAddress, string terminalType, string logType, string logData, decimal sequenceID, string PageName, string Function) {
            object[] results = this.Invoke("Insert_Detailed_LogDetails", new object[] {
                        agentID,
                        terminalId,
                        userName,
                        ipAddress,
                        terminalType,
                        logType,
                        logData,
                        sequenceID,
                        PageName,
                        Function});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Detailed_LogDetailsAsync(string agentID, string terminalId, string userName, string ipAddress, string terminalType, string logType, string logData, decimal sequenceID, string PageName, string Function) {
            this.Insert_Detailed_LogDetailsAsync(agentID, terminalId, userName, ipAddress, terminalType, logType, logData, sequenceID, PageName, Function, null);
        }
        
        /// <remarks/>
        public void Insert_Detailed_LogDetailsAsync(string agentID, string terminalId, string userName, string ipAddress, string terminalType, string logType, string logData, decimal sequenceID, string PageName, string Function, object userState) {
            if ((this.Insert_Detailed_LogDetailsOperationCompleted == null)) {
                this.Insert_Detailed_LogDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Detailed_LogDetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Detailed_LogDetails", new object[] {
                        agentID,
                        terminalId,
                        userName,
                        ipAddress,
                        terminalType,
                        logType,
                        logData,
                        sequenceID,
                        PageName,
                        Function}, this.Insert_Detailed_LogDetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Detailed_LogDetailsOperationCompleted(object arg) {
            if ((this.Insert_Detailed_LogDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Detailed_LogDetailsCompleted(this, new Insert_Detailed_LogDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_LogData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Fetch_LogData(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string pageName, string functionName, string logType, string description) {
            this.Invoke("Fetch_LogData", new object[] {
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        pageName,
                        functionName,
                        logType,
                        description});
        }
        
        /// <remarks/>
        public void Fetch_LogDataAsync(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string pageName, string functionName, string logType, string description) {
            this.Fetch_LogDataAsync(agentID, terminalID, userName, ipAddress, terminalType, sequenceID, pageName, functionName, logType, description, null);
        }
        
        /// <remarks/>
        public void Fetch_LogDataAsync(string agentID, string terminalID, string userName, string ipAddress, string terminalType, decimal sequenceID, string pageName, string functionName, string logType, string description, object userState) {
            if ((this.Fetch_LogDataOperationCompleted == null)) {
                this.Fetch_LogDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_LogDataOperationCompleted);
            }
            this.InvokeAsync("Fetch_LogData", new object[] {
                        agentID,
                        terminalID,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID,
                        pageName,
                        functionName,
                        logType,
                        description}, this.Fetch_LogDataOperationCompleted, userState);
        }
        
        private void OnFetch_LogDataOperationCompleted(object arg) {
            if ((this.Fetch_LogDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_LogDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Detailed_LogDetails_Web", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Detailed_LogDetails_Web(string agentID, string terminalId, string userName, string ipAddress, string terminalType, string logType, string logData, decimal sequenceID, string PageName, string Function, string PosId, string PosTerminalId, string GroupId, string CorporateId, string EmployeeId) {
            object[] results = this.Invoke("Insert_Detailed_LogDetails_Web", new object[] {
                        agentID,
                        terminalId,
                        userName,
                        ipAddress,
                        terminalType,
                        logType,
                        logData,
                        sequenceID,
                        PageName,
                        Function,
                        PosId,
                        PosTerminalId,
                        GroupId,
                        CorporateId,
                        EmployeeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Detailed_LogDetails_WebAsync(string agentID, string terminalId, string userName, string ipAddress, string terminalType, string logType, string logData, decimal sequenceID, string PageName, string Function, string PosId, string PosTerminalId, string GroupId, string CorporateId, string EmployeeId) {
            this.Insert_Detailed_LogDetails_WebAsync(agentID, terminalId, userName, ipAddress, terminalType, logType, logData, sequenceID, PageName, Function, PosId, PosTerminalId, GroupId, CorporateId, EmployeeId, null);
        }
        
        /// <remarks/>
        public void Insert_Detailed_LogDetails_WebAsync(
                    string agentID, 
                    string terminalId, 
                    string userName, 
                    string ipAddress, 
                    string terminalType, 
                    string logType, 
                    string logData, 
                    decimal sequenceID, 
                    string PageName, 
                    string Function, 
                    string PosId, 
                    string PosTerminalId, 
                    string GroupId, 
                    string CorporateId, 
                    string EmployeeId, 
                    object userState) {
            if ((this.Insert_Detailed_LogDetails_WebOperationCompleted == null)) {
                this.Insert_Detailed_LogDetails_WebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Detailed_LogDetails_WebOperationCompleted);
            }
            this.InvokeAsync("Insert_Detailed_LogDetails_Web", new object[] {
                        agentID,
                        terminalId,
                        userName,
                        ipAddress,
                        terminalType,
                        logType,
                        logData,
                        sequenceID,
                        PageName,
                        Function,
                        PosId,
                        PosTerminalId,
                        GroupId,
                        CorporateId,
                        EmployeeId}, this.Insert_Detailed_LogDetails_WebOperationCompleted, userState);
        }
        
        private void OnInsert_Detailed_LogDetails_WebOperationCompleted(object arg) {
            if ((this.Insert_Detailed_LogDetails_WebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Detailed_LogDetails_WebCompleted(this, new Insert_Detailed_LogDetails_WebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/APPSSECCHECK", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool APPSSECCHECK(ref string strdetails) {
            object[] results = this.Invoke("APPSSECCHECK", new object[] {
                        strdetails});
            strdetails = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void APPSSECCHECKAsync(string strdetails) {
            this.APPSSECCHECKAsync(strdetails, null);
        }
        
        /// <remarks/>
        public void APPSSECCHECKAsync(string strdetails, object userState) {
            if ((this.APPSSECCHECKOperationCompleted == null)) {
                this.APPSSECCHECKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAPPSSECCHECKOperationCompleted);
            }
            this.InvokeAsync("APPSSECCHECK", new object[] {
                        strdetails}, this.APPSSECCHECKOperationCompleted, userState);
        }
        
        private void OnAPPSSECCHECKOperationCompleted(object arg) {
            if ((this.APPSSECCHECKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.APPSSECCHECKCompleted(this, new APPSSECCHECKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WEBAPPSSECCHECK", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WEBAPPSSECCHECK(ref string strdetails) {
            object[] results = this.Invoke("WEBAPPSSECCHECK", new object[] {
                        strdetails});
            strdetails = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WEBAPPSSECCHECKAsync(string strdetails) {
            this.WEBAPPSSECCHECKAsync(strdetails, null);
        }
        
        /// <remarks/>
        public void WEBAPPSSECCHECKAsync(string strdetails, object userState) {
            if ((this.WEBAPPSSECCHECKOperationCompleted == null)) {
                this.WEBAPPSSECCHECKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWEBAPPSSECCHECKOperationCompleted);
            }
            this.InvokeAsync("WEBAPPSSECCHECK", new object[] {
                        strdetails}, this.WEBAPPSSECCHECKOperationCompleted, userState);
        }
        
        private void OnWEBAPPSSECCHECKOperationCompleted(object arg) {
            if ((this.WEBAPPSSECCHECKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WEBAPPSSECCHECKCompleted(this, new WEBAPPSSECCHECKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WEBAPPSSESSIONCHECK", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WEBAPPSSESSIONCHECK(ref string strdetails) {
            object[] results = this.Invoke("WEBAPPSSESSIONCHECK", new object[] {
                        strdetails});
            strdetails = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WEBAPPSSESSIONCHECKAsync(string strdetails) {
            this.WEBAPPSSESSIONCHECKAsync(strdetails, null);
        }
        
        /// <remarks/>
        public void WEBAPPSSESSIONCHECKAsync(string strdetails, object userState) {
            if ((this.WEBAPPSSESSIONCHECKOperationCompleted == null)) {
                this.WEBAPPSSESSIONCHECKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWEBAPPSSESSIONCHECKOperationCompleted);
            }
            this.InvokeAsync("WEBAPPSSESSIONCHECK", new object[] {
                        strdetails}, this.WEBAPPSSESSIONCHECKOperationCompleted, userState);
        }
        
        private void OnWEBAPPSSESSIONCHECKOperationCompleted(object arg) {
            if ((this.WEBAPPSSESSIONCHECKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WEBAPPSSESSIONCHECKCompleted(this, new WEBAPPSSESSIONCHECKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIndeskTerminalID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckIndeskTerminalID(string strTerminalID, string strTerminalPwd, string strAppVer, string strDataVer, string strSecurityKey, string strIPAddress, ref string strErrorMsg) {
            object[] results = this.Invoke("CheckIndeskTerminalID", new object[] {
                        strTerminalID,
                        strTerminalPwd,
                        strAppVer,
                        strDataVer,
                        strSecurityKey,
                        strIPAddress,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIndeskTerminalIDAsync(string strTerminalID, string strTerminalPwd, string strAppVer, string strDataVer, string strSecurityKey, string strIPAddress, string strErrorMsg) {
            this.CheckIndeskTerminalIDAsync(strTerminalID, strTerminalPwd, strAppVer, strDataVer, strSecurityKey, strIPAddress, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void CheckIndeskTerminalIDAsync(string strTerminalID, string strTerminalPwd, string strAppVer, string strDataVer, string strSecurityKey, string strIPAddress, string strErrorMsg, object userState) {
            if ((this.CheckIndeskTerminalIDOperationCompleted == null)) {
                this.CheckIndeskTerminalIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIndeskTerminalIDOperationCompleted);
            }
            this.InvokeAsync("CheckIndeskTerminalID", new object[] {
                        strTerminalID,
                        strTerminalPwd,
                        strAppVer,
                        strDataVer,
                        strSecurityKey,
                        strIPAddress,
                        strErrorMsg}, this.CheckIndeskTerminalIDOperationCompleted, userState);
        }
        
        private void OnCheckIndeskTerminalIDOperationCompleted(object arg) {
            if ((this.CheckIndeskTerminalIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIndeskTerminalIDCompleted(this, new CheckIndeskTerminalIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newdashboardreportweb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet newdashboardreportweb(string agentid, string TYPE, string YEAR, string MONTH, string SEG, ref string pstrcount) {
            object[] results = this.Invoke("newdashboardreportweb", new object[] {
                        agentid,
                        TYPE,
                        YEAR,
                        MONTH,
                        SEG,
                        pstrcount});
            pstrcount = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void newdashboardreportwebAsync(string agentid, string TYPE, string YEAR, string MONTH, string SEG, string pstrcount) {
            this.newdashboardreportwebAsync(agentid, TYPE, YEAR, MONTH, SEG, pstrcount, null);
        }
        
        /// <remarks/>
        public void newdashboardreportwebAsync(string agentid, string TYPE, string YEAR, string MONTH, string SEG, string pstrcount, object userState) {
            if ((this.newdashboardreportwebOperationCompleted == null)) {
                this.newdashboardreportwebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewdashboardreportwebOperationCompleted);
            }
            this.InvokeAsync("newdashboardreportweb", new object[] {
                        agentid,
                        TYPE,
                        YEAR,
                        MONTH,
                        SEG,
                        pstrcount}, this.newdashboardreportwebOperationCompleted, userState);
        }
        
        private void OnnewdashboardreportwebOperationCompleted(object arg) {
            if ((this.newdashboardreportwebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newdashboardreportwebCompleted(this, new newdashboardreportwebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Requestbuilddashboardweb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Requestbuilddashboardweb(string agentid, string YEAR, string MONTH, ref string Errormsg) {
            object[] results = this.Invoke("Requestbuilddashboardweb", new object[] {
                        agentid,
                        YEAR,
                        MONTH,
                        Errormsg});
            Errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RequestbuilddashboardwebAsync(string agentid, string YEAR, string MONTH, string Errormsg) {
            this.RequestbuilddashboardwebAsync(agentid, YEAR, MONTH, Errormsg, null);
        }
        
        /// <remarks/>
        public void RequestbuilddashboardwebAsync(string agentid, string YEAR, string MONTH, string Errormsg, object userState) {
            if ((this.RequestbuilddashboardwebOperationCompleted == null)) {
                this.RequestbuilddashboardwebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestbuilddashboardwebOperationCompleted);
            }
            this.InvokeAsync("Requestbuilddashboardweb", new object[] {
                        agentid,
                        YEAR,
                        MONTH,
                        Errormsg}, this.RequestbuilddashboardwebOperationCompleted, userState);
        }
        
        private void OnRequestbuilddashboardwebOperationCompleted(object arg) {
            if ((this.RequestbuilddashboardwebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestbuilddashboardwebCompleted(this, new RequestbuilddashboardwebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Requestdaywisesegweb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Requestdaywisesegweb(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, ref string Errormsg) {
            object[] results = this.Invoke("Requestdaywisesegweb", new object[] {
                        agentid,
                        YEAR,
                        DATEWISE,
                        ORIGIN,
                        DESTINATION,
                        Errormsg});
            Errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RequestdaywisesegwebAsync(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, string Errormsg) {
            this.RequestdaywisesegwebAsync(agentid, YEAR, DATEWISE, ORIGIN, DESTINATION, Errormsg, null);
        }
        
        /// <remarks/>
        public void RequestdaywisesegwebAsync(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, string Errormsg, object userState) {
            if ((this.RequestdaywisesegwebOperationCompleted == null)) {
                this.RequestdaywisesegwebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestdaywisesegwebOperationCompleted);
            }
            this.InvokeAsync("Requestdaywisesegweb", new object[] {
                        agentid,
                        YEAR,
                        DATEWISE,
                        ORIGIN,
                        DESTINATION,
                        Errormsg}, this.RequestdaywisesegwebOperationCompleted, userState);
        }
        
        private void OnRequestdaywisesegwebOperationCompleted(object arg) {
            if ((this.RequestdaywisesegwebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestdaywisesegwebCompleted(this, new RequestdaywisesegwebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newdashboardweb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet newdashboardweb(string agentid, string YEAR, string MONTH, ref string Errormsg) {
            object[] results = this.Invoke("newdashboardweb", new object[] {
                        agentid,
                        YEAR,
                        MONTH,
                        Errormsg});
            Errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void newdashboardwebAsync(string agentid, string YEAR, string MONTH, string Errormsg) {
            this.newdashboardwebAsync(agentid, YEAR, MONTH, Errormsg, null);
        }
        
        /// <remarks/>
        public void newdashboardwebAsync(string agentid, string YEAR, string MONTH, string Errormsg, object userState) {
            if ((this.newdashboardwebOperationCompleted == null)) {
                this.newdashboardwebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewdashboardwebOperationCompleted);
            }
            this.InvokeAsync("newdashboardweb", new object[] {
                        agentid,
                        YEAR,
                        MONTH,
                        Errormsg}, this.newdashboardwebOperationCompleted, userState);
        }
        
        private void OnnewdashboardwebOperationCompleted(object arg) {
            if ((this.newdashboardwebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newdashboardwebCompleted(this, new newdashboardwebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Requestdaywiseseg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Requestdaywiseseg(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, string errormsg) {
            object[] results = this.Invoke("Requestdaywiseseg", new object[] {
                        agentid,
                        YEAR,
                        DATEWISE,
                        ORIGIN,
                        DESTINATION,
                        errormsg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestdaywisesegAsync(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, string errormsg) {
            this.RequestdaywisesegAsync(agentid, YEAR, DATEWISE, ORIGIN, DESTINATION, errormsg, null);
        }
        
        /// <remarks/>
        public void RequestdaywisesegAsync(string agentid, string YEAR, string DATEWISE, string ORIGIN, string DESTINATION, string errormsg, object userState) {
            if ((this.RequestdaywisesegOperationCompleted == null)) {
                this.RequestdaywisesegOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestdaywisesegOperationCompleted);
            }
            this.InvokeAsync("Requestdaywiseseg", new object[] {
                        agentid,
                        YEAR,
                        DATEWISE,
                        ORIGIN,
                        DESTINATION,
                        errormsg}, this.RequestdaywisesegOperationCompleted, userState);
        }
        
        private void OnRequestdaywisesegOperationCompleted(object arg) {
            if ((this.RequestdaywisesegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestdaywisesegCompleted(this, new RequestdaywisesegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newdashboard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] newdashboard(string YEAR, string MONTH) {
            object[] results = this.Invoke("newdashboard", new object[] {
                        YEAR,
                        MONTH});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void newdashboardAsync(string YEAR, string MONTH) {
            this.newdashboardAsync(YEAR, MONTH, null);
        }
        
        /// <remarks/>
        public void newdashboardAsync(string YEAR, string MONTH, object userState) {
            if ((this.newdashboardOperationCompleted == null)) {
                this.newdashboardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewdashboardOperationCompleted);
            }
            this.InvokeAsync("newdashboard", new object[] {
                        YEAR,
                        MONTH}, this.newdashboardOperationCompleted, userState);
        }
        
        private void OnnewdashboardOperationCompleted(object arg) {
            if ((this.newdashboardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newdashboardCompleted(this, new newdashboardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newdashboardreport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] newdashboardreport(string TYPE, string YEAR, string MONTH, string SEG, ref string pstrcount) {
            object[] results = this.Invoke("newdashboardreport", new object[] {
                        TYPE,
                        YEAR,
                        MONTH,
                        SEG,
                        pstrcount});
            pstrcount = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void newdashboardreportAsync(string TYPE, string YEAR, string MONTH, string SEG, string pstrcount) {
            this.newdashboardreportAsync(TYPE, YEAR, MONTH, SEG, pstrcount, null);
        }
        
        /// <remarks/>
        public void newdashboardreportAsync(string TYPE, string YEAR, string MONTH, string SEG, string pstrcount, object userState) {
            if ((this.newdashboardreportOperationCompleted == null)) {
                this.newdashboardreportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewdashboardreportOperationCompleted);
            }
            this.InvokeAsync("newdashboardreport", new object[] {
                        TYPE,
                        YEAR,
                        MONTH,
                        SEG,
                        pstrcount}, this.newdashboardreportOperationCompleted, userState);
        }
        
        private void OnnewdashboardreportOperationCompleted(object arg) {
            if ((this.newdashboardreportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newdashboardreportCompleted(this, new newdashboardreportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchBrBookedHistoryB2B", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchBrBookedHistoryB2B(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string FlightNo, 
                    string TRAVELTODATE) {
            object[] results = this.Invoke("FetchBrBookedHistoryB2B", new object[] {
                        S_PNR,
                        CRS_PNR,
                        AIR_PNR,
                        AGENT_ID,
                        STATUS,
                        FROMDATE,
                        TODATE,
                        TERMINALID,
                        USERNAME,
                        PAYMENTMODE,
                        AIRLINE_CODE,
                        MASTERDATA,
                        FIRSTNAME,
                        LASTNAME,
                        TRAVELDATE,
                        BLOCKEDDATE,
                        AIRPORTID,
                        SEQUENCEID,
                        IPADDRESS,
                        strEmpId,
                        FlightNo,
                        TRAVELTODATE});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchBrBookedHistoryB2BAsync(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string FlightNo, 
                    string TRAVELTODATE) {
            this.FetchBrBookedHistoryB2BAsync(S_PNR, CRS_PNR, AIR_PNR, AGENT_ID, STATUS, FROMDATE, TODATE, TERMINALID, USERNAME, PAYMENTMODE, AIRLINE_CODE, MASTERDATA, FIRSTNAME, LASTNAME, TRAVELDATE, BLOCKEDDATE, AIRPORTID, SEQUENCEID, IPADDRESS, strEmpId, FlightNo, TRAVELTODATE, null);
        }
        
        /// <remarks/>
        public void FetchBrBookedHistoryB2BAsync(
                    string S_PNR, 
                    string CRS_PNR, 
                    string AIR_PNR, 
                    string AGENT_ID, 
                    string STATUS, 
                    string FROMDATE, 
                    string TODATE, 
                    string TERMINALID, 
                    string USERNAME, 
                    string PAYMENTMODE, 
                    string AIRLINE_CODE, 
                    string MASTERDATA, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string TRAVELDATE, 
                    string BLOCKEDDATE, 
                    string AIRPORTID, 
                    string SEQUENCEID, 
                    string IPADDRESS, 
                    string strEmpId, 
                    string FlightNo, 
                    string TRAVELTODATE, 
                    object userState) {
            if ((this.FetchBrBookedHistoryB2BOperationCompleted == null)) {
                this.FetchBrBookedHistoryB2BOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchBrBookedHistoryB2BOperationCompleted);
            }
            this.InvokeAsync("FetchBrBookedHistoryB2B", new object[] {
                        S_PNR,
                        CRS_PNR,
                        AIR_PNR,
                        AGENT_ID,
                        STATUS,
                        FROMDATE,
                        TODATE,
                        TERMINALID,
                        USERNAME,
                        PAYMENTMODE,
                        AIRLINE_CODE,
                        MASTERDATA,
                        FIRSTNAME,
                        LASTNAME,
                        TRAVELDATE,
                        BLOCKEDDATE,
                        AIRPORTID,
                        SEQUENCEID,
                        IPADDRESS,
                        strEmpId,
                        FlightNo,
                        TRAVELTODATE}, this.FetchBrBookedHistoryB2BOperationCompleted, userState);
        }
        
        private void OnFetchBrBookedHistoryB2BOperationCompleted(object arg) {
            if ((this.FetchBrBookedHistoryB2BCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchBrBookedHistoryB2BCompleted(this, new FetchBrBookedHistoryB2BCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchSeatTrack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchSeatTrack(string ASM_AGENT_ID, string ASM_TERMINAL_ID, string ASM_TERMINAL_TYPE, string ASM_TRACKID, string ASM_FLIGHTDETAILS, string ASM_FLAG, string Username, string Ipaddress, string SequenceId, ref string strErrorMsg) {
            object[] results = this.Invoke("FetchSeatTrack", new object[] {
                        ASM_AGENT_ID,
                        ASM_TERMINAL_ID,
                        ASM_TERMINAL_TYPE,
                        ASM_TRACKID,
                        ASM_FLIGHTDETAILS,
                        ASM_FLAG,
                        Username,
                        Ipaddress,
                        SequenceId,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchSeatTrackAsync(string ASM_AGENT_ID, string ASM_TERMINAL_ID, string ASM_TERMINAL_TYPE, string ASM_TRACKID, string ASM_FLIGHTDETAILS, string ASM_FLAG, string Username, string Ipaddress, string SequenceId, string strErrorMsg) {
            this.FetchSeatTrackAsync(ASM_AGENT_ID, ASM_TERMINAL_ID, ASM_TERMINAL_TYPE, ASM_TRACKID, ASM_FLIGHTDETAILS, ASM_FLAG, Username, Ipaddress, SequenceId, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void FetchSeatTrackAsync(string ASM_AGENT_ID, string ASM_TERMINAL_ID, string ASM_TERMINAL_TYPE, string ASM_TRACKID, string ASM_FLIGHTDETAILS, string ASM_FLAG, string Username, string Ipaddress, string SequenceId, string strErrorMsg, object userState) {
            if ((this.FetchSeatTrackOperationCompleted == null)) {
                this.FetchSeatTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchSeatTrackOperationCompleted);
            }
            this.InvokeAsync("FetchSeatTrack", new object[] {
                        ASM_AGENT_ID,
                        ASM_TERMINAL_ID,
                        ASM_TERMINAL_TYPE,
                        ASM_TRACKID,
                        ASM_FLIGHTDETAILS,
                        ASM_FLAG,
                        Username,
                        Ipaddress,
                        SequenceId,
                        strErrorMsg}, this.FetchSeatTrackOperationCompleted, userState);
        }
        
        private void OnFetchSeatTrackOperationCompleted(object arg) {
            if ((this.FetchSeatTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchSeatTrackCompleted(this, new FetchSeatTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Systemdetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Systemdetails(string userSettings, string terminalid, string usrname, string passwd, string agentID, [System.Xml.Serialization.XmlElementAttribute("terminalID")] string terminalID1, string userName, string ipAddress, string terminalType, string sequenceID) {
            object[] results = this.Invoke("Systemdetails", new object[] {
                        userSettings,
                        terminalid,
                        usrname,
                        passwd,
                        agentID,
                        terminalID1,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SystemdetailsAsync(string userSettings, string terminalid, string usrname, string passwd, string agentID, string terminalID1, string userName, string ipAddress, string terminalType, string sequenceID) {
            this.SystemdetailsAsync(userSettings, terminalid, usrname, passwd, agentID, terminalID1, userName, ipAddress, terminalType, sequenceID, null);
        }
        
        /// <remarks/>
        public void SystemdetailsAsync(string userSettings, string terminalid, string usrname, string passwd, string agentID, string terminalID1, string userName, string ipAddress, string terminalType, string sequenceID, object userState) {
            if ((this.SystemdetailsOperationCompleted == null)) {
                this.SystemdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSystemdetailsOperationCompleted);
            }
            this.InvokeAsync("Systemdetails", new object[] {
                        userSettings,
                        terminalid,
                        usrname,
                        passwd,
                        agentID,
                        terminalID1,
                        userName,
                        ipAddress,
                        terminalType,
                        sequenceID}, this.SystemdetailsOperationCompleted, userState);
        }
        
        private void OnSystemdetailsOperationCompleted(object arg) {
            if ((this.SystemdetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SystemdetailsCompleted(this, new SystemdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fetchdownloaddetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fetchdownloaddetails(string terminalid, string username, string Password) {
            object[] results = this.Invoke("fetchdownloaddetails", new object[] {
                        terminalid,
                        username,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fetchdownloaddetailsAsync(string terminalid, string username, string Password) {
            this.fetchdownloaddetailsAsync(terminalid, username, Password, null);
        }
        
        /// <remarks/>
        public void fetchdownloaddetailsAsync(string terminalid, string username, string Password, object userState) {
            if ((this.fetchdownloaddetailsOperationCompleted == null)) {
                this.fetchdownloaddetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchdownloaddetailsOperationCompleted);
            }
            this.InvokeAsync("fetchdownloaddetails", new object[] {
                        terminalid,
                        username,
                        Password}, this.fetchdownloaddetailsOperationCompleted, userState);
        }
        
        private void OnfetchdownloaddetailsOperationCompleted(object arg) {
            if ((this.fetchdownloaddetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchdownloaddetailsCompleted(this, new fetchdownloaddetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchfarecalendar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetchfarecalendar(string org, string dest, string getTriptType, string Curentday, string agentid, string terminalid, string username, string ipaddress) {
            object[] results = this.Invoke("Fetchfarecalendar", new object[] {
                        org,
                        dest,
                        getTriptType,
                        Curentday,
                        agentid,
                        terminalid,
                        username,
                        ipaddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchfarecalendarAsync(string org, string dest, string getTriptType, string Curentday, string agentid, string terminalid, string username, string ipaddress) {
            this.FetchfarecalendarAsync(org, dest, getTriptType, Curentday, agentid, terminalid, username, ipaddress, null);
        }
        
        /// <remarks/>
        public void FetchfarecalendarAsync(string org, string dest, string getTriptType, string Curentday, string agentid, string terminalid, string username, string ipaddress, object userState) {
            if ((this.FetchfarecalendarOperationCompleted == null)) {
                this.FetchfarecalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchfarecalendarOperationCompleted);
            }
            this.InvokeAsync("Fetchfarecalendar", new object[] {
                        org,
                        dest,
                        getTriptType,
                        Curentday,
                        agentid,
                        terminalid,
                        username,
                        ipaddress}, this.FetchfarecalendarOperationCompleted, userState);
        }
        
        private void OnFetchfarecalendarOperationCompleted(object arg) {
            if ((this.FetchfarecalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchfarecalendarCompleted(this, new FetchfarecalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertvatdetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool insertvatdetails(string agentid, string terminalid, string username, string Fullname, string Emailid, string ContactNo, string Companyname, string Regno, string Checkregistration, string Remarks, string Status, string ipaddress) {
            object[] results = this.Invoke("insertvatdetails", new object[] {
                        agentid,
                        terminalid,
                        username,
                        Fullname,
                        Emailid,
                        ContactNo,
                        Companyname,
                        Regno,
                        Checkregistration,
                        Remarks,
                        Status,
                        ipaddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void insertvatdetailsAsync(string agentid, string terminalid, string username, string Fullname, string Emailid, string ContactNo, string Companyname, string Regno, string Checkregistration, string Remarks, string Status, string ipaddress) {
            this.insertvatdetailsAsync(agentid, terminalid, username, Fullname, Emailid, ContactNo, Companyname, Regno, Checkregistration, Remarks, Status, ipaddress, null);
        }
        
        /// <remarks/>
        public void insertvatdetailsAsync(string agentid, string terminalid, string username, string Fullname, string Emailid, string ContactNo, string Companyname, string Regno, string Checkregistration, string Remarks, string Status, string ipaddress, object userState) {
            if ((this.insertvatdetailsOperationCompleted == null)) {
                this.insertvatdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertvatdetailsOperationCompleted);
            }
            this.InvokeAsync("insertvatdetails", new object[] {
                        agentid,
                        terminalid,
                        username,
                        Fullname,
                        Emailid,
                        ContactNo,
                        Companyname,
                        Regno,
                        Checkregistration,
                        Remarks,
                        Status,
                        ipaddress}, this.insertvatdetailsOperationCompleted, userState);
        }
        
        private void OninsertvatdetailsOperationCompleted(object arg) {
            if ((this.insertvatdetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertvatdetailsCompleted(this, new insertvatdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Best_Buy_Content", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Best_Buy_Content(string username, string ip, string sequenceid, string pagename, string Function) {
            object[] results = this.Invoke("Fetch_Best_Buy_Content", new object[] {
                        username,
                        ip,
                        sequenceid,
                        pagename,
                        Function});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Best_Buy_ContentAsync(string username, string ip, string sequenceid, string pagename, string Function) {
            this.Fetch_Best_Buy_ContentAsync(username, ip, sequenceid, pagename, Function, null);
        }
        
        /// <remarks/>
        public void Fetch_Best_Buy_ContentAsync(string username, string ip, string sequenceid, string pagename, string Function, object userState) {
            if ((this.Fetch_Best_Buy_ContentOperationCompleted == null)) {
                this.Fetch_Best_Buy_ContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Best_Buy_ContentOperationCompleted);
            }
            this.InvokeAsync("Fetch_Best_Buy_Content", new object[] {
                        username,
                        ip,
                        sequenceid,
                        pagename,
                        Function}, this.Fetch_Best_Buy_ContentOperationCompleted, userState);
        }
        
        private void OnFetch_Best_Buy_ContentOperationCompleted(object arg) {
            if ((this.Fetch_Best_Buy_ContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Best_Buy_ContentCompleted(this, new Fetch_Best_Buy_ContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_FETCH_PAYMENT_GATEWAYNAME", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_FETCH_PAYMENT_GATEWAYNAME(string supid, string agentid, string terminalid, string username, string topupamount, string servicecharge, string servicechargeamt, string revservicecharge, string revservicechargeamt, ref string Errormsg) {
            object[] results = this.Invoke("P_FETCH_PAYMENT_GATEWAYNAME", new object[] {
                        supid,
                        agentid,
                        terminalid,
                        username,
                        topupamount,
                        servicecharge,
                        servicechargeamt,
                        revservicecharge,
                        revservicechargeamt,
                        Errormsg});
            Errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_FETCH_PAYMENT_GATEWAYNAMEAsync(string supid, string agentid, string terminalid, string username, string topupamount, string servicecharge, string servicechargeamt, string revservicecharge, string revservicechargeamt, string Errormsg) {
            this.P_FETCH_PAYMENT_GATEWAYNAMEAsync(supid, agentid, terminalid, username, topupamount, servicecharge, servicechargeamt, revservicecharge, revservicechargeamt, Errormsg, null);
        }
        
        /// <remarks/>
        public void P_FETCH_PAYMENT_GATEWAYNAMEAsync(string supid, string agentid, string terminalid, string username, string topupamount, string servicecharge, string servicechargeamt, string revservicecharge, string revservicechargeamt, string Errormsg, object userState) {
            if ((this.P_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted == null)) {
                this.P_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted);
            }
            this.InvokeAsync("P_FETCH_PAYMENT_GATEWAYNAME", new object[] {
                        supid,
                        agentid,
                        terminalid,
                        username,
                        topupamount,
                        servicecharge,
                        servicechargeamt,
                        revservicecharge,
                        revservicechargeamt,
                        Errormsg}, this.P_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted, userState);
        }
        
        private void OnP_FETCH_PAYMENT_GATEWAYNAMEOperationCompleted(object arg) {
            if ((this.P_FETCH_PAYMENT_GATEWAYNAMECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_FETCH_PAYMENT_GATEWAYNAMECompleted(this, new P_FETCH_PAYMENT_GATEWAYNAMECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FETCH_PAYMENT_GATEWAY_CHARGESWEB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FETCH_PAYMENT_GATEWAY_CHARGESWEB(string AgentID, string Terminalid, string PgName, string UserID, string terminaltype, string ip, string sequenceID, ref string errormsg) {
            object[] results = this.Invoke("FETCH_PAYMENT_GATEWAY_CHARGESWEB", new object[] {
                        AgentID,
                        Terminalid,
                        PgName,
                        UserID,
                        terminaltype,
                        ip,
                        sequenceID,
                        errormsg});
            errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FETCH_PAYMENT_GATEWAY_CHARGESWEBAsync(string AgentID, string Terminalid, string PgName, string UserID, string terminaltype, string ip, string sequenceID, string errormsg) {
            this.FETCH_PAYMENT_GATEWAY_CHARGESWEBAsync(AgentID, Terminalid, PgName, UserID, terminaltype, ip, sequenceID, errormsg, null);
        }
        
        /// <remarks/>
        public void FETCH_PAYMENT_GATEWAY_CHARGESWEBAsync(string AgentID, string Terminalid, string PgName, string UserID, string terminaltype, string ip, string sequenceID, string errormsg, object userState) {
            if ((this.FETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted == null)) {
                this.FETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted);
            }
            this.InvokeAsync("FETCH_PAYMENT_GATEWAY_CHARGESWEB", new object[] {
                        AgentID,
                        Terminalid,
                        PgName,
                        UserID,
                        terminaltype,
                        ip,
                        sequenceID,
                        errormsg}, this.FETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted, userState);
        }
        
        private void OnFETCH_PAYMENT_GATEWAY_CHARGESWEBOperationCompleted(object arg) {
            if ((this.FETCH_PAYMENT_GATEWAY_CHARGESWEBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FETCH_PAYMENT_GATEWAY_CHARGESWEBCompleted(this, new FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_topup_details_web", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_topup_details_web(string status, string fromDate, string toDate, string username, string IP, string steSequence, string Pagename, string Function, string Topupmode, string strAgentID, string requestID, string MarketId) {
            object[] results = this.Invoke("Fetch_topup_details_web", new object[] {
                        status,
                        fromDate,
                        toDate,
                        username,
                        IP,
                        steSequence,
                        Pagename,
                        Function,
                        Topupmode,
                        strAgentID,
                        requestID,
                        MarketId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_topup_details_webAsync(string status, string fromDate, string toDate, string username, string IP, string steSequence, string Pagename, string Function, string Topupmode, string strAgentID, string requestID, string MarketId) {
            this.Fetch_topup_details_webAsync(status, fromDate, toDate, username, IP, steSequence, Pagename, Function, Topupmode, strAgentID, requestID, MarketId, null);
        }
        
        /// <remarks/>
        public void Fetch_topup_details_webAsync(string status, string fromDate, string toDate, string username, string IP, string steSequence, string Pagename, string Function, string Topupmode, string strAgentID, string requestID, string MarketId, object userState) {
            if ((this.Fetch_topup_details_webOperationCompleted == null)) {
                this.Fetch_topup_details_webOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_topup_details_webOperationCompleted);
            }
            this.InvokeAsync("Fetch_topup_details_web", new object[] {
                        status,
                        fromDate,
                        toDate,
                        username,
                        IP,
                        steSequence,
                        Pagename,
                        Function,
                        Topupmode,
                        strAgentID,
                        requestID,
                        MarketId}, this.Fetch_topup_details_webOperationCompleted, userState);
        }
        
        private void OnFetch_topup_details_webOperationCompleted(object arg) {
            if ((this.Fetch_topup_details_webCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_topup_details_webCompleted(this, new Fetch_topup_details_webCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Agent_Credit_Balance_Details_francies", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Agent_Credit_Balance_Details_francies(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_Agent_Credit_Balance_Details_francies", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Agent_Credit_Balance_Details_franciesAsync(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg) {
            this.Fetch_Agent_Credit_Balance_Details_franciesAsync(BranchId, agentid, terminalid, username, ipaddress, sequenceid, terminaltype, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_Agent_Credit_Balance_Details_franciesAsync(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg, object userState) {
            if ((this.Fetch_Agent_Credit_Balance_Details_franciesOperationCompleted == null)) {
                this.Fetch_Agent_Credit_Balance_Details_franciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Agent_Credit_Balance_Details_franciesOperationCompleted);
            }
            this.InvokeAsync("Fetch_Agent_Credit_Balance_Details_francies", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg}, this.Fetch_Agent_Credit_Balance_Details_franciesOperationCompleted, userState);
        }
        
        private void OnFetch_Agent_Credit_Balance_Details_franciesOperationCompleted(object arg) {
            if ((this.Fetch_Agent_Credit_Balance_Details_franciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Agent_Credit_Balance_Details_franciesCompleted(this, new Fetch_Agent_Credit_Balance_Details_franciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Franchise_master_dashboard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Franchise_master_dashboard(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_Franchise_master_dashboard", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Franchise_master_dashboardAsync(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg) {
            this.Fetch_Franchise_master_dashboardAsync(BranchId, agentid, terminalid, username, ipaddress, sequenceid, terminaltype, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_Franchise_master_dashboardAsync(string BranchId, string agentid, string terminalid, string username, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg, object userState) {
            if ((this.Fetch_Franchise_master_dashboardOperationCompleted == null)) {
                this.Fetch_Franchise_master_dashboardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Franchise_master_dashboardOperationCompleted);
            }
            this.InvokeAsync("Fetch_Franchise_master_dashboard", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg}, this.Fetch_Franchise_master_dashboardOperationCompleted, userState);
        }
        
        private void OnFetch_Franchise_master_dashboardOperationCompleted(object arg) {
            if ((this.Fetch_Franchise_master_dashboardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Franchise_master_dashboardCompleted(this, new Fetch_Franchise_master_dashboardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Franchise_agentbalance_report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Franchise_agentbalance_report(string BranchId, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_Franchise_agentbalance_report", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        Currency,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Franchise_agentbalance_reportAsync(string BranchId, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg) {
            this.Fetch_Franchise_agentbalance_reportAsync(BranchId, agentid, terminalid, username, Currency, ipaddress, sequenceid, terminaltype, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_Franchise_agentbalance_reportAsync(string BranchId, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg, object userState) {
            if ((this.Fetch_Franchise_agentbalance_reportOperationCompleted == null)) {
                this.Fetch_Franchise_agentbalance_reportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Franchise_agentbalance_reportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Franchise_agentbalance_report", new object[] {
                        BranchId,
                        agentid,
                        terminalid,
                        username,
                        Currency,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg}, this.Fetch_Franchise_agentbalance_reportOperationCompleted, userState);
        }
        
        private void OnFetch_Franchise_agentbalance_reportOperationCompleted(object arg) {
            if ((this.Fetch_Franchise_agentbalance_reportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Franchise_agentbalance_reportCompleted(this, new Fetch_Franchise_agentbalance_reportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Franchise_agentdetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Franchise_agentdetails(string BranchId, string Agencyname, string Agentstatus, string Fromdate, string Todate, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, ref string strErrorMsg) {
            object[] results = this.Invoke("Fetch_Franchise_agentdetails", new object[] {
                        BranchId,
                        Agencyname,
                        Agentstatus,
                        Fromdate,
                        Todate,
                        agentid,
                        terminalid,
                        username,
                        Currency,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Franchise_agentdetailsAsync(string BranchId, string Agencyname, string Agentstatus, string Fromdate, string Todate, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg) {
            this.Fetch_Franchise_agentdetailsAsync(BranchId, Agencyname, Agentstatus, Fromdate, Todate, agentid, terminalid, username, Currency, ipaddress, sequenceid, terminaltype, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Fetch_Franchise_agentdetailsAsync(string BranchId, string Agencyname, string Agentstatus, string Fromdate, string Todate, string agentid, string terminalid, string username, string Currency, string ipaddress, string sequenceid, string terminaltype, string strErrorMsg, object userState) {
            if ((this.Fetch_Franchise_agentdetailsOperationCompleted == null)) {
                this.Fetch_Franchise_agentdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Franchise_agentdetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Franchise_agentdetails", new object[] {
                        BranchId,
                        Agencyname,
                        Agentstatus,
                        Fromdate,
                        Todate,
                        agentid,
                        terminalid,
                        username,
                        Currency,
                        ipaddress,
                        sequenceid,
                        terminaltype,
                        strErrorMsg}, this.Fetch_Franchise_agentdetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Franchise_agentdetailsOperationCompleted(object arg) {
            if ((this.Fetch_Franchise_agentdetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Franchise_agentdetailsCompleted(this, new Fetch_Franchise_agentdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_vat_registration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insert_vat_registration(string Status, string agentid, string Companyname, string Fullname, string ContactNo, string Emailid, string Regno, string Checkregistration, string Remarks, string username, string terminalid, string ipaddress, string seqid, ref string strErrorMsg) {
            object[] results = this.Invoke("Insert_vat_registration", new object[] {
                        Status,
                        agentid,
                        Companyname,
                        Fullname,
                        ContactNo,
                        Emailid,
                        Regno,
                        Checkregistration,
                        Remarks,
                        username,
                        terminalid,
                        ipaddress,
                        seqid,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_vat_registrationAsync(string Status, string agentid, string Companyname, string Fullname, string ContactNo, string Emailid, string Regno, string Checkregistration, string Remarks, string username, string terminalid, string ipaddress, string seqid, string strErrorMsg) {
            this.Insert_vat_registrationAsync(Status, agentid, Companyname, Fullname, ContactNo, Emailid, Regno, Checkregistration, Remarks, username, terminalid, ipaddress, seqid, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void Insert_vat_registrationAsync(string Status, string agentid, string Companyname, string Fullname, string ContactNo, string Emailid, string Regno, string Checkregistration, string Remarks, string username, string terminalid, string ipaddress, string seqid, string strErrorMsg, object userState) {
            if ((this.Insert_vat_registrationOperationCompleted == null)) {
                this.Insert_vat_registrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_vat_registrationOperationCompleted);
            }
            this.InvokeAsync("Insert_vat_registration", new object[] {
                        Status,
                        agentid,
                        Companyname,
                        Fullname,
                        ContactNo,
                        Emailid,
                        Regno,
                        Checkregistration,
                        Remarks,
                        username,
                        terminalid,
                        ipaddress,
                        seqid,
                        strErrorMsg}, this.Insert_vat_registrationOperationCompleted, userState);
        }
        
        private void OnInsert_vat_registrationOperationCompleted(object arg) {
            if ((this.Insert_vat_registrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_vat_registrationCompleted(this, new Insert_vat_registrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Updateimgwebhome", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Updateimgwebhome(System.Data.DataSet agentdetails, string imagename, string username, string ipaddress) {
            object[] results = this.Invoke("Updateimgwebhome", new object[] {
                        agentdetails,
                        imagename,
                        username,
                        ipaddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateimgwebhomeAsync(System.Data.DataSet agentdetails, string imagename, string username, string ipaddress) {
            this.UpdateimgwebhomeAsync(agentdetails, imagename, username, ipaddress, null);
        }
        
        /// <remarks/>
        public void UpdateimgwebhomeAsync(System.Data.DataSet agentdetails, string imagename, string username, string ipaddress, object userState) {
            if ((this.UpdateimgwebhomeOperationCompleted == null)) {
                this.UpdateimgwebhomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateimgwebhomeOperationCompleted);
            }
            this.InvokeAsync("Updateimgwebhome", new object[] {
                        agentdetails,
                        imagename,
                        username,
                        ipaddress}, this.UpdateimgwebhomeOperationCompleted, userState);
        }
        
        private void OnUpdateimgwebhomeOperationCompleted(object arg) {
            if ((this.UpdateimgwebhomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateimgwebhomeCompleted(this, new UpdateimgwebhomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchOrDeleteImages_Web", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchOrDeleteImages_Web(string Type, string AgentIds, string ImageIds, string Pagename, string Function, string userName, string ipAddress, string sequenceid) {
            object[] results = this.Invoke("FetchOrDeleteImages_Web", new object[] {
                        Type,
                        AgentIds,
                        ImageIds,
                        Pagename,
                        Function,
                        userName,
                        ipAddress,
                        sequenceid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchOrDeleteImages_WebAsync(string Type, string AgentIds, string ImageIds, string Pagename, string Function, string userName, string ipAddress, string sequenceid) {
            this.FetchOrDeleteImages_WebAsync(Type, AgentIds, ImageIds, Pagename, Function, userName, ipAddress, sequenceid, null);
        }
        
        /// <remarks/>
        public void FetchOrDeleteImages_WebAsync(string Type, string AgentIds, string ImageIds, string Pagename, string Function, string userName, string ipAddress, string sequenceid, object userState) {
            if ((this.FetchOrDeleteImages_WebOperationCompleted == null)) {
                this.FetchOrDeleteImages_WebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchOrDeleteImages_WebOperationCompleted);
            }
            this.InvokeAsync("FetchOrDeleteImages_Web", new object[] {
                        Type,
                        AgentIds,
                        ImageIds,
                        Pagename,
                        Function,
                        userName,
                        ipAddress,
                        sequenceid}, this.FetchOrDeleteImages_WebOperationCompleted, userState);
        }
        
        private void OnFetchOrDeleteImages_WebOperationCompleted(object arg) {
            if ((this.FetchOrDeleteImages_WebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchOrDeleteImages_WebCompleted(this, new FetchOrDeleteImages_WebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_MarkUP_Details_Web", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_MarkUP_Details_Web(string agentID, string airlinecategory, string airporttype, string airlinename, string markuptype, string triptype, string markupamount, string status, string UserID, string ip, string sequenceID, string markpercent, string strMarketid, string officeID) {
            object[] results = this.Invoke("Insert_MarkUP_Details_Web", new object[] {
                        agentID,
                        airlinecategory,
                        airporttype,
                        airlinename,
                        markuptype,
                        triptype,
                        markupamount,
                        status,
                        UserID,
                        ip,
                        sequenceID,
                        markpercent,
                        strMarketid,
                        officeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_MarkUP_Details_WebAsync(string agentID, string airlinecategory, string airporttype, string airlinename, string markuptype, string triptype, string markupamount, string status, string UserID, string ip, string sequenceID, string markpercent, string strMarketid, string officeID) {
            this.Insert_MarkUP_Details_WebAsync(agentID, airlinecategory, airporttype, airlinename, markuptype, triptype, markupamount, status, UserID, ip, sequenceID, markpercent, strMarketid, officeID, null);
        }
        
        /// <remarks/>
        public void Insert_MarkUP_Details_WebAsync(string agentID, string airlinecategory, string airporttype, string airlinename, string markuptype, string triptype, string markupamount, string status, string UserID, string ip, string sequenceID, string markpercent, string strMarketid, string officeID, object userState) {
            if ((this.Insert_MarkUP_Details_WebOperationCompleted == null)) {
                this.Insert_MarkUP_Details_WebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_MarkUP_Details_WebOperationCompleted);
            }
            this.InvokeAsync("Insert_MarkUP_Details_Web", new object[] {
                        agentID,
                        airlinecategory,
                        airporttype,
                        airlinename,
                        markuptype,
                        triptype,
                        markupamount,
                        status,
                        UserID,
                        ip,
                        sequenceID,
                        markpercent,
                        strMarketid,
                        officeID}, this.Insert_MarkUP_Details_WebOperationCompleted, userState);
        }
        
        private void OnInsert_MarkUP_Details_WebOperationCompleted(object arg) {
            if ((this.Insert_MarkUP_Details_WebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_MarkUP_Details_WebCompleted(this, new Insert_MarkUP_Details_WebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Airline_Markup_Details_web", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Airline_Markup_Details_web(string agentID, string airlinecategory, string airlinename, string markuptype, string status, string airportID, string statusview, string UserID, string ip, string sequenceID, ref string errormsg, string strCity, string strMarket, string AMP_RCode) {
            object[] results = this.Invoke("Fetch_Airline_Markup_Details_web", new object[] {
                        agentID,
                        airlinecategory,
                        airlinename,
                        markuptype,
                        status,
                        airportID,
                        statusview,
                        UserID,
                        ip,
                        sequenceID,
                        errormsg,
                        strCity,
                        strMarket,
                        AMP_RCode});
            errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Airline_Markup_Details_webAsync(string agentID, string airlinecategory, string airlinename, string markuptype, string status, string airportID, string statusview, string UserID, string ip, string sequenceID, string errormsg, string strCity, string strMarket, string AMP_RCode) {
            this.Fetch_Airline_Markup_Details_webAsync(agentID, airlinecategory, airlinename, markuptype, status, airportID, statusview, UserID, ip, sequenceID, errormsg, strCity, strMarket, AMP_RCode, null);
        }
        
        /// <remarks/>
        public void Fetch_Airline_Markup_Details_webAsync(string agentID, string airlinecategory, string airlinename, string markuptype, string status, string airportID, string statusview, string UserID, string ip, string sequenceID, string errormsg, string strCity, string strMarket, string AMP_RCode, object userState) {
            if ((this.Fetch_Airline_Markup_Details_webOperationCompleted == null)) {
                this.Fetch_Airline_Markup_Details_webOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Airline_Markup_Details_webOperationCompleted);
            }
            this.InvokeAsync("Fetch_Airline_Markup_Details_web", new object[] {
                        agentID,
                        airlinecategory,
                        airlinename,
                        markuptype,
                        status,
                        airportID,
                        statusview,
                        UserID,
                        ip,
                        sequenceID,
                        errormsg,
                        strCity,
                        strMarket,
                        AMP_RCode}, this.Fetch_Airline_Markup_Details_webOperationCompleted, userState);
        }
        
        private void OnFetch_Airline_Markup_Details_webOperationCompleted(object arg) {
            if ((this.Fetch_Airline_Markup_Details_webCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Airline_Markup_Details_webCompleted(this, new Fetch_Airline_Markup_Details_webCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUS(string airlinetrack, string trackid, string agentid, string terminalid, string username, string status, string ticketamount, string pgid, string code, string error, ref string Errormsg) {
            object[] results = this.Invoke("P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUS", new object[] {
                        airlinetrack,
                        trackid,
                        agentid,
                        terminalid,
                        username,
                        status,
                        ticketamount,
                        pgid,
                        code,
                        error,
                        Errormsg});
            Errormsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSAsync(string airlinetrack, string trackid, string agentid, string terminalid, string username, string status, string ticketamount, string pgid, string code, string error, string Errormsg) {
            this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSAsync(airlinetrack, trackid, agentid, terminalid, username, status, ticketamount, pgid, code, error, Errormsg, null);
        }
        
        /// <remarks/>
        public void P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSAsync(string airlinetrack, string trackid, string agentid, string terminalid, string username, string status, string ticketamount, string pgid, string code, string error, string Errormsg, object userState) {
            if ((this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted == null)) {
                this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted);
            }
            this.InvokeAsync("P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUS", new object[] {
                        airlinetrack,
                        trackid,
                        agentid,
                        terminalid,
                        username,
                        status,
                        ticketamount,
                        pgid,
                        code,
                        error,
                        Errormsg}, this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted, userState);
        }
        
        private void OnP_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSOperationCompleted(object arg) {
            if ((this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompleted(this, new P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertPgtrack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet insertPgtrack(
                    string agentid, 
                    string terminalid, 
                    string airlinetrack, 
                    string trackid, 
                    string username, 
                    string status, 
                    string ticketamount, 
                    string ipaddress, 
                    string paymentgatewayid, 
                    string bookingtype, 
                    string transmode, 
                    string currencycode, 
                    string email, 
                    string servicecharge, 
                    string topupamount, 
                    string remarks, 
                    string servicepercent, 
                    string terminaltype, 
                    string pgname, 
                    string pgsuppid, 
                    string agentmobno, 
                    string reversepercent, 
                    string reverseamount, 
                    string Requesturl, 
                    string seqid, 
                    string taxamount, 
                    string taxpercent, 
                    ref string strErrorMsg) {
            object[] results = this.Invoke("insertPgtrack", new object[] {
                        agentid,
                        terminalid,
                        airlinetrack,
                        trackid,
                        username,
                        status,
                        ticketamount,
                        ipaddress,
                        paymentgatewayid,
                        bookingtype,
                        transmode,
                        currencycode,
                        email,
                        servicecharge,
                        topupamount,
                        remarks,
                        servicepercent,
                        terminaltype,
                        pgname,
                        pgsuppid,
                        agentmobno,
                        reversepercent,
                        reverseamount,
                        Requesturl,
                        seqid,
                        taxamount,
                        taxpercent,
                        strErrorMsg});
            strErrorMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void insertPgtrackAsync(
                    string agentid, 
                    string terminalid, 
                    string airlinetrack, 
                    string trackid, 
                    string username, 
                    string status, 
                    string ticketamount, 
                    string ipaddress, 
                    string paymentgatewayid, 
                    string bookingtype, 
                    string transmode, 
                    string currencycode, 
                    string email, 
                    string servicecharge, 
                    string topupamount, 
                    string remarks, 
                    string servicepercent, 
                    string terminaltype, 
                    string pgname, 
                    string pgsuppid, 
                    string agentmobno, 
                    string reversepercent, 
                    string reverseamount, 
                    string Requesturl, 
                    string seqid, 
                    string taxamount, 
                    string taxpercent, 
                    string strErrorMsg) {
            this.insertPgtrackAsync(agentid, terminalid, airlinetrack, trackid, username, status, ticketamount, ipaddress, paymentgatewayid, bookingtype, transmode, currencycode, email, servicecharge, topupamount, remarks, servicepercent, terminaltype, pgname, pgsuppid, agentmobno, reversepercent, reverseamount, Requesturl, seqid, taxamount, taxpercent, strErrorMsg, null);
        }
        
        /// <remarks/>
        public void insertPgtrackAsync(
                    string agentid, 
                    string terminalid, 
                    string airlinetrack, 
                    string trackid, 
                    string username, 
                    string status, 
                    string ticketamount, 
                    string ipaddress, 
                    string paymentgatewayid, 
                    string bookingtype, 
                    string transmode, 
                    string currencycode, 
                    string email, 
                    string servicecharge, 
                    string topupamount, 
                    string remarks, 
                    string servicepercent, 
                    string terminaltype, 
                    string pgname, 
                    string pgsuppid, 
                    string agentmobno, 
                    string reversepercent, 
                    string reverseamount, 
                    string Requesturl, 
                    string seqid, 
                    string taxamount, 
                    string taxpercent, 
                    string strErrorMsg, 
                    object userState) {
            if ((this.insertPgtrackOperationCompleted == null)) {
                this.insertPgtrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertPgtrackOperationCompleted);
            }
            this.InvokeAsync("insertPgtrack", new object[] {
                        agentid,
                        terminalid,
                        airlinetrack,
                        trackid,
                        username,
                        status,
                        ticketamount,
                        ipaddress,
                        paymentgatewayid,
                        bookingtype,
                        transmode,
                        currencycode,
                        email,
                        servicecharge,
                        topupamount,
                        remarks,
                        servicepercent,
                        terminaltype,
                        pgname,
                        pgsuppid,
                        agentmobno,
                        reversepercent,
                        reverseamount,
                        Requesturl,
                        seqid,
                        taxamount,
                        taxpercent,
                        strErrorMsg}, this.insertPgtrackOperationCompleted, userState);
        }
        
        private void OninsertPgtrackOperationCompleted(object arg) {
            if ((this.insertPgtrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertPgtrackCompleted(this, new insertPgtrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchhotelcountries", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetchhotelcountries(string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress) {
            object[] results = this.Invoke("Fetchhotelcountries", new object[] {
                        UserName,
                        AgentID,
                        TerminalId,
                        sequenceid,
                        ipaddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchhotelcountriesAsync(string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress) {
            this.FetchhotelcountriesAsync(UserName, AgentID, TerminalId, sequenceid, ipaddress, null);
        }
        
        /// <remarks/>
        public void FetchhotelcountriesAsync(string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress, object userState) {
            if ((this.FetchhotelcountriesOperationCompleted == null)) {
                this.FetchhotelcountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchhotelcountriesOperationCompleted);
            }
            this.InvokeAsync("Fetchhotelcountries", new object[] {
                        UserName,
                        AgentID,
                        TerminalId,
                        sequenceid,
                        ipaddress}, this.FetchhotelcountriesOperationCompleted, userState);
        }
        
        private void OnFetchhotelcountriesOperationCompleted(object arg) {
            if ((this.FetchhotelcountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchhotelcountriesCompleted(this, new FetchhotelcountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insertservicecharge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Insertservicecharge(string HTL_PNR, string amnt, string Typer, string UserName, string AgentID, string SequenceId, string Terminaiid, string Ipaddr) {
            object[] results = this.Invoke("Insertservicecharge", new object[] {
                        HTL_PNR,
                        amnt,
                        Typer,
                        UserName,
                        AgentID,
                        SequenceId,
                        Terminaiid,
                        Ipaddr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsertservicechargeAsync(string HTL_PNR, string amnt, string Typer, string UserName, string AgentID, string SequenceId, string Terminaiid, string Ipaddr) {
            this.InsertservicechargeAsync(HTL_PNR, amnt, Typer, UserName, AgentID, SequenceId, Terminaiid, Ipaddr, null);
        }
        
        /// <remarks/>
        public void InsertservicechargeAsync(string HTL_PNR, string amnt, string Typer, string UserName, string AgentID, string SequenceId, string Terminaiid, string Ipaddr, object userState) {
            if ((this.InsertservicechargeOperationCompleted == null)) {
                this.InsertservicechargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertservicechargeOperationCompleted);
            }
            this.InvokeAsync("Insertservicecharge", new object[] {
                        HTL_PNR,
                        amnt,
                        Typer,
                        UserName,
                        AgentID,
                        SequenceId,
                        Terminaiid,
                        Ipaddr}, this.InsertservicechargeOperationCompleted, userState);
        }
        
        private void OnInsertservicechargeOperationCompleted(object arg) {
            if ((this.InsertservicechargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertservicechargeCompleted(this, new InsertservicechargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchhotelcityname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetchhotelcityname(string query, string suppname, string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress) {
            object[] results = this.Invoke("Fetchhotelcityname", new object[] {
                        query,
                        suppname,
                        UserName,
                        AgentID,
                        TerminalId,
                        sequenceid,
                        ipaddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchhotelcitynameAsync(string query, string suppname, string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress) {
            this.FetchhotelcitynameAsync(query, suppname, UserName, AgentID, TerminalId, sequenceid, ipaddress, null);
        }
        
        /// <remarks/>
        public void FetchhotelcitynameAsync(string query, string suppname, string UserName, string AgentID, string TerminalId, string sequenceid, string ipaddress, object userState) {
            if ((this.FetchhotelcitynameOperationCompleted == null)) {
                this.FetchhotelcitynameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchhotelcitynameOperationCompleted);
            }
            this.InvokeAsync("Fetchhotelcityname", new object[] {
                        query,
                        suppname,
                        UserName,
                        AgentID,
                        TerminalId,
                        sequenceid,
                        ipaddress}, this.FetchhotelcitynameOperationCompleted, userState);
        }
        
        private void OnFetchhotelcitynameOperationCompleted(object arg) {
            if ((this.FetchhotelcitynameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchhotelcitynameCompleted(this, new FetchhotelcitynameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchOfflineHoteldet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchOfflineHoteldet(string Citycode, string Cntrycode, string Flag, string Htlcode, string SupplierName, string username, string agentid, string terminalid, string ipaddress, string sequenceid) {
            object[] results = this.Invoke("FetchOfflineHoteldet", new object[] {
                        Citycode,
                        Cntrycode,
                        Flag,
                        Htlcode,
                        SupplierName,
                        username,
                        agentid,
                        terminalid,
                        ipaddress,
                        sequenceid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchOfflineHoteldetAsync(string Citycode, string Cntrycode, string Flag, string Htlcode, string SupplierName, string username, string agentid, string terminalid, string ipaddress, string sequenceid) {
            this.FetchOfflineHoteldetAsync(Citycode, Cntrycode, Flag, Htlcode, SupplierName, username, agentid, terminalid, ipaddress, sequenceid, null);
        }
        
        /// <remarks/>
        public void FetchOfflineHoteldetAsync(string Citycode, string Cntrycode, string Flag, string Htlcode, string SupplierName, string username, string agentid, string terminalid, string ipaddress, string sequenceid, object userState) {
            if ((this.FetchOfflineHoteldetOperationCompleted == null)) {
                this.FetchOfflineHoteldetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchOfflineHoteldetOperationCompleted);
            }
            this.InvokeAsync("FetchOfflineHoteldet", new object[] {
                        Citycode,
                        Cntrycode,
                        Flag,
                        Htlcode,
                        SupplierName,
                        username,
                        agentid,
                        terminalid,
                        ipaddress,
                        sequenceid}, this.FetchOfflineHoteldetOperationCompleted, userState);
        }
        
        private void OnFetchOfflineHoteldetOperationCompleted(object arg) {
            if ((this.FetchOfflineHoteldetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchOfflineHoteldetCompleted(this, new FetchOfflineHoteldetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCityCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCityCode(string strCityname, string status, string UserName, string AgentID, string TerminalId, string ipaddress, string sequenceid) {
            object[] results = this.Invoke("GetCityCode", new object[] {
                        strCityname,
                        status,
                        UserName,
                        AgentID,
                        TerminalId,
                        ipaddress,
                        sequenceid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCityCodeAsync(string strCityname, string status, string UserName, string AgentID, string TerminalId, string ipaddress, string sequenceid) {
            this.GetCityCodeAsync(strCityname, status, UserName, AgentID, TerminalId, ipaddress, sequenceid, null);
        }
        
        /// <remarks/>
        public void GetCityCodeAsync(string strCityname, string status, string UserName, string AgentID, string TerminalId, string ipaddress, string sequenceid, object userState) {
            if ((this.GetCityCodeOperationCompleted == null)) {
                this.GetCityCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityCodeOperationCompleted);
            }
            this.InvokeAsync("GetCityCode", new object[] {
                        strCityname,
                        status,
                        UserName,
                        AgentID,
                        TerminalId,
                        ipaddress,
                        sequenceid}, this.GetCityCodeOperationCompleted, userState);
        }
        
        private void OnGetCityCodeOperationCompleted(object arg) {
            if ((this.GetCityCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityCodeCompleted(this, new GetCityCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HotelAmenities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet HotelAmenities(string HotelId, string Username, string AgentID, string ipAddress, string sequenceid, string TerminalId) {
            object[] results = this.Invoke("HotelAmenities", new object[] {
                        HotelId,
                        Username,
                        AgentID,
                        ipAddress,
                        sequenceid,
                        TerminalId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void HotelAmenitiesAsync(string HotelId, string Username, string AgentID, string ipAddress, string sequenceid, string TerminalId) {
            this.HotelAmenitiesAsync(HotelId, Username, AgentID, ipAddress, sequenceid, TerminalId, null);
        }
        
        /// <remarks/>
        public void HotelAmenitiesAsync(string HotelId, string Username, string AgentID, string ipAddress, string sequenceid, string TerminalId, object userState) {
            if ((this.HotelAmenitiesOperationCompleted == null)) {
                this.HotelAmenitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHotelAmenitiesOperationCompleted);
            }
            this.InvokeAsync("HotelAmenities", new object[] {
                        HotelId,
                        Username,
                        AgentID,
                        ipAddress,
                        sequenceid,
                        TerminalId}, this.HotelAmenitiesOperationCompleted, userState);
        }
        
        private void OnHotelAmenitiesOperationCompleted(object arg) {
            if ((this.HotelAmenitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HotelAmenitiesCompleted(this, new HotelAmenitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertHtldetRefid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InsertHtldetRefid(string ErrorMsg, string CITYNAME, string CITYCODE, string Username, string AgentID, string ipAddress, string TerminalId, string sequenceid) {
            object[] results = this.Invoke("InsertHtldetRefid", new object[] {
                        ErrorMsg,
                        CITYNAME,
                        CITYCODE,
                        Username,
                        AgentID,
                        ipAddress,
                        TerminalId,
                        sequenceid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsertHtldetRefidAsync(string ErrorMsg, string CITYNAME, string CITYCODE, string Username, string AgentID, string ipAddress, string TerminalId, string sequenceid) {
            this.InsertHtldetRefidAsync(ErrorMsg, CITYNAME, CITYCODE, Username, AgentID, ipAddress, TerminalId, sequenceid, null);
        }
        
        /// <remarks/>
        public void InsertHtldetRefidAsync(string ErrorMsg, string CITYNAME, string CITYCODE, string Username, string AgentID, string ipAddress, string TerminalId, string sequenceid, object userState) {
            if ((this.InsertHtldetRefidOperationCompleted == null)) {
                this.InsertHtldetRefidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertHtldetRefidOperationCompleted);
            }
            this.InvokeAsync("InsertHtldetRefid", new object[] {
                        ErrorMsg,
                        CITYNAME,
                        CITYCODE,
                        Username,
                        AgentID,
                        ipAddress,
                        TerminalId,
                        sequenceid}, this.InsertHtldetRefidOperationCompleted, userState);
        }
        
        private void OnInsertHtldetRefidOperationCompleted(object arg) {
            if ((this.InsertHtldetRefidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertHtldetRefidCompleted(this, new InsertHtldetRefidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchHotelfiltercityname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchHotelfiltercityname(string KEYWORD, string status, string Username, string AgentID, string ipAddress, string seqId, string TerminalID) {
            object[] results = this.Invoke("FetchHotelfiltercityname", new object[] {
                        KEYWORD,
                        status,
                        Username,
                        AgentID,
                        ipAddress,
                        seqId,
                        TerminalID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchHotelfiltercitynameAsync(string KEYWORD, string status, string Username, string AgentID, string ipAddress, string seqId, string TerminalID) {
            this.FetchHotelfiltercitynameAsync(KEYWORD, status, Username, AgentID, ipAddress, seqId, TerminalID, null);
        }
        
        /// <remarks/>
        public void FetchHotelfiltercitynameAsync(string KEYWORD, string status, string Username, string AgentID, string ipAddress, string seqId, string TerminalID, object userState) {
            if ((this.FetchHotelfiltercitynameOperationCompleted == null)) {
                this.FetchHotelfiltercitynameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchHotelfiltercitynameOperationCompleted);
            }
            this.InvokeAsync("FetchHotelfiltercityname", new object[] {
                        KEYWORD,
                        status,
                        Username,
                        AgentID,
                        ipAddress,
                        seqId,
                        TerminalID}, this.FetchHotelfiltercitynameOperationCompleted, userState);
        }
        
        private void OnFetchHotelfiltercitynameOperationCompleted(object arg) {
            if ((this.FetchHotelfiltercitynameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchHotelfiltercitynameCompleted(this, new FetchHotelfiltercitynameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchApphtlname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchApphtlname(string CITY_CODE, string CNTRY_CODE, string flag, string Username, string AgentID, string ipAddress, string seqId, string TermID) {
            object[] results = this.Invoke("FetchApphtlname", new object[] {
                        CITY_CODE,
                        CNTRY_CODE,
                        flag,
                        Username,
                        AgentID,
                        ipAddress,
                        seqId,
                        TermID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchApphtlnameAsync(string CITY_CODE, string CNTRY_CODE, string flag, string Username, string AgentID, string ipAddress, string seqId, string TermID) {
            this.FetchApphtlnameAsync(CITY_CODE, CNTRY_CODE, flag, Username, AgentID, ipAddress, seqId, TermID, null);
        }
        
        /// <remarks/>
        public void FetchApphtlnameAsync(string CITY_CODE, string CNTRY_CODE, string flag, string Username, string AgentID, string ipAddress, string seqId, string TermID, object userState) {
            if ((this.FetchApphtlnameOperationCompleted == null)) {
                this.FetchApphtlnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchApphtlnameOperationCompleted);
            }
            this.InvokeAsync("FetchApphtlname", new object[] {
                        CITY_CODE,
                        CNTRY_CODE,
                        flag,
                        Username,
                        AgentID,
                        ipAddress,
                        seqId,
                        TermID}, this.FetchApphtlnameOperationCompleted, userState);
        }
        
        private void OnFetchApphtlnameOperationCompleted(object arg) {
            if ((this.FetchApphtlnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchApphtlnameCompleted(this, new FetchApphtlnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchOtherAgntLgnDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchOtherAgntLgnDetails(string username, string tid, string agentid, string ipAddress, string seqId) {
            object[] results = this.Invoke("FetchOtherAgntLgnDetails", new object[] {
                        username,
                        tid,
                        agentid,
                        ipAddress,
                        seqId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchOtherAgntLgnDetailsAsync(string username, string tid, string agentid, string ipAddress, string seqId) {
            this.FetchOtherAgntLgnDetailsAsync(username, tid, agentid, ipAddress, seqId, null);
        }
        
        /// <remarks/>
        public void FetchOtherAgntLgnDetailsAsync(string username, string tid, string agentid, string ipAddress, string seqId, object userState) {
            if ((this.FetchOtherAgntLgnDetailsOperationCompleted == null)) {
                this.FetchOtherAgntLgnDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchOtherAgntLgnDetailsOperationCompleted);
            }
            this.InvokeAsync("FetchOtherAgntLgnDetails", new object[] {
                        username,
                        tid,
                        agentid,
                        ipAddress,
                        seqId}, this.FetchOtherAgntLgnDetailsOperationCompleted, userState);
        }
        
        private void OnFetchOtherAgntLgnDetailsOperationCompleted(object arg) {
            if ((this.FetchOtherAgntLgnDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchOtherAgntLgnDetailsCompleted(this, new FetchOtherAgntLgnDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchHtlServc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchHtlServc(string str_SPNR, string tid, string agentid, string Username, string seqId, string ipAddress) {
            object[] results = this.Invoke("FetchHtlServc", new object[] {
                        str_SPNR,
                        tid,
                        agentid,
                        Username,
                        seqId,
                        ipAddress});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchHtlServcAsync(string str_SPNR, string tid, string agentid, string Username, string seqId, string ipAddress) {
            this.FetchHtlServcAsync(str_SPNR, tid, agentid, Username, seqId, ipAddress, null);
        }
        
        /// <remarks/>
        public void FetchHtlServcAsync(string str_SPNR, string tid, string agentid, string Username, string seqId, string ipAddress, object userState) {
            if ((this.FetchHtlServcOperationCompleted == null)) {
                this.FetchHtlServcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchHtlServcOperationCompleted);
            }
            this.InvokeAsync("FetchHtlServc", new object[] {
                        str_SPNR,
                        tid,
                        agentid,
                        Username,
                        seqId,
                        ipAddress}, this.FetchHtlServcOperationCompleted, userState);
        }
        
        private void OnFetchHtlServcOperationCompleted(object arg) {
            if ((this.FetchHtlServcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchHtlServcCompleted(this, new FetchHtlServcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchHtlExistpaxdet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchHtlExistpaxdet(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string dup_htlname, string dup_city, string Username, string agentid, string tid, string ipAddress, string seqId) {
            object[] results = this.Invoke("FetchHtlExistpaxdet", new object[] {
                        dup_firstname,
                        dup_lastname,
                        dup_checkin,
                        dup_checkout,
                        dup_htlname,
                        dup_city,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchHtlExistpaxdetAsync(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string dup_htlname, string dup_city, string Username, string agentid, string tid, string ipAddress, string seqId) {
            this.FetchHtlExistpaxdetAsync(dup_firstname, dup_lastname, dup_checkin, dup_checkout, dup_htlname, dup_city, Username, agentid, tid, ipAddress, seqId, null);
        }
        
        /// <remarks/>
        public void FetchHtlExistpaxdetAsync(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string dup_htlname, string dup_city, string Username, string agentid, string tid, string ipAddress, string seqId, object userState) {
            if ((this.FetchHtlExistpaxdetOperationCompleted == null)) {
                this.FetchHtlExistpaxdetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchHtlExistpaxdetOperationCompleted);
            }
            this.InvokeAsync("FetchHtlExistpaxdet", new object[] {
                        dup_firstname,
                        dup_lastname,
                        dup_checkin,
                        dup_checkout,
                        dup_htlname,
                        dup_city,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId}, this.FetchHtlExistpaxdetOperationCompleted, userState);
        }
        
        private void OnFetchHtlExistpaxdetOperationCompleted(object arg) {
            if ((this.FetchHtlExistpaxdetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchHtlExistpaxdetCompleted(this, new FetchHtlExistpaxdetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserthtlcancelReq", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InserthtlcancelReq(string bookagentid, string bookterminalid, string bookusername, string SPNR, string Room_pnr, string Penalty, string Cancelledby, string Username, string agentid, string tid, string ipAddress, string seqId) {
            object[] results = this.Invoke("InserthtlcancelReq", new object[] {
                        bookagentid,
                        bookterminalid,
                        bookusername,
                        SPNR,
                        Room_pnr,
                        Penalty,
                        Cancelledby,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InserthtlcancelReqAsync(string bookagentid, string bookterminalid, string bookusername, string SPNR, string Room_pnr, string Penalty, string Cancelledby, string Username, string agentid, string tid, string ipAddress, string seqId) {
            this.InserthtlcancelReqAsync(bookagentid, bookterminalid, bookusername, SPNR, Room_pnr, Penalty, Cancelledby, Username, agentid, tid, ipAddress, seqId, null);
        }
        
        /// <remarks/>
        public void InserthtlcancelReqAsync(string bookagentid, string bookterminalid, string bookusername, string SPNR, string Room_pnr, string Penalty, string Cancelledby, string Username, string agentid, string tid, string ipAddress, string seqId, object userState) {
            if ((this.InserthtlcancelReqOperationCompleted == null)) {
                this.InserthtlcancelReqOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserthtlcancelReqOperationCompleted);
            }
            this.InvokeAsync("InserthtlcancelReq", new object[] {
                        bookagentid,
                        bookterminalid,
                        bookusername,
                        SPNR,
                        Room_pnr,
                        Penalty,
                        Cancelledby,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId}, this.InserthtlcancelReqOperationCompleted, userState);
        }
        
        private void OnInserthtlcancelReqOperationCompleted(object arg) {
            if ((this.InserthtlcancelReqCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserthtlcancelReqCompleted(this, new InserthtlcancelReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchHtlDuplicatepaxdet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FetchHtlDuplicatepaxdet(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string Username, string agentid, string tid, string ipAddress, string seqId) {
            object[] results = this.Invoke("FetchHtlDuplicatepaxdet", new object[] {
                        dup_firstname,
                        dup_lastname,
                        dup_checkin,
                        dup_checkout,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FetchHtlDuplicatepaxdetAsync(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string Username, string agentid, string tid, string ipAddress, string seqId) {
            this.FetchHtlDuplicatepaxdetAsync(dup_firstname, dup_lastname, dup_checkin, dup_checkout, Username, agentid, tid, ipAddress, seqId, null);
        }
        
        /// <remarks/>
        public void FetchHtlDuplicatepaxdetAsync(string dup_firstname, string dup_lastname, string dup_checkin, string dup_checkout, string Username, string agentid, string tid, string ipAddress, string seqId, object userState) {
            if ((this.FetchHtlDuplicatepaxdetOperationCompleted == null)) {
                this.FetchHtlDuplicatepaxdetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchHtlDuplicatepaxdetOperationCompleted);
            }
            this.InvokeAsync("FetchHtlDuplicatepaxdet", new object[] {
                        dup_firstname,
                        dup_lastname,
                        dup_checkin,
                        dup_checkout,
                        Username,
                        agentid,
                        tid,
                        ipAddress,
                        seqId}, this.FetchHtlDuplicatepaxdetOperationCompleted, userState);
        }
        
        private void OnFetchHtlDuplicatepaxdetOperationCompleted(object arg) {
            if ((this.FetchHtlDuplicatepaxdetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchHtlDuplicatepaxdetCompleted(this, new FetchHtlDuplicatepaxdetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_VendorApps_Login_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_VendorApps_Login_Details(string AgentID, string TerminalID, string strTerminalType, string strUserName, string strPassword, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_VendorApps_Login_Details", new object[] {
                        AgentID,
                        TerminalID,
                        strTerminalType,
                        strUserName,
                        strPassword,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_VendorApps_Login_DetailsAsync(string AgentID, string TerminalID, string strTerminalType, string strUserName, string strPassword, string strIPAddress, string strSequence) {
            this.Fetch_VendorApps_Login_DetailsAsync(AgentID, TerminalID, strTerminalType, strUserName, strPassword, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_VendorApps_Login_DetailsAsync(string AgentID, string TerminalID, string strTerminalType, string strUserName, string strPassword, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_VendorApps_Login_DetailsOperationCompleted == null)) {
                this.Fetch_VendorApps_Login_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_VendorApps_Login_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_VendorApps_Login_Details", new object[] {
                        AgentID,
                        TerminalID,
                        strTerminalType,
                        strUserName,
                        strPassword,
                        strIPAddress,
                        strSequence}, this.Fetch_VendorApps_Login_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_VendorApps_Login_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_VendorApps_Login_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_VendorApps_Login_DetailsCompleted(this, new Fetch_VendorApps_Login_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Delete_Supplier_Commission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Delete_Supplier_Commission(string strSupplierID, string TerminalID, string strAirlineCode, string strOrigin, string strDestination, string strClass, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, ref string Message) {
            object[] results = this.Invoke("Insert_Delete_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        strAirlineCode,
                        strOrigin,
                        strDestination,
                        strClass,
                        strRefID,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Delete_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string strAirlineCode, string strOrigin, string strDestination, string strClass, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message) {
            this.Insert_Delete_Supplier_CommissionAsync(strSupplierID, TerminalID, strAirlineCode, strOrigin, strDestination, strClass, strRefID, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Insert_Delete_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string strAirlineCode, string strOrigin, string strDestination, string strClass, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message, object userState) {
            if ((this.Insert_Delete_Supplier_CommissionOperationCompleted == null)) {
                this.Insert_Delete_Supplier_CommissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Delete_Supplier_CommissionOperationCompleted);
            }
            this.InvokeAsync("Insert_Delete_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        strAirlineCode,
                        strOrigin,
                        strDestination,
                        strClass,
                        strRefID,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Insert_Delete_Supplier_CommissionOperationCompleted, userState);
        }
        
        private void OnInsert_Delete_Supplier_CommissionOperationCompleted(object arg) {
            if ((this.Insert_Delete_Supplier_CommissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Delete_Supplier_CommissionCompleted(this, new Insert_Delete_Supplier_CommissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Supplier_Credit_And_Debit_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Supplier_Credit_And_Debit_Details(
                    string strSupplierID, 
                    string TerminalID, 
                    string strSupplierName, 
                    string strUserName, 
                    string strSPNR, 
                    string strUserTrackID, 
                    string strTransType, 
                    string strTransAmount, 
                    string strEnteredBy, 
                    string strRemarks, 
                    string strAirlinePNR, 
                    string strCRSPNR, 
                    string strProduct, 
                    string strTransName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    ref string Message) {
            object[] results = this.Invoke("Insert_Supplier_Credit_And_Debit_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        strSupplierName,
                        strUserName,
                        strSPNR,
                        strUserTrackID,
                        strTransType,
                        strTransAmount,
                        strEnteredBy,
                        strRemarks,
                        strAirlinePNR,
                        strCRSPNR,
                        strProduct,
                        strTransName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Supplier_Credit_And_Debit_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strSupplierName, 
                    string strUserName, 
                    string strSPNR, 
                    string strUserTrackID, 
                    string strTransType, 
                    string strTransAmount, 
                    string strEnteredBy, 
                    string strRemarks, 
                    string strAirlinePNR, 
                    string strCRSPNR, 
                    string strProduct, 
                    string strTransName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message) {
            this.Insert_Supplier_Credit_And_Debit_DetailsAsync(strSupplierID, TerminalID, strSupplierName, strUserName, strSPNR, strUserTrackID, strTransType, strTransAmount, strEnteredBy, strRemarks, strAirlinePNR, strCRSPNR, strProduct, strTransName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Insert_Supplier_Credit_And_Debit_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strSupplierName, 
                    string strUserName, 
                    string strSPNR, 
                    string strUserTrackID, 
                    string strTransType, 
                    string strTransAmount, 
                    string strEnteredBy, 
                    string strRemarks, 
                    string strAirlinePNR, 
                    string strCRSPNR, 
                    string strProduct, 
                    string strTransName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message, 
                    object userState) {
            if ((this.Insert_Supplier_Credit_And_Debit_DetailsOperationCompleted == null)) {
                this.Insert_Supplier_Credit_And_Debit_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Supplier_Credit_And_Debit_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Supplier_Credit_And_Debit_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        strSupplierName,
                        strUserName,
                        strSPNR,
                        strUserTrackID,
                        strTransType,
                        strTransAmount,
                        strEnteredBy,
                        strRemarks,
                        strAirlinePNR,
                        strCRSPNR,
                        strProduct,
                        strTransName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Insert_Supplier_Credit_And_Debit_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Supplier_Credit_And_Debit_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Supplier_Credit_And_Debit_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Supplier_Credit_And_Debit_DetailsCompleted(this, new Insert_Supplier_Credit_And_Debit_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Home", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Home(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Home", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_HomeAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_HomeAsync(strFromDate, strToDate, strSupplierID, TerminalID, strFlag, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_HomeAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_HomeOperationCompleted == null)) {
                this.Fetch_Supplier_HomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_HomeOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Home", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_HomeOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_HomeOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_HomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_HomeCompleted(this, new Fetch_Supplier_HomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Home_MonthlyWise_Report", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Home_MonthlyWise_Report(string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Home_MonthlyWise_Report", new object[] {
                        strSupplierID,
                        TerminalID,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Home_MonthlyWise_ReportAsync(string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Home_MonthlyWise_ReportAsync(strSupplierID, TerminalID, strFlag, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Home_MonthlyWise_ReportAsync(string strSupplierID, string TerminalID, string strFlag, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Home_MonthlyWise_ReportOperationCompleted == null)) {
                this.Fetch_Supplier_Home_MonthlyWise_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Home_MonthlyWise_ReportOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Home_MonthlyWise_Report", new object[] {
                        strSupplierID,
                        TerminalID,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Home_MonthlyWise_ReportOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Home_MonthlyWise_ReportOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Home_MonthlyWise_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Home_MonthlyWise_ReportCompleted(this, new Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Visa_Master", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Visa_Master(string strSupplierID, string TerminalID, string strVisa, string username, string terminalType, string ipAddress, string sequenceID) {
            object[] results = this.Invoke("Fetch_Visa_Master", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisa,
                        username,
                        terminalType,
                        ipAddress,
                        sequenceID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Visa_MasterAsync(string strSupplierID, string TerminalID, string strVisa, string username, string terminalType, string ipAddress, string sequenceID) {
            this.Fetch_Visa_MasterAsync(strSupplierID, TerminalID, strVisa, username, terminalType, ipAddress, sequenceID, null);
        }
        
        /// <remarks/>
        public void Fetch_Visa_MasterAsync(string strSupplierID, string TerminalID, string strVisa, string username, string terminalType, string ipAddress, string sequenceID, object userState) {
            if ((this.Fetch_Visa_MasterOperationCompleted == null)) {
                this.Fetch_Visa_MasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Visa_MasterOperationCompleted);
            }
            this.InvokeAsync("Fetch_Visa_Master", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisa,
                        username,
                        terminalType,
                        ipAddress,
                        sequenceID}, this.Fetch_Visa_MasterOperationCompleted, userState);
        }
        
        private void OnFetch_Visa_MasterOperationCompleted(object arg) {
            if ((this.Fetch_Visa_MasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Visa_MasterCompleted(this, new Fetch_Visa_MasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Airline_Markup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Airline_Markup(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Airline_Markup", new object[] {
                        strSupplierID,
                        TerminalID,
                        AirlineCategory,
                        AirlineName,
                        MarkupType,
                        status,
                        statusview,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Airline_MarkupAsync(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Airline_MarkupAsync(strSupplierID, TerminalID, AirlineCategory, AirlineName, MarkupType, status, statusview, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Airline_MarkupAsync(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Airline_MarkupOperationCompleted == null)) {
                this.Fetch_Supplier_Airline_MarkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Airline_MarkupOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Airline_Markup", new object[] {
                        strSupplierID,
                        TerminalID,
                        AirlineCategory,
                        AirlineName,
                        MarkupType,
                        status,
                        statusview,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Airline_MarkupOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Airline_MarkupOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Airline_MarkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Airline_MarkupCompleted(this, new Fetch_Supplier_Airline_MarkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Airline_Markup_Result", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Fetch_Supplier_Airline_Markup_Result(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Airline_Markup_Result", new object[] {
                        strSupplierID,
                        TerminalID,
                        AirlineCategory,
                        AirlineName,
                        MarkupType,
                        status,
                        statusview,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Airline_Markup_ResultAsync(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Airline_Markup_ResultAsync(strSupplierID, TerminalID, AirlineCategory, AirlineName, MarkupType, status, statusview, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Airline_Markup_ResultAsync(string strSupplierID, string TerminalID, string AirlineCategory, string AirlineName, string MarkupType, string status, string statusview, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Airline_Markup_ResultOperationCompleted == null)) {
                this.Fetch_Supplier_Airline_Markup_ResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Airline_Markup_ResultOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Airline_Markup_Result", new object[] {
                        strSupplierID,
                        TerminalID,
                        AirlineCategory,
                        AirlineName,
                        MarkupType,
                        status,
                        statusview,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Airline_Markup_ResultOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Airline_Markup_ResultOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Airline_Markup_ResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Airline_Markup_ResultCompleted(this, new Fetch_Supplier_Airline_Markup_ResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Visa_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Visa_Details(string strSupplierID, string TerminalID, string username, string Status, string strFromDate, string strToDate, string strFirstName, string strLastName, string strVisaNumber, string SPNR, string strPaymentMode, string ipAddress, string sequenceID, string terminalType) {
            object[] results = this.Invoke("Fetch_Visa_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        username,
                        Status,
                        strFromDate,
                        strToDate,
                        strFirstName,
                        strLastName,
                        strVisaNumber,
                        SPNR,
                        strPaymentMode,
                        ipAddress,
                        sequenceID,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Visa_DetailsAsync(string strSupplierID, string TerminalID, string username, string Status, string strFromDate, string strToDate, string strFirstName, string strLastName, string strVisaNumber, string SPNR, string strPaymentMode, string ipAddress, string sequenceID, string terminalType) {
            this.Fetch_Visa_DetailsAsync(strSupplierID, TerminalID, username, Status, strFromDate, strToDate, strFirstName, strLastName, strVisaNumber, SPNR, strPaymentMode, ipAddress, sequenceID, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Visa_DetailsAsync(string strSupplierID, string TerminalID, string username, string Status, string strFromDate, string strToDate, string strFirstName, string strLastName, string strVisaNumber, string SPNR, string strPaymentMode, string ipAddress, string sequenceID, string terminalType, object userState) {
            if ((this.Fetch_Visa_DetailsOperationCompleted == null)) {
                this.Fetch_Visa_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Visa_DetailsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Visa_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        username,
                        Status,
                        strFromDate,
                        strToDate,
                        strFirstName,
                        strLastName,
                        strVisaNumber,
                        SPNR,
                        strPaymentMode,
                        ipAddress,
                        sequenceID,
                        terminalType}, this.Fetch_Visa_DetailsOperationCompleted, userState);
        }
        
        private void OnFetch_Visa_DetailsOperationCompleted(object arg) {
            if ((this.Fetch_Visa_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Visa_DetailsCompleted(this, new Fetch_Visa_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_SSR_Details_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Fetch_SSR_Details_New(
                    string flag, 
                    string branchID, 
                    string agencyname, 
                    string agentid, 
                    string terminalid, 
                    string status, 
                    string TerminalType, 
                    string StrAirportType, 
                    string fromdate, 
                    string todate, 
                    string Type, 
                    string username, 
                    string ip, 
                    string sequence, 
                    ref System.Data.DataSet my_ds, 
                    ref string strErrorMsg, 
                    string function, 
                    string pagename) {
            object[] results = this.Invoke("Fetch_SSR_Details_New", new object[] {
                        flag,
                        branchID,
                        agencyname,
                        agentid,
                        terminalid,
                        status,
                        TerminalType,
                        StrAirportType,
                        fromdate,
                        todate,
                        Type,
                        username,
                        ip,
                        sequence,
                        my_ds,
                        strErrorMsg,
                        function,
                        pagename});
            my_ds = ((System.Data.DataSet)(results[1]));
            strErrorMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_SSR_Details_NewAsync(
                    string flag, 
                    string branchID, 
                    string agencyname, 
                    string agentid, 
                    string terminalid, 
                    string status, 
                    string TerminalType, 
                    string StrAirportType, 
                    string fromdate, 
                    string todate, 
                    string Type, 
                    string username, 
                    string ip, 
                    string sequence, 
                    System.Data.DataSet my_ds, 
                    string strErrorMsg, 
                    string function, 
                    string pagename) {
            this.Fetch_SSR_Details_NewAsync(flag, branchID, agencyname, agentid, terminalid, status, TerminalType, StrAirportType, fromdate, todate, Type, username, ip, sequence, my_ds, strErrorMsg, function, pagename, null);
        }
        
        /// <remarks/>
        public void Fetch_SSR_Details_NewAsync(
                    string flag, 
                    string branchID, 
                    string agencyname, 
                    string agentid, 
                    string terminalid, 
                    string status, 
                    string TerminalType, 
                    string StrAirportType, 
                    string fromdate, 
                    string todate, 
                    string Type, 
                    string username, 
                    string ip, 
                    string sequence, 
                    System.Data.DataSet my_ds, 
                    string strErrorMsg, 
                    string function, 
                    string pagename, 
                    object userState) {
            if ((this.Fetch_SSR_Details_NewOperationCompleted == null)) {
                this.Fetch_SSR_Details_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_SSR_Details_NewOperationCompleted);
            }
            this.InvokeAsync("Fetch_SSR_Details_New", new object[] {
                        flag,
                        branchID,
                        agencyname,
                        agentid,
                        terminalid,
                        status,
                        TerminalType,
                        StrAirportType,
                        fromdate,
                        todate,
                        Type,
                        username,
                        ip,
                        sequence,
                        my_ds,
                        strErrorMsg,
                        function,
                        pagename}, this.Fetch_SSR_Details_NewOperationCompleted, userState);
        }
        
        private void OnFetch_SSR_Details_NewOperationCompleted(object arg) {
            if ((this.Fetch_SSR_Details_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_SSR_Details_NewCompleted(this, new Fetch_SSR_Details_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Current_Balance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Current_Balance(string strAgentID, string TerminalID, string strPaymentMode, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Current_Balance", new object[] {
                        strAgentID,
                        TerminalID,
                        strPaymentMode,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Current_BalanceAsync(string strAgentID, string TerminalID, string strPaymentMode, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Current_BalanceAsync(strAgentID, TerminalID, strPaymentMode, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Current_BalanceAsync(string strAgentID, string TerminalID, string strPaymentMode, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Current_BalanceOperationCompleted == null)) {
                this.Fetch_Current_BalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Current_BalanceOperationCompleted);
            }
            this.InvokeAsync("Fetch_Current_Balance", new object[] {
                        strAgentID,
                        TerminalID,
                        strPaymentMode,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Current_BalanceOperationCompleted, userState);
        }
        
        private void OnFetch_Current_BalanceOperationCompleted(object arg) {
            if ((this.Fetch_Current_BalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Current_BalanceCompleted(this, new Fetch_Current_BalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Visa_Fee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Visa_Fee(string strVisaType, string strProcessingType, string strCurrentDate, string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Visa_Fee", new object[] {
                        strVisaType,
                        strProcessingType,
                        strCurrentDate,
                        strSupplierID,
                        TerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Visa_FeeAsync(string strVisaType, string strProcessingType, string strCurrentDate, string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Visa_FeeAsync(strVisaType, strProcessingType, strCurrentDate, strSupplierID, TerminalID, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Visa_FeeAsync(string strVisaType, string strProcessingType, string strCurrentDate, string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Visa_FeeOperationCompleted == null)) {
                this.Fetch_Visa_FeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Visa_FeeOperationCompleted);
            }
            this.InvokeAsync("Fetch_Visa_Fee", new object[] {
                        strVisaType,
                        strProcessingType,
                        strCurrentDate,
                        strSupplierID,
                        TerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Visa_FeeOperationCompleted, userState);
        }
        
        private void OnFetch_Visa_FeeOperationCompleted(object arg) {
            if ((this.Fetch_Visa_FeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Visa_FeeCompleted(this, new Fetch_Visa_FeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Supplier_Control_Panel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Update_Supplier_Control_Panel(string strSupplierID, string TerminalID, string strAllowTicket, string strAllowCredit, string strAllowPayments, string strStatus, string strCreditAmount, string strEmail, string strAlertFlag, string strPaymentType, string username, string ipAddress, string sequenceID, string terminalType) {
            object[] results = this.Invoke("Update_Supplier_Control_Panel", new object[] {
                        strSupplierID,
                        TerminalID,
                        strAllowTicket,
                        strAllowCredit,
                        strAllowPayments,
                        strStatus,
                        strCreditAmount,
                        strEmail,
                        strAlertFlag,
                        strPaymentType,
                        username,
                        ipAddress,
                        sequenceID,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Supplier_Control_PanelAsync(string strSupplierID, string TerminalID, string strAllowTicket, string strAllowCredit, string strAllowPayments, string strStatus, string strCreditAmount, string strEmail, string strAlertFlag, string strPaymentType, string username, string ipAddress, string sequenceID, string terminalType) {
            this.Update_Supplier_Control_PanelAsync(strSupplierID, TerminalID, strAllowTicket, strAllowCredit, strAllowPayments, strStatus, strCreditAmount, strEmail, strAlertFlag, strPaymentType, username, ipAddress, sequenceID, terminalType, null);
        }
        
        /// <remarks/>
        public void Update_Supplier_Control_PanelAsync(string strSupplierID, string TerminalID, string strAllowTicket, string strAllowCredit, string strAllowPayments, string strStatus, string strCreditAmount, string strEmail, string strAlertFlag, string strPaymentType, string username, string ipAddress, string sequenceID, string terminalType, object userState) {
            if ((this.Update_Supplier_Control_PanelOperationCompleted == null)) {
                this.Update_Supplier_Control_PanelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Supplier_Control_PanelOperationCompleted);
            }
            this.InvokeAsync("Update_Supplier_Control_Panel", new object[] {
                        strSupplierID,
                        TerminalID,
                        strAllowTicket,
                        strAllowCredit,
                        strAllowPayments,
                        strStatus,
                        strCreditAmount,
                        strEmail,
                        strAlertFlag,
                        strPaymentType,
                        username,
                        ipAddress,
                        sequenceID,
                        terminalType}, this.Update_Supplier_Control_PanelOperationCompleted, userState);
        }
        
        private void OnUpdate_Supplier_Control_PanelOperationCompleted(object arg) {
            if ((this.Update_Supplier_Control_PanelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Supplier_Control_PanelCompleted(this, new Update_Supplier_Control_PanelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Sales_Reports", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Sales_Reports(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Sales_Reports", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strStatus,
                        strUpdateAmount,
                        strRemarks,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Sales_ReportsAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Sales_ReportsAsync(strFromDate, strToDate, strSupplierID, TerminalID, strStatus, strUpdateAmount, strRemarks, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Sales_ReportsAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Sales_ReportsOperationCompleted == null)) {
                this.Fetch_Supplier_Sales_ReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Sales_ReportsOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Sales_Reports", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strStatus,
                        strUpdateAmount,
                        strRemarks,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Sales_ReportsOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Sales_ReportsOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Sales_ReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Sales_ReportsCompleted(this, new Fetch_Supplier_Sales_ReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Supplier_Sales_Reports", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Update_Supplier_Sales_Reports(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string strUserName, string strTerminalType, string strIPAddress, string strSequence, ref string Message) {
            object[] results = this.Invoke("Update_Supplier_Sales_Reports", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strStatus,
                        strUpdateAmount,
                        strRemarks,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Supplier_Sales_ReportsAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message) {
            this.Update_Supplier_Sales_ReportsAsync(strFromDate, strToDate, strSupplierID, TerminalID, strStatus, strUpdateAmount, strRemarks, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Update_Supplier_Sales_ReportsAsync(string strFromDate, string strToDate, string strSupplierID, string TerminalID, string strStatus, string strUpdateAmount, string strRemarks, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message, object userState) {
            if ((this.Update_Supplier_Sales_ReportsOperationCompleted == null)) {
                this.Update_Supplier_Sales_ReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Supplier_Sales_ReportsOperationCompleted);
            }
            this.InvokeAsync("Update_Supplier_Sales_Reports", new object[] {
                        strFromDate,
                        strToDate,
                        strSupplierID,
                        TerminalID,
                        strStatus,
                        strUpdateAmount,
                        strRemarks,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Update_Supplier_Sales_ReportsOperationCompleted, userState);
        }
        
        private void OnUpdate_Supplier_Sales_ReportsOperationCompleted(object arg) {
            if ((this.Update_Supplier_Sales_ReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Supplier_Sales_ReportsCompleted(this, new Update_Supplier_Sales_ReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_VisaDetails_With_KnownValues", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_VisaDetails_With_KnownValues(string SPNR, string strAgentID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_VisaDetails_With_KnownValues", new object[] {
                        SPNR,
                        strAgentID,
                        strTerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_VisaDetails_With_KnownValuesAsync(string SPNR, string strAgentID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_VisaDetails_With_KnownValuesAsync(SPNR, strAgentID, strTerminalID, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_VisaDetails_With_KnownValuesAsync(string SPNR, string strAgentID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_VisaDetails_With_KnownValuesOperationCompleted == null)) {
                this.Fetch_VisaDetails_With_KnownValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_VisaDetails_With_KnownValuesOperationCompleted);
            }
            this.InvokeAsync("Fetch_VisaDetails_With_KnownValues", new object[] {
                        SPNR,
                        strAgentID,
                        strTerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_VisaDetails_With_KnownValuesOperationCompleted, userState);
        }
        
        private void OnFetch_VisaDetails_With_KnownValuesOperationCompleted(object arg) {
            if ((this.Fetch_VisaDetails_With_KnownValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_VisaDetails_With_KnownValuesCompleted(this, new Fetch_VisaDetails_With_KnownValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Visa_Supplier_Fare", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Visa_Supplier_Fare(string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Visa_Supplier_Fare", new object[] {
                        strSupplierID,
                        TerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Visa_Supplier_FareAsync(string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Visa_Supplier_FareAsync(strSupplierID, TerminalID, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Visa_Supplier_FareAsync(string strSupplierID, string TerminalID, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Visa_Supplier_FareOperationCompleted == null)) {
                this.Fetch_Visa_Supplier_FareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Visa_Supplier_FareOperationCompleted);
            }
            this.InvokeAsync("Fetch_Visa_Supplier_Fare", new object[] {
                        strSupplierID,
                        TerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Visa_Supplier_FareOperationCompleted, userState);
        }
        
        private void OnFetch_Visa_Supplier_FareOperationCompleted(object arg) {
            if ((this.Fetch_Visa_Supplier_FareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Visa_Supplier_FareCompleted(this, new Fetch_Visa_Supplier_FareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Visa_Amount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Visa_Amount(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCreatedBy, 
                    string strUpdatedDate, 
                    string strStatus, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strCountryCode, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    ref string Message) {
            object[] results = this.Invoke("Insert_Visa_Amount", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaCategory,
                        strVisaType,
                        strFromDate,
                        strToDate,
                        strVisaFare,
                        strUpdatedBy,
                        strCreatedBy,
                        strUpdatedDate,
                        strStatus,
                        strCancelpenalty,
                        strRejectpenalty,
                        strRemarks,
                        strCountryCode,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Visa_AmountAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCreatedBy, 
                    string strUpdatedDate, 
                    string strStatus, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strCountryCode, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message) {
            this.Insert_Visa_AmountAsync(strSupplierID, TerminalID, strVisaCategory, strVisaType, strFromDate, strToDate, strVisaFare, strUpdatedBy, strCreatedBy, strUpdatedDate, strStatus, strCancelpenalty, strRejectpenalty, strRemarks, strCountryCode, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Insert_Visa_AmountAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCreatedBy, 
                    string strUpdatedDate, 
                    string strStatus, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strCountryCode, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message, 
                    object userState) {
            if ((this.Insert_Visa_AmountOperationCompleted == null)) {
                this.Insert_Visa_AmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Visa_AmountOperationCompleted);
            }
            this.InvokeAsync("Insert_Visa_Amount", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaCategory,
                        strVisaType,
                        strFromDate,
                        strToDate,
                        strVisaFare,
                        strUpdatedBy,
                        strCreatedBy,
                        strUpdatedDate,
                        strStatus,
                        strCancelpenalty,
                        strRejectpenalty,
                        strRemarks,
                        strCountryCode,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Insert_Visa_AmountOperationCompleted, userState);
        }
        
        private void OnInsert_Visa_AmountOperationCompleted(object arg) {
            if ((this.Insert_Visa_AmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Visa_AmountCompleted(this, new Insert_Visa_AmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_Visa_Amount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Update_Visa_Amount(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strRefID, 
                    string strVisitingCountry, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    ref string Message) {
            object[] results = this.Invoke("Update_Visa_Amount", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaCategory,
                        strVisaType,
                        strFromDate,
                        strToDate,
                        strVisaFare,
                        strUpdatedBy,
                        strCancelpenalty,
                        strRejectpenalty,
                        strRemarks,
                        strRefID,
                        strVisitingCountry,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Visa_AmountAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strRefID, 
                    string strVisitingCountry, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message) {
            this.Update_Visa_AmountAsync(strSupplierID, TerminalID, strVisaCategory, strVisaType, strFromDate, strToDate, strVisaFare, strUpdatedBy, strCancelpenalty, strRejectpenalty, strRemarks, strRefID, strVisitingCountry, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Update_Visa_AmountAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string strVisaCategory, 
                    string strVisaType, 
                    string strFromDate, 
                    string strToDate, 
                    string strVisaFare, 
                    string strUpdatedBy, 
                    string strCancelpenalty, 
                    string strRejectpenalty, 
                    string strRemarks, 
                    string strRefID, 
                    string strVisitingCountry, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message, 
                    object userState) {
            if ((this.Update_Visa_AmountOperationCompleted == null)) {
                this.Update_Visa_AmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Visa_AmountOperationCompleted);
            }
            this.InvokeAsync("Update_Visa_Amount", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaCategory,
                        strVisaType,
                        strFromDate,
                        strToDate,
                        strVisaFare,
                        strUpdatedBy,
                        strCancelpenalty,
                        strRejectpenalty,
                        strRemarks,
                        strRefID,
                        strVisitingCountry,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Update_Visa_AmountOperationCompleted, userState);
        }
        
        private void OnUpdate_Visa_AmountOperationCompleted(object arg) {
            if ((this.Update_Visa_AmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Visa_AmountCompleted(this, new Update_Visa_AmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Visa_Plan", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Visa_Plan(string strSupplierID, string TerminalID, string strStatusID, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Visa_Plan", new object[] {
                        strSupplierID,
                        TerminalID,
                        strStatusID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Visa_PlanAsync(string strSupplierID, string TerminalID, string strStatusID, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Visa_PlanAsync(strSupplierID, TerminalID, strStatusID, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Visa_PlanAsync(string strSupplierID, string TerminalID, string strStatusID, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Visa_PlanOperationCompleted == null)) {
                this.Fetch_Visa_PlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Visa_PlanOperationCompleted);
            }
            this.InvokeAsync("Fetch_Visa_Plan", new object[] {
                        strSupplierID,
                        TerminalID,
                        strStatusID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Visa_PlanOperationCompleted, userState);
        }
        
        private void OnFetch_Visa_PlanOperationCompleted(object arg) {
            if ((this.Fetch_Visa_PlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Visa_PlanCompleted(this, new Fetch_Visa_PlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete_Visa_Fee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Delete_Visa_Fee(string strSupplierID, string TerminalID, string strVisaType, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, ref string Message) {
            object[] results = this.Invoke("Delete_Visa_Fee", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaType,
                        strRefID,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Delete_Visa_FeeAsync(string strSupplierID, string TerminalID, string strVisaType, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message) {
            this.Delete_Visa_FeeAsync(strSupplierID, TerminalID, strVisaType, strRefID, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Delete_Visa_FeeAsync(string strSupplierID, string TerminalID, string strVisaType, string strRefID, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message, object userState) {
            if ((this.Delete_Visa_FeeOperationCompleted == null)) {
                this.Delete_Visa_FeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelete_Visa_FeeOperationCompleted);
            }
            this.InvokeAsync("Delete_Visa_Fee", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaType,
                        strRefID,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Delete_Visa_FeeOperationCompleted, userState);
        }
        
        private void OnDelete_Visa_FeeOperationCompleted(object arg) {
            if ((this.Delete_Visa_FeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Delete_Visa_FeeCompleted(this, new Delete_Visa_FeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_Updating_Supplier_Balance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool P_Updating_Supplier_Balance(
                    string amount, 
                    string trackid, 
                    string spnr, 
                    string VisaNumber, 
                    string VisaRefNumber, 
                    string Remarks, 
                    string supplierId, 
                    string SupplierName, 
                    string UserID, 
                    string IpAddress, 
                    string UserName, 
                    string Paymentmode, 
                    decimal sequenceID, 
                    string TerminalType, 
                    ref string ErrorMsg, 
                    string lstrPageName, 
                    string lstrFunctionName, 
                    string param, 
                    string flag, 
                    string f_type) {
            object[] results = this.Invoke("P_Updating_Supplier_Balance", new object[] {
                        amount,
                        trackid,
                        spnr,
                        VisaNumber,
                        VisaRefNumber,
                        Remarks,
                        supplierId,
                        SupplierName,
                        UserID,
                        IpAddress,
                        UserName,
                        Paymentmode,
                        sequenceID,
                        TerminalType,
                        ErrorMsg,
                        lstrPageName,
                        lstrFunctionName,
                        param,
                        flag,
                        f_type});
            ErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void P_Updating_Supplier_BalanceAsync(
                    string amount, 
                    string trackid, 
                    string spnr, 
                    string VisaNumber, 
                    string VisaRefNumber, 
                    string Remarks, 
                    string supplierId, 
                    string SupplierName, 
                    string UserID, 
                    string IpAddress, 
                    string UserName, 
                    string Paymentmode, 
                    decimal sequenceID, 
                    string TerminalType, 
                    string ErrorMsg, 
                    string lstrPageName, 
                    string lstrFunctionName, 
                    string param, 
                    string flag, 
                    string f_type) {
            this.P_Updating_Supplier_BalanceAsync(amount, trackid, spnr, VisaNumber, VisaRefNumber, Remarks, supplierId, SupplierName, UserID, IpAddress, UserName, Paymentmode, sequenceID, TerminalType, ErrorMsg, lstrPageName, lstrFunctionName, param, flag, f_type, null);
        }
        
        /// <remarks/>
        public void P_Updating_Supplier_BalanceAsync(
                    string amount, 
                    string trackid, 
                    string spnr, 
                    string VisaNumber, 
                    string VisaRefNumber, 
                    string Remarks, 
                    string supplierId, 
                    string SupplierName, 
                    string UserID, 
                    string IpAddress, 
                    string UserName, 
                    string Paymentmode, 
                    decimal sequenceID, 
                    string TerminalType, 
                    string ErrorMsg, 
                    string lstrPageName, 
                    string lstrFunctionName, 
                    string param, 
                    string flag, 
                    string f_type, 
                    object userState) {
            if ((this.P_Updating_Supplier_BalanceOperationCompleted == null)) {
                this.P_Updating_Supplier_BalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_Updating_Supplier_BalanceOperationCompleted);
            }
            this.InvokeAsync("P_Updating_Supplier_Balance", new object[] {
                        amount,
                        trackid,
                        spnr,
                        VisaNumber,
                        VisaRefNumber,
                        Remarks,
                        supplierId,
                        SupplierName,
                        UserID,
                        IpAddress,
                        UserName,
                        Paymentmode,
                        sequenceID,
                        TerminalType,
                        ErrorMsg,
                        lstrPageName,
                        lstrFunctionName,
                        param,
                        flag,
                        f_type}, this.P_Updating_Supplier_BalanceOperationCompleted, userState);
        }
        
        private void OnP_Updating_Supplier_BalanceOperationCompleted(object arg) {
            if ((this.P_Updating_Supplier_BalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_Updating_Supplier_BalanceCompleted(this, new P_Updating_Supplier_BalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check_Visa_Number", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Check_Visa_Number(string strSupplierID, string TerminalID, string strVisaNumber, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Check_Visa_Number", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaNumber,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Check_Visa_NumberAsync(string strSupplierID, string TerminalID, string strVisaNumber, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Check_Visa_NumberAsync(strSupplierID, TerminalID, strVisaNumber, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Check_Visa_NumberAsync(string strSupplierID, string TerminalID, string strVisaNumber, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Check_Visa_NumberOperationCompleted == null)) {
                this.Check_Visa_NumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheck_Visa_NumberOperationCompleted);
            }
            this.InvokeAsync("Check_Visa_Number", new object[] {
                        strSupplierID,
                        TerminalID,
                        strVisaNumber,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Check_Visa_NumberOperationCompleted, userState);
        }
        
        private void OnCheck_Visa_NumberOperationCompleted(object arg) {
            if ((this.Check_Visa_NumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Check_Visa_NumberCompleted(this, new Check_Visa_NumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSuplierbalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSuplierbalance(
                    string Supplierid, 
                    string paymentmode, 
                    string transname, 
                    string fare, 
                    string transtype, 
                    string amount, 
                    string sign, 
                    string remarks, 
                    string agencyName, 
                    string creditNo, 
                    string creditDate, 
                    string paymentType, 
                    string bankName, 
                    string branchName, 
                    string receivedBy, 
                    string strUserName, 
                    string strIPAddress, 
                    string sequence, 
                    string strAirlinePNR, 
                    string Supliername, 
                    string TerminalType, 
                    string SequenceID, 
                    string TerminalId) {
            object[] results = this.Invoke("SetSuplierbalance", new object[] {
                        Supplierid,
                        paymentmode,
                        transname,
                        fare,
                        transtype,
                        amount,
                        sign,
                        remarks,
                        agencyName,
                        creditNo,
                        creditDate,
                        paymentType,
                        bankName,
                        branchName,
                        receivedBy,
                        strUserName,
                        strIPAddress,
                        sequence,
                        strAirlinePNR,
                        Supliername,
                        TerminalType,
                        SequenceID,
                        TerminalId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSuplierbalanceAsync(
                    string Supplierid, 
                    string paymentmode, 
                    string transname, 
                    string fare, 
                    string transtype, 
                    string amount, 
                    string sign, 
                    string remarks, 
                    string agencyName, 
                    string creditNo, 
                    string creditDate, 
                    string paymentType, 
                    string bankName, 
                    string branchName, 
                    string receivedBy, 
                    string strUserName, 
                    string strIPAddress, 
                    string sequence, 
                    string strAirlinePNR, 
                    string Supliername, 
                    string TerminalType, 
                    string SequenceID, 
                    string TerminalId) {
            this.SetSuplierbalanceAsync(Supplierid, paymentmode, transname, fare, transtype, amount, sign, remarks, agencyName, creditNo, creditDate, paymentType, bankName, branchName, receivedBy, strUserName, strIPAddress, sequence, strAirlinePNR, Supliername, TerminalType, SequenceID, TerminalId, null);
        }
        
        /// <remarks/>
        public void SetSuplierbalanceAsync(
                    string Supplierid, 
                    string paymentmode, 
                    string transname, 
                    string fare, 
                    string transtype, 
                    string amount, 
                    string sign, 
                    string remarks, 
                    string agencyName, 
                    string creditNo, 
                    string creditDate, 
                    string paymentType, 
                    string bankName, 
                    string branchName, 
                    string receivedBy, 
                    string strUserName, 
                    string strIPAddress, 
                    string sequence, 
                    string strAirlinePNR, 
                    string Supliername, 
                    string TerminalType, 
                    string SequenceID, 
                    string TerminalId, 
                    object userState) {
            if ((this.SetSuplierbalanceOperationCompleted == null)) {
                this.SetSuplierbalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSuplierbalanceOperationCompleted);
            }
            this.InvokeAsync("SetSuplierbalance", new object[] {
                        Supplierid,
                        paymentmode,
                        transname,
                        fare,
                        transtype,
                        amount,
                        sign,
                        remarks,
                        agencyName,
                        creditNo,
                        creditDate,
                        paymentType,
                        bankName,
                        branchName,
                        receivedBy,
                        strUserName,
                        strIPAddress,
                        sequence,
                        strAirlinePNR,
                        Supliername,
                        TerminalType,
                        SequenceID,
                        TerminalId}, this.SetSuplierbalanceOperationCompleted, userState);
        }
        
        private void OnSetSuplierbalanceOperationCompleted(object arg) {
            if ((this.SetSuplierbalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSuplierbalanceCompleted(this, new SetSuplierbalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Air_Supplier_Markup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Air_Supplier_Markup(string strAgentId, string strAirlineCategory, string strAirlineName, string MarkupType, string TripType, string MarkUpAmount, string AirportType, string StatusType, string MarkUpPercentage, string strOfficeId, string strUserName, string strTerminalType, string strIPAddress, string strSequence, ref string Message) {
            object[] results = this.Invoke("Insert_Air_Supplier_Markup", new object[] {
                        strAgentId,
                        strAirlineCategory,
                        strAirlineName,
                        MarkupType,
                        TripType,
                        MarkUpAmount,
                        AirportType,
                        StatusType,
                        MarkUpPercentage,
                        strOfficeId,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message});
            Message = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Air_Supplier_MarkupAsync(string strAgentId, string strAirlineCategory, string strAirlineName, string MarkupType, string TripType, string MarkUpAmount, string AirportType, string StatusType, string MarkUpPercentage, string strOfficeId, string strUserName, string strTerminalType, string strIPAddress, string strSequence, string Message) {
            this.Insert_Air_Supplier_MarkupAsync(strAgentId, strAirlineCategory, strAirlineName, MarkupType, TripType, MarkUpAmount, AirportType, StatusType, MarkUpPercentage, strOfficeId, strUserName, strTerminalType, strIPAddress, strSequence, Message, null);
        }
        
        /// <remarks/>
        public void Insert_Air_Supplier_MarkupAsync(
                    string strAgentId, 
                    string strAirlineCategory, 
                    string strAirlineName, 
                    string MarkupType, 
                    string TripType, 
                    string MarkUpAmount, 
                    string AirportType, 
                    string StatusType, 
                    string MarkUpPercentage, 
                    string strOfficeId, 
                    string strUserName, 
                    string strTerminalType, 
                    string strIPAddress, 
                    string strSequence, 
                    string Message, 
                    object userState) {
            if ((this.Insert_Air_Supplier_MarkupOperationCompleted == null)) {
                this.Insert_Air_Supplier_MarkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Air_Supplier_MarkupOperationCompleted);
            }
            this.InvokeAsync("Insert_Air_Supplier_Markup", new object[] {
                        strAgentId,
                        strAirlineCategory,
                        strAirlineName,
                        MarkupType,
                        TripType,
                        MarkUpAmount,
                        AirportType,
                        StatusType,
                        MarkUpPercentage,
                        strOfficeId,
                        strUserName,
                        strTerminalType,
                        strIPAddress,
                        strSequence,
                        Message}, this.Insert_Air_Supplier_MarkupOperationCompleted, userState);
        }
        
        private void OnInsert_Air_Supplier_MarkupOperationCompleted(object arg) {
            if ((this.Insert_Air_Supplier_MarkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Air_Supplier_MarkupCompleted(this, new Insert_Air_Supplier_MarkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Insurance_Supplier_Commission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Insurance_Supplier_Commission(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Insurance_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Insurance_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Insurance_Supplier_CommissionAsync(strSupplierID, TerminalID, PlanName, StatusType, Status, Type, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Insurance_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Insurance_Supplier_CommissionOperationCompleted == null)) {
                this.Fetch_Insurance_Supplier_CommissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Insurance_Supplier_CommissionOperationCompleted);
            }
            this.InvokeAsync("Fetch_Insurance_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Insurance_Supplier_CommissionOperationCompleted, userState);
        }
        
        private void OnFetch_Insurance_Supplier_CommissionOperationCompleted(object arg) {
            if ((this.Fetch_Insurance_Supplier_CommissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Insurance_Supplier_CommissionCompleted(this, new Fetch_Insurance_Supplier_CommissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Bus_Supplier_Commission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Bus_Supplier_Commission(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Bus_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Bus_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Bus_Supplier_CommissionAsync(strSupplierID, TerminalID, PlanName, StatusType, Status, Type, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Bus_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Bus_Supplier_CommissionOperationCompleted == null)) {
                this.Fetch_Bus_Supplier_CommissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Bus_Supplier_CommissionOperationCompleted);
            }
            this.InvokeAsync("Fetch_Bus_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Bus_Supplier_CommissionOperationCompleted, userState);
        }
        
        private void OnFetch_Bus_Supplier_CommissionOperationCompleted(object arg) {
            if ((this.Fetch_Bus_Supplier_CommissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Bus_Supplier_CommissionCompleted(this, new Fetch_Bus_Supplier_CommissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Hotel_Supplier_Commission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Hotel_Supplier_Commission(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Hotel_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Hotel_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Hotel_Supplier_CommissionAsync(strSupplierID, TerminalID, PlanName, StatusType, Status, Type, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Hotel_Supplier_CommissionAsync(string strSupplierID, string TerminalID, string PlanName, string StatusType, string Status, string Type, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Hotel_Supplier_CommissionOperationCompleted == null)) {
                this.Fetch_Hotel_Supplier_CommissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Hotel_Supplier_CommissionOperationCompleted);
            }
            this.InvokeAsync("Fetch_Hotel_Supplier_Commission", new object[] {
                        strSupplierID,
                        TerminalID,
                        PlanName,
                        StatusType,
                        Status,
                        Type,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Hotel_Supplier_CommissionOperationCompleted, userState);
        }
        
        private void OnFetch_Hotel_Supplier_CommissionOperationCompleted(object arg) {
            if ((this.Fetch_Hotel_Supplier_CommissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Hotel_Supplier_CommissionCompleted(this, new Fetch_Hotel_Supplier_CommissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Flown_Unflown", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Flown_Unflown(string strSupplierID, string TerminalID, string PaymentMode, string AirlineCatogory, string AirlineCode, string FromDate, string ToDate, string ProductType, string Class, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Supplier_Flown_Unflown", new object[] {
                        strSupplierID,
                        TerminalID,
                        PaymentMode,
                        AirlineCatogory,
                        AirlineCode,
                        FromDate,
                        ToDate,
                        ProductType,
                        Class,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Flown_UnflownAsync(string strSupplierID, string TerminalID, string PaymentMode, string AirlineCatogory, string AirlineCode, string FromDate, string ToDate, string ProductType, string Class, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Supplier_Flown_UnflownAsync(strSupplierID, TerminalID, PaymentMode, AirlineCatogory, AirlineCode, FromDate, ToDate, ProductType, Class, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Flown_UnflownAsync(string strSupplierID, string TerminalID, string PaymentMode, string AirlineCatogory, string AirlineCode, string FromDate, string ToDate, string ProductType, string Class, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Supplier_Flown_UnflownOperationCompleted == null)) {
                this.Fetch_Supplier_Flown_UnflownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Flown_UnflownOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Flown_Unflown", new object[] {
                        strSupplierID,
                        TerminalID,
                        PaymentMode,
                        AirlineCatogory,
                        AirlineCode,
                        FromDate,
                        ToDate,
                        ProductType,
                        Class,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Supplier_Flown_UnflownOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Flown_UnflownOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Flown_UnflownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Flown_UnflownCompleted(this, new Fetch_Supplier_Flown_UnflownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Net_Sales", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Net_Sales(string strSupplierID, string strTerminalID, string strFromDate, string strToDate, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Net_Sales", new object[] {
                        strSupplierID,
                        strTerminalID,
                        strFromDate,
                        strToDate,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Net_SalesAsync(string strSupplierID, string strTerminalID, string strFromDate, string strToDate, string strFlag, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Net_SalesAsync(strSupplierID, strTerminalID, strFromDate, strToDate, strFlag, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Net_SalesAsync(string strSupplierID, string strTerminalID, string strFromDate, string strToDate, string strFlag, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Net_SalesOperationCompleted == null)) {
                this.Fetch_Supplier_Net_SalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Net_SalesOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Net_Sales", new object[] {
                        strSupplierID,
                        strTerminalID,
                        strFromDate,
                        strToDate,
                        strFlag,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Net_SalesOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Net_SalesOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Net_SalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Net_SalesCompleted(this, new Fetch_Supplier_Net_SalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Supplier_Main_Home", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Supplier_Main_Home(string strSupplierID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            object[] results = this.Invoke("Fetch_Supplier_Main_Home", new object[] {
                        strSupplierID,
                        strTerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Main_HomeAsync(string strSupplierID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType) {
            this.Fetch_Supplier_Main_HomeAsync(strSupplierID, strTerminalID, ipAddress, sequenceID, username, terminalType, null);
        }
        
        /// <remarks/>
        public void Fetch_Supplier_Main_HomeAsync(string strSupplierID, string strTerminalID, string ipAddress, string sequenceID, string username, string terminalType, object userState) {
            if ((this.Fetch_Supplier_Main_HomeOperationCompleted == null)) {
                this.Fetch_Supplier_Main_HomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Supplier_Main_HomeOperationCompleted);
            }
            this.InvokeAsync("Fetch_Supplier_Main_Home", new object[] {
                        strSupplierID,
                        strTerminalID,
                        ipAddress,
                        sequenceID,
                        username,
                        terminalType}, this.Fetch_Supplier_Main_HomeOperationCompleted, userState);
        }
        
        private void OnFetch_Supplier_Main_HomeOperationCompleted(object arg) {
            if ((this.Fetch_Supplier_Main_HomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Supplier_Main_HomeCompleted(this, new Fetch_Supplier_Main_HomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetch_Credential_OfficeId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Fetch_Credential_OfficeId(string strSupplierID, string strTerminalID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            object[] results = this.Invoke("Fetch_Credential_OfficeId", new object[] {
                        strSupplierID,
                        strTerminalID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Fetch_Credential_OfficeIdAsync(string strSupplierID, string strTerminalID, string strTerminalType, string strUserName, string strIPAddress, string strSequence) {
            this.Fetch_Credential_OfficeIdAsync(strSupplierID, strTerminalID, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Fetch_Credential_OfficeIdAsync(string strSupplierID, string strTerminalID, string strTerminalType, string strUserName, string strIPAddress, string strSequence, object userState) {
            if ((this.Fetch_Credential_OfficeIdOperationCompleted == null)) {
                this.Fetch_Credential_OfficeIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetch_Credential_OfficeIdOperationCompleted);
            }
            this.InvokeAsync("Fetch_Credential_OfficeId", new object[] {
                        strSupplierID,
                        strTerminalID,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Fetch_Credential_OfficeIdOperationCompleted, userState);
        }
        
        private void OnFetch_Credential_OfficeIdOperationCompleted(object arg) {
            if ((this.Fetch_Credential_OfficeIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Fetch_Credential_OfficeIdCompleted(this, new Fetch_Credential_OfficeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertVisaCancellationDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string insertVisaCancellationDetails(
                    string VCR_S_PNR, 
                    string VCR_AGENT_ID, 
                    string VCR_TERMINAL_ID, 
                    string VCR_SUPP_ID, 
                    string VCR_AGENT_STATUS, 
                    string VCR_SUPP_STATUS, 
                    string VCR_STATUS, 
                    string VCR_REQUESTED_BY, 
                    string VCR_SUPP_REFUND, 
                    string VCR_SUPP_PENALTY, 
                    string VCR_AGENT_REFUND, 
                    string VCR_AGENT_PENALTY, 
                    string VCR_CREATED_BY, 
                    string VCR_UPDATED_BY, 
                    string VCR_REQBY_APP_TYPE, 
                    string REMARKS, 
                    ref string refCancellation, 
                    string strPage, 
                    string strFunction, 
                    string strUserName, 
                    string strIp, 
                    string strSeq) {
            object[] results = this.Invoke("insertVisaCancellationDetails", new object[] {
                        VCR_S_PNR,
                        VCR_AGENT_ID,
                        VCR_TERMINAL_ID,
                        VCR_SUPP_ID,
                        VCR_AGENT_STATUS,
                        VCR_SUPP_STATUS,
                        VCR_STATUS,
                        VCR_REQUESTED_BY,
                        VCR_SUPP_REFUND,
                        VCR_SUPP_PENALTY,
                        VCR_AGENT_REFUND,
                        VCR_AGENT_PENALTY,
                        VCR_CREATED_BY,
                        VCR_UPDATED_BY,
                        VCR_REQBY_APP_TYPE,
                        REMARKS,
                        refCancellation,
                        strPage,
                        strFunction,
                        strUserName,
                        strIp,
                        strSeq});
            refCancellation = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void insertVisaCancellationDetailsAsync(
                    string VCR_S_PNR, 
                    string VCR_AGENT_ID, 
                    string VCR_TERMINAL_ID, 
                    string VCR_SUPP_ID, 
                    string VCR_AGENT_STATUS, 
                    string VCR_SUPP_STATUS, 
                    string VCR_STATUS, 
                    string VCR_REQUESTED_BY, 
                    string VCR_SUPP_REFUND, 
                    string VCR_SUPP_PENALTY, 
                    string VCR_AGENT_REFUND, 
                    string VCR_AGENT_PENALTY, 
                    string VCR_CREATED_BY, 
                    string VCR_UPDATED_BY, 
                    string VCR_REQBY_APP_TYPE, 
                    string REMARKS, 
                    string refCancellation, 
                    string strPage, 
                    string strFunction, 
                    string strUserName, 
                    string strIp, 
                    string strSeq) {
            this.insertVisaCancellationDetailsAsync(VCR_S_PNR, VCR_AGENT_ID, VCR_TERMINAL_ID, VCR_SUPP_ID, VCR_AGENT_STATUS, VCR_SUPP_STATUS, VCR_STATUS, VCR_REQUESTED_BY, VCR_SUPP_REFUND, VCR_SUPP_PENALTY, VCR_AGENT_REFUND, VCR_AGENT_PENALTY, VCR_CREATED_BY, VCR_UPDATED_BY, VCR_REQBY_APP_TYPE, REMARKS, refCancellation, strPage, strFunction, strUserName, strIp, strSeq, null);
        }
        
        /// <remarks/>
        public void insertVisaCancellationDetailsAsync(
                    string VCR_S_PNR, 
                    string VCR_AGENT_ID, 
                    string VCR_TERMINAL_ID, 
                    string VCR_SUPP_ID, 
                    string VCR_AGENT_STATUS, 
                    string VCR_SUPP_STATUS, 
                    string VCR_STATUS, 
                    string VCR_REQUESTED_BY, 
                    string VCR_SUPP_REFUND, 
                    string VCR_SUPP_PENALTY, 
                    string VCR_AGENT_REFUND, 
                    string VCR_AGENT_PENALTY, 
                    string VCR_CREATED_BY, 
                    string VCR_UPDATED_BY, 
                    string VCR_REQBY_APP_TYPE, 
                    string REMARKS, 
                    string refCancellation, 
                    string strPage, 
                    string strFunction, 
                    string strUserName, 
                    string strIp, 
                    string strSeq, 
                    object userState) {
            if ((this.insertVisaCancellationDetailsOperationCompleted == null)) {
                this.insertVisaCancellationDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertVisaCancellationDetailsOperationCompleted);
            }
            this.InvokeAsync("insertVisaCancellationDetails", new object[] {
                        VCR_S_PNR,
                        VCR_AGENT_ID,
                        VCR_TERMINAL_ID,
                        VCR_SUPP_ID,
                        VCR_AGENT_STATUS,
                        VCR_SUPP_STATUS,
                        VCR_STATUS,
                        VCR_REQUESTED_BY,
                        VCR_SUPP_REFUND,
                        VCR_SUPP_PENALTY,
                        VCR_AGENT_REFUND,
                        VCR_AGENT_PENALTY,
                        VCR_CREATED_BY,
                        VCR_UPDATED_BY,
                        VCR_REQBY_APP_TYPE,
                        REMARKS,
                        refCancellation,
                        strPage,
                        strFunction,
                        strUserName,
                        strIp,
                        strSeq}, this.insertVisaCancellationDetailsOperationCompleted, userState);
        }
        
        private void OninsertVisaCancellationDetailsOperationCompleted(object arg) {
            if ((this.insertVisaCancellationDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertVisaCancellationDetailsCompleted(this, new insertVisaCancellationDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatingVisaStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatingVisaStatus(string visaStatus, string SPNR, string visaNumber, string VisaRefNo, string Remarks, string EXPECTEDDATE, string SupplierId, string AgentId, string userName, string IpAddress, string terminalType, decimal sequenceID, ref string strErrorMsg, string lstrPageName, string lstrFunctionName) {
            object[] results = this.Invoke("UpdatingVisaStatus", new object[] {
                        visaStatus,
                        SPNR,
                        visaNumber,
                        VisaRefNo,
                        Remarks,
                        EXPECTEDDATE,
                        SupplierId,
                        AgentId,
                        userName,
                        IpAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunctionName});
            strErrorMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatingVisaStatusAsync(string visaStatus, string SPNR, string visaNumber, string VisaRefNo, string Remarks, string EXPECTEDDATE, string SupplierId, string AgentId, string userName, string IpAddress, string terminalType, decimal sequenceID, string strErrorMsg, string lstrPageName, string lstrFunctionName) {
            this.UpdatingVisaStatusAsync(visaStatus, SPNR, visaNumber, VisaRefNo, Remarks, EXPECTEDDATE, SupplierId, AgentId, userName, IpAddress, terminalType, sequenceID, strErrorMsg, lstrPageName, lstrFunctionName, null);
        }
        
        /// <remarks/>
        public void UpdatingVisaStatusAsync(
                    string visaStatus, 
                    string SPNR, 
                    string visaNumber, 
                    string VisaRefNo, 
                    string Remarks, 
                    string EXPECTEDDATE, 
                    string SupplierId, 
                    string AgentId, 
                    string userName, 
                    string IpAddress, 
                    string terminalType, 
                    decimal sequenceID, 
                    string strErrorMsg, 
                    string lstrPageName, 
                    string lstrFunctionName, 
                    object userState) {
            if ((this.UpdatingVisaStatusOperationCompleted == null)) {
                this.UpdatingVisaStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatingVisaStatusOperationCompleted);
            }
            this.InvokeAsync("UpdatingVisaStatus", new object[] {
                        visaStatus,
                        SPNR,
                        visaNumber,
                        VisaRefNo,
                        Remarks,
                        EXPECTEDDATE,
                        SupplierId,
                        AgentId,
                        userName,
                        IpAddress,
                        terminalType,
                        sequenceID,
                        strErrorMsg,
                        lstrPageName,
                        lstrFunctionName}, this.UpdatingVisaStatusOperationCompleted, userState);
        }
        
        private void OnUpdatingVisaStatusOperationCompleted(object arg) {
            if ((this.UpdatingVisaStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatingVisaStatusCompleted(this, new UpdatingVisaStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/P_Fetch_Supp_Balance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet P_Fetch_Supp_Balance(string supplierId, string UserId, string username, string paymentmode, string ipaddress, decimal sequenceId, ref System.Data.DataSet my_result, string terminalType, ref string strErrorMsg, string lstrPagename, string lstrFunctionName) {
            object[] results = this.Invoke("P_Fetch_Supp_Balance", new object[] {
                        supplierId,
                        UserId,
                        username,
                        paymentmode,
                        ipaddress,
                        sequenceId,
                        my_result,
                        terminalType,
                        strErrorMsg,
                        lstrPagename,
                        lstrFunctionName});
            my_result = ((System.Data.DataSet)(results[1]));
            strErrorMsg = ((string)(results[2]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void P_Fetch_Supp_BalanceAsync(string supplierId, string UserId, string username, string paymentmode, string ipaddress, decimal sequenceId, System.Data.DataSet my_result, string terminalType, string strErrorMsg, string lstrPagename, string lstrFunctionName) {
            this.P_Fetch_Supp_BalanceAsync(supplierId, UserId, username, paymentmode, ipaddress, sequenceId, my_result, terminalType, strErrorMsg, lstrPagename, lstrFunctionName, null);
        }
        
        /// <remarks/>
        public void P_Fetch_Supp_BalanceAsync(string supplierId, string UserId, string username, string paymentmode, string ipaddress, decimal sequenceId, System.Data.DataSet my_result, string terminalType, string strErrorMsg, string lstrPagename, string lstrFunctionName, object userState) {
            if ((this.P_Fetch_Supp_BalanceOperationCompleted == null)) {
                this.P_Fetch_Supp_BalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnP_Fetch_Supp_BalanceOperationCompleted);
            }
            this.InvokeAsync("P_Fetch_Supp_Balance", new object[] {
                        supplierId,
                        UserId,
                        username,
                        paymentmode,
                        ipaddress,
                        sequenceId,
                        my_result,
                        terminalType,
                        strErrorMsg,
                        lstrPagename,
                        lstrFunctionName}, this.P_Fetch_Supp_BalanceOperationCompleted, userState);
        }
        
        private void OnP_Fetch_Supp_BalanceOperationCompleted(object arg) {
            if ((this.P_Fetch_Supp_BalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.P_Fetch_Supp_BalanceCompleted(this, new P_Fetch_Supp_BalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Insurance_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Insurance_Commission_Details(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string Status, 
                    string Remarks, 
                    string TravelTodate, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            object[] results = this.Invoke("Insert_Insurance_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        Status,
                        Remarks,
                        TravelTodate,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Insurance_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string Status, 
                    string Remarks, 
                    string TravelTodate, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            this.Insert_Insurance_Commission_DetailsAsync(strSupplierID, TerminalID, Type, Amount, PlanName, Datetype, Bookedfromdate, BookedTodate, Travelfromdate, Status, Remarks, TravelTodate, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Insert_Insurance_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string Status, 
                    string Remarks, 
                    string TravelTodate, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence, 
                    object userState) {
            if ((this.Insert_Insurance_Commission_DetailsOperationCompleted == null)) {
                this.Insert_Insurance_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Insurance_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Insurance_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        Status,
                        Remarks,
                        TravelTodate,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Insert_Insurance_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Insurance_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Insurance_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Insurance_Commission_DetailsCompleted(this, new Insert_Insurance_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_Bus_Commission_Details", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Insert_Bus_Commission_Details(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            object[] results = this.Invoke("Insert_Bus_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        TravelTodate,
                        Status,
                        Remarks,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_Bus_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence) {
            this.Insert_Bus_Commission_DetailsAsync(strSupplierID, TerminalID, Type, Amount, PlanName, Datetype, Bookedfromdate, BookedTodate, Travelfromdate, TravelTodate, Status, Remarks, strTerminalType, strUserName, strIPAddress, strSequence, null);
        }
        
        /// <remarks/>
        public void Insert_Bus_Commission_DetailsAsync(
                    string strSupplierID, 
                    string TerminalID, 
                    string Type, 
                    string Amount, 
                    string PlanName, 
                    string Datetype, 
                    string Bookedfromdate, 
                    string BookedTodate, 
                    string Travelfromdate, 
                    string TravelTodate, 
                    string Status, 
                    string Remarks, 
                    string strTerminalType, 
                    string strUserName, 
                    string strIPAddress, 
                    string strSequence, 
                    object userState) {
            if ((this.Insert_Bus_Commission_DetailsOperationCompleted == null)) {
                this.Insert_Bus_Commission_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_Bus_Commission_DetailsOperationCompleted);
            }
            this.InvokeAsync("Insert_Bus_Commission_Details", new object[] {
                        strSupplierID,
                        TerminalID,
                        Type,
                        Amount,
                        PlanName,
                        Datetype,
                        Bookedfromdate,
                        BookedTodate,
                        Travelfromdate,
                        TravelTodate,
                        Status,
                        Remarks,
                        strTerminalType,
                        strUserName,
                        strIPAddress,
                        strSequence}, this.Insert_Bus_Commission_DetailsOperationCompleted, userState);
        }
        
        private void OnInsert_Bus_Commission_DetailsOperationCompleted(object arg) {
            if ((this.Insert_Bus_Commission_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_Bus_Commission_DetailsCompleted(this, new Insert_Bus_Commission_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Hotel_Commission_DetailsCompletedEventHandler(object sender, Insert_Hotel_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Hotel_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Hotel_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Hotel_Supplier_Commission_DetailsCompletedEventHandler(object sender, Fetch_Hotel_Supplier_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Hotel_Supplier_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Hotel_Supplier_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Bus_Supplier_Commission_DetailsCompletedEventHandler(object sender, Fetch_Bus_Supplier_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Bus_Supplier_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Bus_Supplier_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Insurance_Supplier_Commission_DetailsCompletedEventHandler(object sender, Fetch_Insurance_Supplier_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Insurance_Supplier_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Insurance_Supplier_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Airline_CommissionCompletedEventHandler(object sender, Insert_Airline_CommissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Airline_CommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Airline_CommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateTrackDetailsCompletedEventHandler(object sender, UpdateTrackDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTrackDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTrackDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DashBoradDetailsCompletedEventHandler(object sender, DashBoradDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DashBoradDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DashBoradDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchBookedTicketDetailsCompletedEventHandler(object sender, FetchBookedTicketDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBookedTicketDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBookedTicketDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void AgentFindCompletedEventHandler(object sender, AgentFindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AgentFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AgentFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventHandler(object sender, FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FECTH_OWN_SUPP_DETAILS_RQT_CLIENT_PCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrDisplayMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Get_login_detailsCompletedEventHandler(object sender, Get_login_detailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_login_detailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_login_detailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DuplicatebookingCompletedEventHandler(object sender, DuplicatebookingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DuplicatebookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DuplicatebookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchActivityBookedHistoryDetailsCompletedEventHandler(object sender, FetchActivityBookedHistoryDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchActivityBookedHistoryDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchActivityBookedHistoryDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsout {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pstrerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchActivityofflinecityCompletedEventHandler(object sender, FetchActivityofflinecityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchActivityofflinecityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchActivityofflinecityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] dsout {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pstrerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Client_GST_DetailsCompletedEventHandler(object sender, Fetch_Client_GST_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Client_GST_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Client_GST_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PrintTicket_RiyaCompletedEventHandler(object sender, PrintTicket_RiyaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintTicket_RiyaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintTicket_RiyaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int TktCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string TickectCopy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_AirlineNameFormatCompletedEventHandler(object sender, Fetch_AirlineNameFormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_AirlineNameFormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_AirlineNameFormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_BusServiceCharge_WebHomeByteCompletedEventHandler(object sender, Fetch_BusServiceCharge_WebHomeByteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_BusServiceCharge_WebHomeByteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_BusServiceCharge_WebHomeByteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Modify_BusServiceChargeCompletedEventHandler(object sender, Modify_BusServiceChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Modify_BusServiceChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Modify_BusServiceChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchCodeCountDetailsCompletedEventHandler(object sender, FetchCodeCountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCodeCountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCodeCountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertCommonPopupCompletedEventHandler(object sender, InsertCommonPopupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCommonPopupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCommonPopupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Update_Login_StatusCompletedEventHandler(object sender, Insert_Update_Login_StatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Update_Login_StatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Update_Login_StatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Modify_HotelServiceChargeCompletedEventHandler(object sender, Modify_HotelServiceChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Modify_HotelServiceChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Modify_HotelServiceChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_HotelServiceCharge_WebHomeCompletedEventHandler(object sender, Fetch_HotelServiceCharge_WebHomeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_HotelServiceCharge_WebHomeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_HotelServiceCharge_WebHomeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendmailCompletedEventHandler(object sender, SendmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SendmailGmailNewCompletedEventHandler(object sender, SendmailGmailNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendmailGmailNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendmailGmailNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateSeqNoForVisaCompletedEventHandler(object sender, GenerateSeqNoForVisaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateSeqNoForVisaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateSeqNoForVisaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertVisaOfflineCompletedEventHandler(object sender, InsertVisaOfflineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertVisaOfflineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertVisaOfflineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchPricingcodeForQTKTCompletedEventHandler(object sender, FetchPricingcodeForQTKTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchPricingcodeForQTKTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchPricingcodeForQTKTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchThaiVisaBookedHistoryCompletedEventHandler(object sender, FetchThaiVisaBookedHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchThaiVisaBookedHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchThaiVisaBookedHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchThaiVisaViewPNRCompletedEventHandler(object sender, FetchThaiVisaViewPNRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchThaiVisaViewPNRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchThaiVisaViewPNRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertVisaOfflineNewCompletedEventHandler(object sender, InsertVisaOfflineNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertVisaOfflineNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertVisaOfflineNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchBulkMailCompletedEventHandler(object sender, FetchBulkMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBulkMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBulkMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string StrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertMailCompletedEventHandler(object sender, InsertMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet ds_set {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Login_DetailsCompletedEventHandler(object sender, Fetch_Login_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Login_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Login_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_WebHomeLogin_DetailsCompletedEventHandler(object sender, Fetch_WebHomeLogin_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_WebHomeLogin_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_WebHomeLogin_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void INSERT_LOGIN_HISTORYCompletedEventHandler(object sender, INSERT_LOGIN_HISTORYCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INSERT_LOGIN_HISTORYCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INSERT_LOGIN_HISTORYCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Login_User_DetailsCompletedEventHandler(object sender, Insert_Login_User_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Login_User_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Login_User_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_All_Agent_Branch_DetailsCompletedEventHandler(object sender, Fetch_All_Agent_Branch_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_All_Agent_Branch_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_All_Agent_Branch_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_All_Agent_Branch_DetailsByteCompletedEventHandler(object sender, Fetch_All_Agent_Branch_DetailsByteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_All_Agent_Branch_DetailsByteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_All_Agent_Branch_DetailsByteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changePasswordCompletedEventHandler(object sender, changePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchBrBookedHistoryCompletedEventHandler(object sender, FetchBrBookedHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBrBookedHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBrBookedHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Pnr_DetailsCompletedEventHandler(object sender, Fetch_Pnr_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Pnr_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Pnr_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_BUS_BookedHistory_DetailsCompletedEventHandler(object sender, Fetch_BUS_BookedHistory_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_BUS_BookedHistory_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_BUS_BookedHistory_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BusPnrdetailsCompletedEventHandler(object sender, BusPnrdetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BusPnrdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BusPnrdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsresult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchCompanySuperuserCompletedEventHandler(object sender, FetchCompanySuperuserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCompanySuperuserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCompanySuperuserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Employee_detailsCompletedEventHandler(object sender, Fetch_Employee_detailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Employee_detailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Employee_detailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateTrackID_PgCompletedEventHandler(object sender, GenerateTrackID_PgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateTrackID_PgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateTrackID_PgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Payment_Gateway_TrackCompletedEventHandler(object sender, Insert_Payment_Gateway_TrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Payment_Gateway_TrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Payment_Gateway_TrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_PG_Payment_DetailsCompletedEventHandler(object sender, Fetch_PG_Payment_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_PG_Payment_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_PG_Payment_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_PG_Payment_Details_V3CompletedEventHandler(object sender, Fetch_PG_Payment_Details_V3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_PG_Payment_Details_V3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_PG_Payment_Details_V3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Check_Payment_Gateway_TrackCompletedEventHandler(object sender, Check_Payment_Gateway_TrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check_Payment_Gateway_TrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check_Payment_Gateway_TrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Update_Payment_Gateway_TrackCompletedEventHandler(object sender, Update_Payment_Gateway_TrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Payment_Gateway_TrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Payment_Gateway_TrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Check_ICICI_Payment_Gateway_TrackCompletedEventHandler(object sender, Check_ICICI_Payment_Gateway_TrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check_ICICI_Payment_Gateway_TrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check_ICICI_Payment_Gateway_TrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchCodeDetailsCompletedEventHandler(object sender, FetchCodeDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCodeDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCodeDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string _rError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchCodeDetails_v1CompletedEventHandler(object sender, FetchCodeDetails_v1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCodeDetails_v1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCodeDetails_v1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string _rError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchPricingCodeDetailsCompletedEventHandler(object sender, FetchPricingCodeDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchPricingCodeDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchPricingCodeDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strerror {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FETCHAGENTPGDETAILSCompletedEventHandler(object sender, FETCHAGENTPGDETAILSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FETCHAGENTPGDETAILSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FETCHAGENTPGDETAILSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Check_Topup_trackIDCompletedEventHandler(object sender, Check_Topup_trackIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check_Topup_trackIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check_Topup_trackIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strTopupDetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Update_Ticket_Details_TableCompletedEventHandler(object sender, Update_Ticket_Details_TableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Ticket_Details_TableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Ticket_Details_TableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strTopupDetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_SequenceNumberCompletedEventHandler(object sender, Fetch_SequenceNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_SequenceNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_SequenceNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Detailed_LogDetailsCompletedEventHandler(object sender, Insert_Detailed_LogDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Detailed_LogDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Detailed_LogDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_LogDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Detailed_LogDetails_WebCompletedEventHandler(object sender, Insert_Detailed_LogDetails_WebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Detailed_LogDetails_WebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Detailed_LogDetails_WebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void APPSSECCHECKCompletedEventHandler(object sender, APPSSECCHECKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class APPSSECCHECKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal APPSSECCHECKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strdetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void WEBAPPSSECCHECKCompletedEventHandler(object sender, WEBAPPSSECCHECKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WEBAPPSSECCHECKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WEBAPPSSECCHECKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strdetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void WEBAPPSSESSIONCHECKCompletedEventHandler(object sender, WEBAPPSSESSIONCHECKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WEBAPPSSESSIONCHECKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WEBAPPSSESSIONCHECKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strdetails {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckIndeskTerminalIDCompletedEventHandler(object sender, CheckIndeskTerminalIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIndeskTerminalIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIndeskTerminalIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void newdashboardreportwebCompletedEventHandler(object sender, newdashboardreportwebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newdashboardreportwebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newdashboardreportwebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrcount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RequestbuilddashboardwebCompletedEventHandler(object sender, RequestbuilddashboardwebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestbuilddashboardwebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestbuilddashboardwebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RequestdaywisesegwebCompletedEventHandler(object sender, RequestdaywisesegwebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestdaywisesegwebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestdaywisesegwebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void newdashboardwebCompletedEventHandler(object sender, newdashboardwebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newdashboardwebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newdashboardwebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RequestdaywisesegCompletedEventHandler(object sender, RequestdaywisesegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestdaywisesegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestdaywisesegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void newdashboardCompletedEventHandler(object sender, newdashboardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newdashboardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newdashboardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void newdashboardreportCompletedEventHandler(object sender, newdashboardreportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newdashboardreportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newdashboardreportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pstrcount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchBrBookedHistoryB2BCompletedEventHandler(object sender, FetchBrBookedHistoryB2BCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchBrBookedHistoryB2BCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchBrBookedHistoryB2BCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchSeatTrackCompletedEventHandler(object sender, FetchSeatTrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchSeatTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchSeatTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SystemdetailsCompletedEventHandler(object sender, SystemdetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SystemdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void fetchdownloaddetailsCompletedEventHandler(object sender, fetchdownloaddetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchdownloaddetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchdownloaddetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchfarecalendarCompletedEventHandler(object sender, FetchfarecalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchfarecalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchfarecalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertvatdetailsCompletedEventHandler(object sender, insertvatdetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertvatdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertvatdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Best_Buy_ContentCompletedEventHandler(object sender, Fetch_Best_Buy_ContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Best_Buy_ContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Best_Buy_ContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void P_FETCH_PAYMENT_GATEWAYNAMECompletedEventHandler(object sender, P_FETCH_PAYMENT_GATEWAYNAMECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_FETCH_PAYMENT_GATEWAYNAMECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_FETCH_PAYMENT_GATEWAYNAMECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventHandler(object sender, FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FETCH_PAYMENT_GATEWAY_CHARGESWEBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_topup_details_webCompletedEventHandler(object sender, Fetch_topup_details_webCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_topup_details_webCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_topup_details_webCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Agent_Credit_Balance_Details_franciesCompletedEventHandler(object sender, Fetch_Agent_Credit_Balance_Details_franciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Agent_Credit_Balance_Details_franciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Agent_Credit_Balance_Details_franciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Franchise_master_dashboardCompletedEventHandler(object sender, Fetch_Franchise_master_dashboardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Franchise_master_dashboardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Franchise_master_dashboardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Franchise_agentbalance_reportCompletedEventHandler(object sender, Fetch_Franchise_agentbalance_reportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Franchise_agentbalance_reportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Franchise_agentbalance_reportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Franchise_agentdetailsCompletedEventHandler(object sender, Fetch_Franchise_agentdetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Franchise_agentdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Franchise_agentdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_vat_registrationCompletedEventHandler(object sender, Insert_vat_registrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_vat_registrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_vat_registrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateimgwebhomeCompletedEventHandler(object sender, UpdateimgwebhomeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateimgwebhomeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateimgwebhomeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchOrDeleteImages_WebCompletedEventHandler(object sender, FetchOrDeleteImages_WebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchOrDeleteImages_WebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchOrDeleteImages_WebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_MarkUP_Details_WebCompletedEventHandler(object sender, Insert_MarkUP_Details_WebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_MarkUP_Details_WebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_MarkUP_Details_WebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Airline_Markup_Details_webCompletedEventHandler(object sender, Fetch_Airline_Markup_Details_webCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Airline_Markup_Details_webCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Airline_Markup_Details_webCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventHandler(object sender, P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_UPDATE_PAYMENT_GATEWAY_TRACK_STATUSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Errormsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertPgtrackCompletedEventHandler(object sender, insertPgtrackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertPgtrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertPgtrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchhotelcountriesCompletedEventHandler(object sender, FetchhotelcountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchhotelcountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchhotelcountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertservicechargeCompletedEventHandler(object sender, InsertservicechargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertservicechargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertservicechargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchhotelcitynameCompletedEventHandler(object sender, FetchhotelcitynameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchhotelcitynameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchhotelcitynameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchOfflineHoteldetCompletedEventHandler(object sender, FetchOfflineHoteldetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchOfflineHoteldetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchOfflineHoteldetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCityCodeCompletedEventHandler(object sender, GetCityCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCityCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HotelAmenitiesCompletedEventHandler(object sender, HotelAmenitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HotelAmenitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HotelAmenitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertHtldetRefidCompletedEventHandler(object sender, InsertHtldetRefidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertHtldetRefidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertHtldetRefidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchHotelfiltercitynameCompletedEventHandler(object sender, FetchHotelfiltercitynameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchHotelfiltercitynameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchHotelfiltercitynameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchApphtlnameCompletedEventHandler(object sender, FetchApphtlnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchApphtlnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchApphtlnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchOtherAgntLgnDetailsCompletedEventHandler(object sender, FetchOtherAgntLgnDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchOtherAgntLgnDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchOtherAgntLgnDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchHtlServcCompletedEventHandler(object sender, FetchHtlServcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchHtlServcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchHtlServcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchHtlExistpaxdetCompletedEventHandler(object sender, FetchHtlExistpaxdetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchHtlExistpaxdetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchHtlExistpaxdetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InserthtlcancelReqCompletedEventHandler(object sender, InserthtlcancelReqCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserthtlcancelReqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserthtlcancelReqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FetchHtlDuplicatepaxdetCompletedEventHandler(object sender, FetchHtlDuplicatepaxdetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchHtlDuplicatepaxdetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchHtlDuplicatepaxdetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_VendorApps_Login_DetailsCompletedEventHandler(object sender, Fetch_VendorApps_Login_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_VendorApps_Login_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_VendorApps_Login_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Delete_Supplier_CommissionCompletedEventHandler(object sender, Insert_Delete_Supplier_CommissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Delete_Supplier_CommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Delete_Supplier_CommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Supplier_Credit_And_Debit_DetailsCompletedEventHandler(object sender, Insert_Supplier_Credit_And_Debit_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Supplier_Credit_And_Debit_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Supplier_Credit_And_Debit_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_HomeCompletedEventHandler(object sender, Fetch_Supplier_HomeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_HomeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_HomeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventHandler(object sender, Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Home_MonthlyWise_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Visa_MasterCompletedEventHandler(object sender, Fetch_Visa_MasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Visa_MasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Visa_MasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Airline_MarkupCompletedEventHandler(object sender, Fetch_Supplier_Airline_MarkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Airline_MarkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Airline_MarkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Airline_Markup_ResultCompletedEventHandler(object sender, Fetch_Supplier_Airline_Markup_ResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Airline_Markup_ResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Airline_Markup_ResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Visa_DetailsCompletedEventHandler(object sender, Fetch_Visa_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Visa_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Visa_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_SSR_Details_NewCompletedEventHandler(object sender, Fetch_SSR_Details_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_SSR_Details_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_SSR_Details_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet my_ds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Current_BalanceCompletedEventHandler(object sender, Fetch_Current_BalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Current_BalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Current_BalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Visa_FeeCompletedEventHandler(object sender, Fetch_Visa_FeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Visa_FeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Visa_FeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Update_Supplier_Control_PanelCompletedEventHandler(object sender, Update_Supplier_Control_PanelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Supplier_Control_PanelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Supplier_Control_PanelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Sales_ReportsCompletedEventHandler(object sender, Fetch_Supplier_Sales_ReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Sales_ReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Sales_ReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Update_Supplier_Sales_ReportsCompletedEventHandler(object sender, Update_Supplier_Sales_ReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Supplier_Sales_ReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Supplier_Sales_ReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_VisaDetails_With_KnownValuesCompletedEventHandler(object sender, Fetch_VisaDetails_With_KnownValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_VisaDetails_With_KnownValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_VisaDetails_With_KnownValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Visa_Supplier_FareCompletedEventHandler(object sender, Fetch_Visa_Supplier_FareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Visa_Supplier_FareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Visa_Supplier_FareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Visa_AmountCompletedEventHandler(object sender, Insert_Visa_AmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Visa_AmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Visa_AmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Update_Visa_AmountCompletedEventHandler(object sender, Update_Visa_AmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Visa_AmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Visa_AmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Visa_PlanCompletedEventHandler(object sender, Fetch_Visa_PlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Visa_PlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Visa_PlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Delete_Visa_FeeCompletedEventHandler(object sender, Delete_Visa_FeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Delete_Visa_FeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Delete_Visa_FeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void P_Updating_Supplier_BalanceCompletedEventHandler(object sender, P_Updating_Supplier_BalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_Updating_Supplier_BalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_Updating_Supplier_BalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Check_Visa_NumberCompletedEventHandler(object sender, Check_Visa_NumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Check_Visa_NumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Check_Visa_NumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetSuplierbalanceCompletedEventHandler(object sender, SetSuplierbalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSuplierbalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSuplierbalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Air_Supplier_MarkupCompletedEventHandler(object sender, Insert_Air_Supplier_MarkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Air_Supplier_MarkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Air_Supplier_MarkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Insurance_Supplier_CommissionCompletedEventHandler(object sender, Fetch_Insurance_Supplier_CommissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Insurance_Supplier_CommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Insurance_Supplier_CommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Bus_Supplier_CommissionCompletedEventHandler(object sender, Fetch_Bus_Supplier_CommissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Bus_Supplier_CommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Bus_Supplier_CommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Hotel_Supplier_CommissionCompletedEventHandler(object sender, Fetch_Hotel_Supplier_CommissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Hotel_Supplier_CommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Hotel_Supplier_CommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Flown_UnflownCompletedEventHandler(object sender, Fetch_Supplier_Flown_UnflownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Flown_UnflownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Flown_UnflownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Net_SalesCompletedEventHandler(object sender, Fetch_Supplier_Net_SalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Net_SalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Net_SalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Supplier_Main_HomeCompletedEventHandler(object sender, Fetch_Supplier_Main_HomeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Supplier_Main_HomeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Supplier_Main_HomeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Fetch_Credential_OfficeIdCompletedEventHandler(object sender, Fetch_Credential_OfficeIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fetch_Credential_OfficeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Fetch_Credential_OfficeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void insertVisaCancellationDetailsCompletedEventHandler(object sender, insertVisaCancellationDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertVisaCancellationDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertVisaCancellationDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string refCancellation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdatingVisaStatusCompletedEventHandler(object sender, UpdatingVisaStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatingVisaStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatingVisaStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void P_Fetch_Supp_BalanceCompletedEventHandler(object sender, P_Fetch_Supp_BalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class P_Fetch_Supp_BalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal P_Fetch_Supp_BalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet my_result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Insurance_Commission_DetailsCompletedEventHandler(object sender, Insert_Insurance_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Insurance_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Insurance_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void Insert_Bus_Commission_DetailsCompletedEventHandler(object sender, Insert_Bus_Commission_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_Bus_Commission_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_Bus_Commission_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591